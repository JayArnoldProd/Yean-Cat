Bug Name: Action_Parameter_Loss_In_Chat_Bubble_Execution
Description: When adding and executing the 'MainMenuChoices' action, which uses the chat_bubble command, not all parameters are being correctly saved or retrieved. Specifically, when executing the action, only the first parameter (the text) is being passed to the chat_bubble function, while the owner and choices parameters are missing. This likely affects other actions using complex parameter structures.

== Related Objects ==

Object: obj_Client

File: Step_0.gml
Code:
/// Step Event of obj_Client

//create mouse if it doesnt exist and using keyboard and mouse
if !instance_exists(obj_Cursor) and (global.control_type!=1) { 
	instance_create_depth(mouse_x,mouse_y,-1000000,obj_Cursor);
}

// Set current font and heartbeat rate
global.heartbeatBPM = global.current_bpm;
fnt_chat = master.font_array[fnt_chat_id, 1];
global.wrapWidth = 2350; // Adjusted wrap width

//check for gamepad input
check_gamepad_input()

//randomly and probability skewed to bring shake_angle back to 0
if abs(shake_angle)>.1 {
	var invert = choose(-1,1)*(random(8)+92)/100
	shake_angle=round(invert*shake_angle*100)/100
} else {
	if shake_angle!=0 {
	shake_angle=0
	keyboard_lastkey=vk_nokey
	}
}

// Handle reconnection logic
if (!global.isConnected && global.reconnectTimer <= 0) {
    var result = network_connect(global.client_socket, global.serverAddress, global.serverPort);
    if (result >= 0) {
        global.isConnected = true;
        isServerRunning = true;
        handleDebugMessage("[Client] Successfully reconnected to server.", true);
        global.reconnectTimer = global.reconnectInterval;
    } else {
        global.reconnectTimer = global.reconnectInterval;
        isServerRunning = false;
        handleDebugMessage("[Client] Failed to reconnect to server. Will try again...", true);
    }
} else if (global.isConnected && global.reconnectTimer > 0) {
    global.reconnectTimer--;
}

// Handle incoming network events safely
if (ds_exists(async_load, ds_type_map)) {
    var type = ds_map_find_value(async_load, "type");
    var n_id = ds_map_find_value(async_load, "id");

    if (n_id == global.client_socket) {
        switch (type) {
            case network_type_data:
                var buffer = ds_map_find_value(async_load, "buffer");
                buffer_seek(buffer, buffer_seek_start, 0);
                var identifier = buffer_read(buffer, buffer_u8);

                switch (identifier) {
                    case global.IDENTIFIER_HEARTBEAT:
                        handleDebugMessage("[Client] Heartbeat received from server.", true);
                        break;
                    
                    case global.IDENTIFIER_TEST_MESSAGE:
                        var msg = buffer_read(buffer, buffer_string);
                        handleDebugMessage("[Client] Message from server: " + msg, true);
                        break;
                }
                buffer_delete(buffer);
                break;

            case network_type_connect:
                handleDebugMessage("[Client] Connected to server.", true);
                break;
                
            case network_type_disconnect:
                global.isConnected = false;
                handleDebugMessage("[Client] Disconnected from server. Attempting to identify cause...", true);
                break;
        }
    }
} else {
    //show_debug_message("ERROR: Invalid ds_map reference in async event.");
}


// Command input and execution logic
if (input_check_pressed("chat") && !isActive) {
    isActive = true;
    global.commandBuffer = "";
    keyboard_string = "";
    show_debug_message("[Client] Chat input activated.");
}

// Toggle chat box with a specific key, e.g., Tab
if (keyboard_check_pressed(vk_tab)) {
    show_chatbox = !show_chatbox;
    global.commandBuffer = "";  // Clear previous commands or texts
    keyboard_string = "";
    show_debug_message("[Client] Toggled chat box visibility: " + string(show_chatbox));
}

// Handle backspace and text input
if (isActive) {
// Handle backspace input
    if (input_check("cancel") && string_length(global.commandBuffer) > 0) {
        if (global.backspaceTimer == 0 || global.backspaceTimer >= global.backspaceDelay) {
            var lastCharPosition = string_length(global.commandBuffer);

            // Check if the last character is a newline
            if (string_char_at(global.commandBuffer, lastCharPosition) == "\n") {
                // Adjust the global.lastSpaceIndex if necessary
                if (global.lastSpaceIndex >= lastCharPosition) {
                    global.lastSpaceIndex = string_last_index_of(string_copy(global.commandBuffer, 1, lastCharPosition - 1), " ");
                }
            }

            // Perform the character deletion
            global.commandBuffer = string_delete(global.commandBuffer, lastCharPosition, 1);
            update_chat_input_visuals();
            show_debug_message("[Client] Updated command buffer after backspace: " + global.commandBuffer);

            // Clear the keyboard buffer to avoid unwanted characters
            keyboard_string = "";

            // Increase deletion speed
            if (global.backspaceTimer == 0) {
                global.backspaceTimer = 1;
            } else {
                global.backspaceTimer = global.backspaceSpeed;
				if global.backspaceSpeed<14 {
					global.backspaceSpeed+=1
				}
            }
        } else {
            global.backspaceTimer += 1;
        }
    } else {
        global.backspaceTimer = 0; // Reset timer when backspace is released
		global.backspaceSpeed=1
    }
	if string_length(global.commandBuffer)<global.character_limit {
    var char = keyboard_string;
	} else {
		var char = "";
		if keyboard_check_pressed(vk_anykey) {
		if last_key_is_valid_character(keyboard_lastkey) {
			//play sound to indicate char limit. 
			var sound = audio_play_sound(uibuttonsound7,0,0,master.uivol*master.mastervol)
			shake_angle=choose(-1,1)*random_range(.95,1.00)
		}
		}
	}
    // Detect pasting via Ctrl+V (Windows) or Command+V (Mac)
    var pasting = false;
    if (os_type == os_windows) {
        if (keyboard_check(vk_control) && keyboard_check_pressed(ord("V"))) {
            pasting = true;
			keyboard_string=""
			char = ""
        }
    } else if (os_type == os_macosx) {
        if (keyboard_check(92) && keyboard_check_pressed(ord("V"))) {
            pasting = true;
			keyboard_string=""
			char = ""
        }
    }

    // Handle pasting
    if (pasting) {
        if (clipboard_has_text()) {
            var clip_string = clipboard_get_text();
            if (string_length(clip_string) > 0 && string_length(clip_string) < 200) {
                global.commandBuffer = appendAndWrap(clip_string, global.commandBuffer, global.wrapWidth);
                update_chat_input_visuals();
                show_debug_message("[Client] Appended clipboard content to command buffer: " + global.commandBuffer);
            } else {
                handleDebugMessage("Clipboard content is too long to paste!", true);
            }
        }
        pasting = false;
    }

    if (char != "") {
        // Prevent typing if command is filled
        if (!((global.textColor == c_lime || global.textColor == c_red) && slash_typed)) {
            draw_set_font(fnt_chat);
            global.commandBuffer = appendAndWrap(char, global.commandBuffer, global.wrapWidth);
        }
        update_chat_input_visuals();
        keyboard_string = ""; // Clear the buffer after reading
        //show_debug_message("[Client] Appended character to command buffer: " + global.commandBuffer);
    }

// Check if Enter is pressed to process the command or chat message
if (input_check_pressed("confirm")) {
    var trimmedCommand = string_trim(string_replace_all(global.commandBuffer, "\n", " "));
    if (string_char_at(trimmedCommand, 1) == "/") {
        var command = string_delete(trimmedCommand, 1, 1);
        execute_command(string_trim(command));
    } else {
            var chatMessage = "[" + master.playername + "] " + global.commandBuffer;
            global.message_is_bubble = 1;
            handleDebugMessage(chatMessage, false);
            global.message_is_bubble = 0;
        }

        // Add the command/message to the recall list
        if (string_length(global.commandBuffer) > 0) {
            ds_list_add(global.recall_list, global.commandBuffer);
            if (ds_list_size(global.recall_list) > global.recall_max) {
                ds_list_delete(global.recall_list, 0);  // Remove the oldest entry if exceeding the limit
            }
        }
        global.recall_index = -1;
        global.textColor = global.defaultTextColor;
        global.commandBuffer = "";
        isActive = false;
        show_debug_message("[Client] Processed command/chat and cleared buffer.");
}
    // Navigate through the recall list using up and down arrows
    if (keyboard_check_pressed(vk_up)) {
        if (global.recall_index == -1) {
            global.recall_index = ds_list_size(global.recall_list) - 1;
        } else {
            global.recall_index = max(0, global.recall_index - 1);
        }

        if (global.recall_index >= 0 && global.recall_index < ds_list_size(global.recall_list)) {
            global.commandBuffer = ds_list_find_value(global.recall_list, global.recall_index);
            update_chat_input_visuals();
            show_debug_message("[Client] Recalled previous command/chat: " + global.commandBuffer);
        }
    } else if (keyboard_check_pressed(vk_down)) {
        if (global.recall_index != -1) {
            global.recall_index = min(ds_list_size(global.recall_list) - 1, global.recall_index + 1);

            if (global.recall_index < ds_list_size(global.recall_list)) {
                global.commandBuffer = ds_list_find_value(global.recall_list, global.recall_index);
            } else {
                global.commandBuffer = "";
            }
            update_chat_input_visuals();
            show_debug_message("[Client] Recalled next command/chat: " + global.commandBuffer);
        }
    }
}

if (show_chatbox && ds_exists(global.debugMessages, ds_type_list)) {
    var totalLines = drawChatMessages(global.debugMessages, 990, 0, global.max_visible_lines, .5, false, global.c_chat2, global.c_chat1);
    
    // Check if a new message was added
    if (ds_list_size(global.debugMessages) > 0 && 
        ds_list_find_value(global.debugMessages, ds_list_size(global.debugMessages) - 1) == global.lastAddedMessage) {
        // Scroll to the bottom when a new message is added
        scrollIndex = max(0, totalLines - global.max_visible_lines);
        global.lastAddedMessage = ""; // Reset the last added message
    } else {
        // Ensure scrollIndex is within valid range
        scrollIndex = clamp(scrollIndex, 0, max(0, totalLines - global.max_visible_lines));
    }
    
    // Draw the chat messages
    drawChatMessages(global.debugMessages, 990, 0, global.max_visible_lines, .5, true, global.c_chat2, global.c_chat1);
}

// Only process incoming data and send heartbeats if the server is running
if (isServerRunning && sendHeartbeat && (current_time - global.lastHeartbeatTime >= broadcastInterval)) {
    handleDebugMessage("Heartbeat sent to Server", true);
    global.lastHeartbeatTime = current_time;
}





File: Other_68.gml
Code:
// Async Networking Event Handling for Client

/// Revised Async Networking Event
var type = ds_map_find_value(async_load, "type");
var n_id = ds_map_find_value(async_load, "id");

if (n_id == global.client_socket) {
    switch (type) {
        case network_type_connect:
            show_debug_message("[Client] Connected to server.");
            global.isConnected = true;
            break;
        case network_type_disconnect:
            show_debug_message("[Client] Disconnected from server.");
            global.isConnected = false;
            break;
        case network_type_data:
            if (ds_map_exists(async_load, "buffer")) {
                var buffer = ds_map_find_value(async_load, "buffer");
                if (buffer != undefined) {
                    buffer_seek(buffer, buffer_seek_start, 0);
                    var identifier = buffer_read(buffer, buffer_u8);
                    handleNetworkData(identifier, buffer);
                } else {
                    show_debug_message("ERROR: Buffer not found in data event.");
                }
            } else {
                show_debug_message("ERROR: 'buffer' key does not exist in the async_load map.");
            }
            break;
    }
} else {
    show_debug_message("ERROR: Invalid socket ID reference in async event.");
}


//// Async Networking Event of obj_Client

//var type = ds_map_find_value(async_load, "type");
//var n_id = ds_map_find_value(async_load, "id");

//if (n_id == global.client_socket) {
//    switch (type) {
//        case network_type_data:
//            var buffer = ds_map_find_value(async_load, "buffer");
//            buffer_seek(buffer, buffer_seek_start, 0);
//            var identifier = buffer_read(buffer, buffer_u8);

//            switch (identifier) {
//                case global.IDENTIFIER_HEARTBEAT:
//                    // Handle heartbeat received from the server
//                    show_debug_message("[Client] Heartbeat received from server.");
//                    // Optionally, send back a confirmation or keep alive message
//                    break;
                
//                case global.IDENTIFIER_UNIQUE_ID:
//                    // This would be where the server confirms receipt of your unique ID
//                    // Or any other custom logic for unique ID handling
//                    var confirmationMessage = buffer_read(buffer, buffer_string);
//                    show_debug_message("[Client] Server confirmed Unique ID: " + confirmationMessage);
//                    break;
                
//                // Add more case handlers for different data types as needed
//            }
//            buffer_delete(buffer);
//            break;

//        case network_type_connect:
//            // Immediately upon connection, send the unique ID to the server
//            // This ensures server is aware of who just connected
//            var buffer = buffer_create(256, buffer_grow, 1);
//            buffer_seek(buffer, buffer_seek_start, 0);
//            buffer_write(buffer, buffer_u8, global.IDENTIFIER_UNIQUE_ID);
//            buffer_write(buffer, buffer_string, global.clientUniqueID);
//            network_send_packet(global.client_socket, buffer, buffer_tell(buffer));
//            show_debug_message("[Client] Sent unique ID to server: " + global.clientUniqueID);
//            buffer_delete(buffer);
//            break;
            
//        case network_type_disconnect:
//            // Handle disconnection logic here, if needed
//            global.isConnected = false; // Update the connection status
//            show_debug_message("[Client] Disconnected from server.");
//            break;
//    }
//}


File: Destroy_0.gml
Code:
///Destroy Event for obj_Client
if (global.isConnected) {
    network_destroy(global.client_socket);
}


//// Clean up dynamic resources
//if (ds_exists(clien, ds_type_map)) {
//    ds_map_destroy(myDataStructure);
//}

// Optionally, inform the master object or handle game state changes
// For example, transition to a different room or update the UI
//event_perform_object(obj_Master, ev_Other, ev_user0); // Custom user event for cleanup in obj_Master


File: Draw_0.gml
Code:
///Client Draw Code
draw_set_font(fnt_chat);
if show_chatbox=true {
	var xx = 990;
	var yy = 686; // Starting y position
	var lm_cal=clamp(xx+(clamp(110-global.longestmessage,0,110))+1.65*(global.longestmessage-50)/3,xx+215,(display_get_gui_width()-10)/2+room_width/2)+10
	var x1 = 980
	var y1 = 686-20
	var x2 = max(lm_cal,clamp(xx+(clamp(110-global.longestmessage,0,110))+1.65*(string_width(global.commandBuffer)-1)/3,xx+215,(display_get_gui_width())/2+room_width/2+50))
	var y2 = _yy+100
	//draw transparent background box for chatbox that adjusts to fit the longest message. will be later swapped for a scaled image background
	draw_rectangle_outlined(x1,y1,x2,y2,false,global.borderwidth,global.o_color,global.bg_color,global.bg_alpha);
	draw_set_alpha(1);
	var sca=.7
	global.chat_line_height = 70 * sca + 5;
// Set drawing properties
draw_set_colour(c_ltgray);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(fnt_chat); 
// Display server status
var serverStatus = "Server Unable to Connect"; // Default message
if (isServerRunning) {
    serverStatus = "Server Online";
	draw_set_colour(c_lime);
} else {
    serverStatus = "Server Stopped";
	draw_set_colour(c_red);
}

if show_server_status=true {
draw_text_transformed(xx, yy, serverStatus, sca, sca, 0);
yy += 40; // Increment y position for next line
}

if connectedClients>0 {
	draw_set_colour(c_aqua);
} else {
	draw_set_colour(c_ltgrey);
}
if show_server_status=true {
	//we can keep drawing this section this way unless somehow your next response can condense it as well. but its  kind of fine as is, no issues here.
draw_text_transformed(xx+3, yy+3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_text_transformed(xx-3, yy+3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_text_transformed(xx+3, yy-3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_text_transformed(xx-3, yy-3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_set_color(global.c_chat1);
draw_text_transformed(xx, yy-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
yy += 50; // Increment y position for next 
} else {
	draw_set_color(global.c_chat1);
	draw_text_transformed(xx+3, yy+3-10, "Chat Box", sca, sca, 0);
	draw_text_transformed(xx-3, yy+3-10, "Chat Box", sca, sca, 0);
	draw_text_transformed(xx+3, yy-3-10, "Chat Box", sca, sca, 0);
	draw_text_transformed(xx-3, yy-3-10, "Chat Box", sca, sca, 0);
	draw_set_color(global.c_chat2);
	draw_text_transformed(xx, yy-10, "Chat Box", sca, sca, 0);
yy += 60; // Increment y position for next line
}

sca=.5

if show_chatbox and ds_exists(global.debugMessages, ds_type_list) {
    var startY = yy;
    var maxLinesToShow = global.max_visible_lines;
	// Before calling drawChatMessages, ensure messages is a ds_list
if (!ds_exists(global.debugMessages, ds_type_list)) {
    show_debug_message("Error: debugMessages is not a valid ds_list.");
    return;
}

    var totalLines = drawChatMessages(global.debugMessages, 990, startY, maxLinesToShow, sca, false,global.c_chat2,global.c_chat1);

    // Calculate the max index for scrolling based on the total number of lines
    var maxScrollIndex = max(0, clamp(totalLines - maxLinesToShow,0,9999999));

    // Scroll messages with keyboard or mouse wheel
    if (input_check("up") || mouse_wheel_up()) {
		if !(input_check("up") and isActive = true) { //disable scrolling from "W" when typing
        scrollIndex = max(0, scrollIndex - 1);
        show_debug_message("[Client] Scrolled up: Current scroll index is " + string(scrollIndex));
		}
    }
    if (input_check("down") || mouse_wheel_down()) {
		if !(input_check("down") and isActive = true) {//disable scrolling from "S" when typing
        scrollIndex = min(maxScrollIndex, scrollIndex + 1);
        show_debug_message("[Client] Scrolled down: Current scroll index is " + string(scrollIndex));
		}
    }

    // Ensuring scrollIndex is always within the valid range
    scrollIndex = clamp(scrollIndex, 0, maxScrollIndex);

    // Redraw messages considering the scroll index
	// Before calling drawChatMessages, ensure messages is a ds_list
if (!ds_exists(global.debugMessages, ds_type_list)) {
    show_debug_message("Error: debugMessages is not a valid ds_list.");
    return;
}

    drawChatMessages(global.debugMessages, 990, yy , maxLinesToShow, sca, true,global.c_chat2,global.c_chat1);
}

yy=yy+clamp(totalLines-scrollIndex,0,global.max_visible_lines)*(global.chat_line_height*1.00)+5
sca=.6
_yy=yy-15
 
if (isActive) {
// Determine the number of line breaks in the command buffer
var lineCount = array_length(string_split(global.commandBuffer, "\n"));

// Calculate the new height based on the number of lines
var lines = string_split(global.commandBuffer, "\n");
var boxHeight = global.chat_line_height*1.05 * array_length(lines) + 2; // Calculate box height based on number of lines

//chat input box drawing code 
draw_set_color(c_black); // Set initial color to black (border)
 
    if (string_char_at(global.commandBuffer, 1) = "/") {
        draw_set_color(c_white);  // border becomes white if command is being typed
    }
// Adjust the bottom y-coordinate of the rectangle to expand with each new line
draw_rectangle(xx + 5, yy - 11, clamp(xx - 90 + 1.85 * (string_width(global.commandBuffer) - 1) / 3, xx - 90, (display_get_gui_width() - 10) / 2 + room_width / 2) + 150 + 10, yy + boxHeight + 10, false);

    draw_set_color(c_white);  // Set initial bg color to white when no '/' detected
    if (string_char_at(global.commandBuffer, 1) = "/") {
        draw_set_color(c_black);  // Default bg color if command is being typed
		slash_typed=true
    } else {
		slash_typed=false
	}
draw_rectangle(xx + 10, yy - 6, clamp(xx - 90 + 1.85 * (string_width(global.commandBuffer) - 1) / 3, xx - 90, (display_get_gui_width() - 10) / 2 + room_width / 2) + 150, yy + boxHeight, false);
//draw command buffer
draw_set_color(global.c_chat2);
	//we stay drawing these like this because theres no need for line handling here.

	draw_set_color(merge_color(global.textColor,c_red,clamp(abs(shake_angle),0,1)));
    draw_text_transformed(xx+20+shake_angle*7, yy-shake_angle*7, global.commandBuffer + "_", sca, sca, shake_angle*.25);  // Shoblinking cursor
} else {
	draw_set_color(merge_color(global.c_chat1,c_red,clamp(abs(shake_angle),0,1)));
    draw_text_transformed(xx+20+shake_angle*7, yy-shake_angle*7, global.commandBuffer + "_", sca, sca, shake_angle*.25);  // Show blinking cursor
}
} else {
	exit
}


// instance_exists(obj_levelup) {
//if input_value() != undefined {
//draw_set_color(c_red)
//var dbug = ""
//draw_text_transformed(room_width/2,room_height/2,string(global.choiceselect),3,3,0)
//draw_text_transformed(room_width/2,room_height/2,dbug,3,3,0)
//}

////debug draw last key id
//draw_set_color(c_black);
//draw_text(room_width/2+2,room_height/2+2,keyboard_lastkey)
//draw_text(room_width/2-2,room_height/2+2,keyboard_lastkey)
//draw_text(room_width/2+2,room_height/2-2,keyboard_lastkey)
//draw_text(room_width/2-2,room_height/2-2,keyboard_lastkey)
//draw_set_color(c_white);
//draw_text(room_width/2,room_height/2,keyboard_lastkey)

File: Alarm_0.gml
Code:
// Alarm[0] Event
var t_buffer = buffer_create(256, buffer_grow, 1);
buffer_seek(t_buffer, buffer_seek_start, 0);
buffer_write(t_buffer, buffer_u8, global.IDENTIFIER_UNIQUE_ID);
buffer_write(t_buffer, buffer_string, global.clientUniqueID);
network_send_packet(global.client_socket, t_buffer, buffer_tell(t_buffer));
buffer_delete(t_buffer);
global.uniqueIDSent = true; // Ensure we don't resend the unique ID
show_debug_message("[Client] Unique ID sent after delay: " + global.clientUniqueID);


File: obj_Client.yy
Code:
{
  "$GMObject":"",
  "%Name":"obj_Client",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":68,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":1,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":2,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":5,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"obj_Client",
  "overriddenProperties":[],
  "parent":{
    "name":"Objects",
    "path":"folders/Objects.yy",
  },
  "parentObjectId":null,
  "persistent":true,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":null,
  "spriteMaskId":null,
  "visible":true,
}

File: Other_5.gml
Code:
/// @description Insert description here
//room end of obj_client
show_chatbox=false

File: Create_0.gml
Code:

// obj_Client setup Create Event
global.lastAddedMessage = "";
global.sessionLogFileName = "SessionLog_" + string_replace_all(string(date_current_datetime()), ":", "-") + ".txt";
global.masterLogFileName = "MasterLog.txt";
global.logDebugMessagesToFile = true; // By default, log debug messages to the file
global.serverAddress = "127.0.0.1"; // Example server address
// Initialize the data structure globally if not already initialized
global.chatLogs=-1
global.bubble_send_to_log=1
global.message_is_bubble=0
if (!ds_exists(global.chatLogs, ds_type_list)) {
    global.chatLogs = ds_list_create();
}
time=0
// Global Variable Initialization (usually in some global script or create event)
global.typingSpeedCalcDuration = 60; // Default to 60 seconds
global.lastWPMUpdateTime = 0; // Timestamp of the last WPM update
global.WPMUpdateInterval = 5000; // Minimum time between updates in milliseconds (e.g., 5000ms = 5 seconds)
lastUpdateTime = -1;
updateInterval = 60; // Run every 60 seconds
//input
input_cursor_coord_space_set(INPUT_COORD_SPACE.ROOM, 0);
//input_mouse_capture_set(true, 1);
window_set_cursor(cr_none)
instance_create_depth(room_width/2,room_height/2,-1000000,obj_Cursor);
// Global time offset initialized
global.timeOffset = 0;
global.inputDisplayEnabled = false;  // Initialize the variable at an appropriate place in your game startup code
global.actions = ds_map_create();
// Adding command details
// Global initialization script or create event
global.commandDetails = ds_map_create();
add_command("goto_planet(", 1, [["string", "real"]], true);  // Requires '(' visually
add_command("jump_planet(", 1, [["string", "real"]], true);  // Requires '(' visually
add_command("toggle_server", 3, [[]], false);  // Does not require '(' visually
add_command("toggle_debug", 1, [[]], false);  // Does not require '(' visually
add_command("list_clients", 1, [[]], false);  // Does not require '(' visually
add_command("enable_heartbeat", 2, [[]], false);  // Does not require '(' visually
add_command("disable_heartbeat", 2, [[]], false);  // Does not require '(' visually
add_command("toggle_log_debug", 2, [[]], false);  // Does not require '(' visually
add_command("set_my_permission(", 0, [["string", "real"]], true);
add_command("save_game", 0, [[]], false);  // Does not require "(" visually
add_command("game_end(", 0, [["string", "real"]], true); 
add_command("list_commands", 0, [[]], false); // No arguments, accessible at all permission levels
add_command("show_lines(", 0, [["real"]], true);
add_command("set_variable(", 2, [["string"],["string","real"]],true)
add_command("level_up(", 1, [["real"]], true);  // Command requires '(' visually and a real number argument
add_command("show_wpm", 0, [[]], false);  // Does not require '(' visually, level 0 permission
add_command("chat_bubble(", 1, [["string"], ["string"], ["array"]], true);
add_command("save_macros", 1, [[]], false);  // Add the command to save macros
add_command("list_variables", 2, [[]], false);
add_command("add_action(", 2, [["string"],["string"],["array"]],true);
add_command("save_actions", 2, [], false);
add_command("list_actions", 2, [], false);
add_command("execute_action(", 2, [["string"]], true);
add_command("show_variable(", 2, [["string"]], true);
add_command("return_controller", 1, [[]], false);
add_command("toggle_input_display", 1, [[]], false);
add_command("show_gamepad_mapping", 1, [[]], false);
add_command("chat_bubble_choices(", 1, [["string"], ["string"], ["string", "string"]], true);
add_command("add_chat_bubble_action(", 2, [["string"], ["string"], ["string"], ["array"]], true);
// Initialize global action details
global.actionDetails = ds_map_create();



//add_command("spawn_boss(", 2, [["string"]], true);

//0name //1health //2resistance0-1invincible /3/rate //4attackset //5damage //6moveset //7image //8appearance [0=character,1=boss] //9appearanceid
//add_boss("Drake",6666666,.666,1,1,1,4,spr_boss1,1,0]

// You can add new commands or modify existing ones easily with the `add_command` function.
global.variableDetails = ds_map_create();
add_variable("Level", "level", 1, master, "real", 1, 100000, [], [], "Player");
add_variable("BPM", "target_bpm", 115, global, "real", 1, 100000, [], [], "Gameplay");
add_variable("Time", "ti", 0, master, "real", 0, 99999999, [], [], "Gameplay");
add_variable("WPM Window", "typingSpeedCalcDuration", 60, global, "real", 1, 600, [], [], "Social");
add_variable("CharacterLimit", "character_limit", 1, global, "real", 0, 1000, [], [], "Social");
add_variable("Macro1", "macro1", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro2", "macro2", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro3", "macro3", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro4", "macro4", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro5", "macro5", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro6", "macro6", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro7", "macro7", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro8", "macro8", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro9", "macro9", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro10", "macro10", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("ControllerType", "control_type", 1, global, "real", -99999999, 99999999, [], [], "Global");
global.debugCommand = "";
//global.character_limit
// Ensure commandBuffer is initialized
global.commandBuffer = "";
slash_typed=false //whether or not a command is being typed
// Initialize a global variable for text color
c_pink = make_color_hsv(0,58,255);
global.defaultTextColor = c_black;
global.textColor = global.defaultTextColor;
// Global Variable Initialization (usually in some global script or create event)
global.typingSpeedCalcDuration = 60; // Default to 60 seconds
 // This will store the input from the user
isActive = true;  // To check if command input is active
sendHeartbeat = false; // Control sending of heartbeat messages
_yy=0
pasting=0;
global.longestmessage=200;
global.c_chat2=c_black
global.c_chat1=c_white
fnt_chat=Font4
global.borderwidth=8 //bg width
global.bg_alpha=.4 //bg alpha
global.bg_color=c_black //background color
global.o_color=c_white //outline color
global.wrapWidth = 2350; // Adjust this value based on your chat box
global.character_limit=300;//character limit for chat
global.lastSpaceIndex = -1;

//Other Variables
global.showDebugMessages = true; // Enable debug messages by default
global.maximumMessages=2000;
maxDisplayMessages = 5; // Number of debug messages to display at once
// Initialize max visible lines for the chat box
global.max_visible_lines = maxDisplayMessages;  // You can adjust this number based on your needs

global.debugMessages = ds_list_create();
fnt_chat_id=0
// Global settings for text wrapping
global.chat_threshold = 2350;  // Threshold to start considering wrapping
global.chat_text_limit = 2350; // Maximum pixel width of text before wrapping
global.chat_line_height = 50; // Height of each line of text in pixels
global.min_width = 110;  // Minimum width of the chat box
global.max_width = 1000;  // Maximum width of the chat box, adjust according to your UI design
// Adjust these values to tweak where the text wraps
global.chat_threshold = global.chat_threshold * 1.66;  // Increase the threshold
global.chat_text_limit = global.chat_text_limit * 1.66;  // Increase the width limit

//Scrolling Variables
scrollIndex = 0; // Initialize scroll position
baseScrollSensitivity = 0.1; // Base sensitivity, how much the index changes initially per mouse wheel movement
maxScrollSensitivity = 1.0; // Maximum sensitivity after continuous scrolling
sensitivityIncrement = 0.05; // How much the sensitivity increases with continuous scrolling
sensitivityDecrement = 0.01; // How much the sensitivity decreases when not scrolling
global.scrollSensitivity = baseScrollSensitivity; // Current sensitivity, starts at base sensitivity
global.isScrolling = false; // Tracks if the user is currently scrolling

// Server Configuration
show_server_status=false
global.serverPort = "5555";
global.maxClients = 4;
global.heartbeatBPM = 115; // Beats per minute for the heartbeat
global.lastHeartbeatTime = current_time; // Store the current time
broadcastInterval = 60000 / global.heartbeatBPM; // Time between heartbeats in milliseconds

global.clientUniqueID = ""; // Initialize to an empty string
global.reconnectTimer = 0; // Time to attempt a reconnect
global.reconnectInterval = 2000; // Interval between reconnect attempts
global.isConnected = false; // Connection status
global.IDENTIFIER_UNIQUE_ID = 2; // Ensure this matches server expectation
global.uniqueIDSent = false; // Prevent re-sending

// Initialize server state and structures
isServerRunning = false;
connectedClients = 0;

// Generate or load the unique ID
if (!file_exists(working_directory + "client_id.txt")) {
    // For a new ID
    global.clientUniqueID = string(irandom_range(100000, 999999));
    var file = file_text_open_write(working_directory + "client_id.txt");
    file_text_write_string(file, global.clientUniqueID);
    file_text_close(file);
} else {
    // For an existing ID
    var file = file_text_open_read(working_directory + "client_id.txt");
    global.clientUniqueID = file_text_read_string(file);
    file_text_close(file);
}

// Client Initialization and Connection
global.client_socket = network_create_socket(network_socket_tcp);
var status = network_connect(global.client_socket, global.serverAddress, global.serverPort);
if (status >= 0) {
    // Successful connection
    show_debug_message("[Client] Successfully connected and ID sent.");
	isServerRunning = true;
    var buffer = buffer_create(256, buffer_grow, 1);
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_u8, global.IDENTIFIER_UNIQUE_ID);
    buffer_write(buffer, buffer_string, global.clientUniqueID);
    network_send_packet(global.client_socket, buffer, buffer_tell(buffer));
    buffer_delete(buffer);
} else {
    // Handle connection failure
    show_debug_message("[Client] Connection failed.");
}

show_chatbox=false
depth-=10; //ensure at top or front of view

global.backspaceTimer = 0;
global.backspaceDelay = 15; // Initial delay before rapid deletion
global.backspaceSpeed = 1;  // Delay between rapid deletions

global.recall_list = ds_list_create();  // List to store past messages and commands
global.recall_max = 20;  // Maximum number of entries to remember
global.recall_index = -1;  // Index for navigating through the recall list

shake_angle=0 //angle to shake text when character limit reached.

load_actions()


Object: obj_chat_bubble

File: Step_0.gml
Code:
// obj_chat_bubble Step Event
if (owner != noone) {
    x = owner.x;
    y = owner.y - 60;
}

if (wrapped == 0) {
    draw_set_font(text_font);
    var text_length = string_length(text);
    var longestWordWidth = get_longest_word_width(text, text_font, 1);
    
    // Adjust max_width based on text length
    max_width = clamp(500 + text_length * 2, min_width, 1500);
    
    // Calculate initial text scale
    text_scale = min(clamp(1 - text_length / 500, 0.5, 1), clamp(1.5 - longestWordWidth / 1000, 0.5, 1));
    
    // Wrap text
    wrapped_text = wrap_chat_text(text, max_width - 2 * padding);
    
    // Count lines and adjust scale if needed
    line_count = string_count("\n", wrapped_text) + 1;
    if (line_count > 5) {
        text_scale *= (5 / line_count);
        wrapped_text = wrap_chat_text(text, (max_width - 2 * padding) / text_scale);
        line_count = string_count("\n", wrapped_text) + 1;
    }
    
    // Calculate bubble dimensions
    scale_x = clamp(string_width_ext(wrapped_text, -1, max_width - 2 * padding) * text_scale + 6 * padding, min_width, max_width);
    real_scale_y = clamp(string_height_ext(wrapped_text, -1, max_width - 2 * padding) * text_scale + 4 * padding, min_height - 120, max_height - 120);
    
    scale_y = real_scale_y + 120;
    wrapped = 1;
}

// Calculate top_middle_x and top_middle_y
top_middle_x = x - (sprite_get_xoffset(sprite_index) - 250) * scale_x / 500;
top_middle_y = y - sprite_get_yoffset(sprite_index) - real_scale_y - 60;

lifetime++;
if (lifetime >= duration) {
    instance_destroy();
}

File: Draw_0.gml
Code:
// obj_chat_bubble Draw Event
if (!variable_instance_exists(id, "has_logged")) {
    show_debug_message("Drawing chat bubble. Text: '" + text + "'");
    show_debug_message("Wrapped text: '" + wrapped_text + "'");
    show_debug_message("Text position: " + string(top_middle_x) + ", " + string(top_middle_y + padding));
    show_debug_message("Text color: " + string(text_color) + ", Outline color: " + string(text_color_outline));
    show_debug_message("Text scale: " + string(text_scale));
    show_debug_message("Max width: " + string(max_width));
    has_logged = true;
}

var tail_sprite_index = 0;
var middle_sprite_index = 1;
var top_sprite_index = 2;

var bottom_y = y;
var top_y = y - real_scale_y;
var middle_height = clamp(scale_y - 240, 0, max_height - 120);
var middle_y = y - sprite_get_yoffset(sprite_index) - (120 - sprite_get_yoffset(sprite_index)) * middle_height / 120;

// Bottom (tail)
draw_sprite_ext(sprite_index, tail_sprite_index, x, bottom_y, scale_x / 500, 1, 0, c_white, 1);

// Middle
draw_sprite_ext(sprite_index, middle_sprite_index, x, middle_y, scale_x / 500, middle_height / 120, 0, c_white, 1);

// Top
draw_sprite_ext(sprite_index, top_sprite_index, x, top_y, scale_x / 500, 1, 0, c_white, 1);

// Draw message text
draw_set_font(text_font);
draw_set_halign(fa_middle);
draw_set_valign(fa_top);
drawTextWithOutline(top_middle_x, top_middle_y + padding + 130, wrapped_text, text_scale, outline_size, text_color_outline, text_color, max_width - 2 * padding);

// Debug: draw a point at the text position
draw_set_color(c_red);
draw_point(top_middle_x, top_middle_y + padding);

// Debug: draw bounding box
if show_bounds = true {
draw_set_color(c_red);
draw_rectangle(top_middle_x - scale_x/2, top_middle_y + 130, top_middle_x + scale_x/2, bottom_y, true);
}

File: Create_0.gml
Code:
// obj_chat_bubble Create Event
text = "";
wrapped_text = "";
line_count = 1;
owner = noone;
max_width = 500;
max_height = 800;
min_width = 200;
min_height = 240;
top_middle_x = 0;
top_middle_y = 0;
padding = 15;
scale_y = min_height;
scale_x = min_width;
real_scale_y = min_height - 120;
duration = 1000;
lifetime = 0;
sprite_index = spr_chatbubble1;
text_font = Font_Default;
text_color = c_dkgrey;
text_color_outline = c_black;
text_scale = 1;
outline_size = 2;
wrapped = 0;
show_bounds = false;

File: obj_chat_bubble.yy
Code:
{
  "$GMObject":"",
  "%Name":"obj_chat_bubble",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"obj_chat_bubble",
  "overriddenProperties":[],
  "parent":{
    "name":"ui",
    "path":"folders/Objects/ui.yy",
  },
  "parentObjectId":null,
  "persistent":false,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":{
    "name":"spr_chatbubble1",
    "path":"sprites/spr_chatbubble1/spr_chatbubble1.yy",
  },
  "spriteMaskId":null,
  "visible":true,
}

== Related Scripts ==

Script: scr_add_action
File: scr_add_action.gml
Code:
function scr_add_action(argument0, argument1, argument2) {
    var name = string(argument0);
    var commandName = string(argument1);
    var parameters = argument2;
    
    handleDebugMessage("scr_add_action - Raw inputs:", true);
    handleDebugMessage("Name: " + name, true);
    handleDebugMessage("Command: " + commandName, true);
    handleDebugMessage("Parameters: " + json_stringify(parameters), true);
    
    // Special handling for chat_bubble command
    if (commandName == "chat_bubble" && is_array(parameters) && array_length(parameters) >= 3) {
        var param_string = json_stringify(parameters);
        handleDebugMessage("chat_bubble special handling - param_string: " + param_string, true);
    } else {
        var param_string = json_stringify(parameters);
    }
    
    // Use base64 encoding to preserve all characters
    var encoded_params = base64_encode(param_string);
    
    handleDebugMessage("Adding action: " + name + ", Command: " + commandName + ", Raw Parameters: " + param_string, true);
    handleDebugMessage("Encoded Parameters: " + encoded_params, true);
    
    if (ds_map_exists(global.actionDetails, name)) {
        handleDebugMessage("Action '" + name + "' already exists.", true);
        return;
    }
    
    var commandDetailName = commandName;
    var commandDetailNameWithParentheses = commandName + "(";
    handleDebugMessage("Checking for command: " + commandName, true);
    if (!ds_map_exists(global.commandDetails, commandDetailName) && !ds_map_exists(global.commandDetails, commandDetailNameWithParentheses)) {
        handleDebugMessage("Command '" + commandName + "' does not exist.", true);
        return;
    }
    
    var actionEntry = ds_map_create();
    ds_map_add(actionEntry, "command", commandName);
    ds_map_add(actionEntry, "parameters", encoded_params);
    
    ds_map_add(global.actionDetails, name, actionEntry);
    
    handleDebugMessage("Action '" + name + "' added successfully.", true);
    handleDebugMessage("Final action entry: " + json_stringify(actionEntry), true);
    
    save_actions();
}
//function scr_add_action(argument0, argument1, argument2) {
//    var name = string(argument0);
//    var commandName = string(argument1);
//    var parameters = argument2;
    
//    // Convert the parameters to a JSON string
//    var param_string = json_stringify(parameters);
    
//    // Use base64 encoding to preserve all characters
//    var encoded_params = base64_encode(param_string);
    
//    handleDebugMessage("Adding action: " + name + ", Command: " + commandName + ", Raw Parameters: " + param_string, true);
//    handleDebugMessage("Encoded Parameters: " + encoded_params, true);
    
//    if (ds_map_exists(global.actionDetails, name)) {
//        handleDebugMessage("Action '" + name + "' already exists.", true);
//        return;
//    }
    
//    var commandDetailName = commandName;
//    var commandDetailNameWithParentheses = commandName + "(";
//    handleDebugMessage("Checking for command: " + commandName, true);
//    if (!ds_map_exists(global.commandDetails, commandDetailName) && !ds_map_exists(global.commandDetails, commandDetailNameWithParentheses)) {
//        handleDebugMessage("Command '" + commandName + "' does not exist.", true);
//        return;
//    }
    
//    // Use the correct command detail name for further processing
//    if (ds_map_exists(global.commandDetails, commandDetailNameWithParentheses)) {
//        commandDetailName = commandDetailNameWithParentheses;
//    }
    
//    var actionEntry = ds_map_create();
//    ds_map_add(actionEntry, "command", commandName);
//    ds_map_add(actionEntry, "parameters", encoded_params);
    
//    ds_map_add(global.actionDetails, name, actionEntry);
    
//    handleDebugMessage("Action '" + name + "' added successfully.", true);
    
//    save_actions();
//}

Script: execute_command
File: execute_command.gml
Code:
function execute_command(command) {
    handleDebugMessage("Executing command: " + command, true);
    command = string_trim(string_replace_all(command, "\n", " "));
    if (command == "") {
        handleDebugMessage("Error: Empty command", true);
        return;
    }
    if (string_char_at(command, 1) == "/") {
        command = string_delete(command, 1, 1);
    }
    handleDebugMessage("Processed command: " + command, true);
    var commandName = "";
    var parameters = [];
    
    var fullCommand = command;
    var openParenIndex = string_pos("(", command);
    var closeParenIndex = string_last_pos(")", command);
    
    if (string_pos("add_action(", command) == 1) {
    var startParen = string_pos("(", command);
    var endParen = string_last_pos(")", command);
    if (startParen > 0 && endParen > startParen) {
        var argsString = string_copy(command, startParen + 1, endParen - startParen - 1);
        var args = parse_arguments(argsString);
        if (array_length(args) >= 3) {
            var actionName = string_trim(args[0]);
            var actionCommand = string_trim(args[1]);
            var actionParamsString = string_trim(args[2]);
            
            // Remove surrounding brackets if present
            if (string_char_at(actionParamsString, 1) == "[" && string_char_at(actionParamsString, string_length(actionParamsString)) == "]") {
                actionParamsString = string_copy(actionParamsString, 2, string_length(actionParamsString) - 2);
            }
            
            var actionParams;
            if (actionParamsString == "") {
                actionParams = [];
            } else {
                try {
                    actionParams = json_parse(actionParamsString);
                } catch(e) {
                    handleDebugMessage("Error parsing action parameters: " + string(e), true);
                    return;
                }
            }
            scr_add_action(actionName, actionCommand, actionParams);
            return;
        }
    }
} else if (string_pos("execute_action(", command) == 1) {
    var actionName = string_replace(command, "execute_action(", "");
    actionName = string_replace(actionName, ")", "");
    actionName = string_trim(actionName);
    
    handleDebugMessage("execute_action - Action Name: " + actionName, true);
    
    if (ds_map_exists(global.actionDetails, actionName)) {
        var actionEntry = ds_map_find_value(global.actionDetails, actionName);
        commandName = ds_map_find_value(actionEntry, "command");
        var encodedParams = ds_map_find_value(actionEntry, "parameters");
        
        handleDebugMessage("Action Entry: " + json_stringify(actionEntry), true);
        handleDebugMessage("Encoded Parameters: " + encodedParams, true);
        
        parameters = decode_action_parameters(encodedParams);
        
        handleDebugMessage("Executing action: " + actionName, true);
        handleDebugMessage("Command: " + commandName, true);
        handleDebugMessage("Decoded Parameters: " + json_stringify(parameters), true);
        
        var scriptName = "scr_" + commandName;
        if (script_exists(asset_get_index(scriptName))) {
            if (commandName == "chat_bubble") {
                if (is_array(parameters) && array_length(parameters) >= 3) {
                    handleDebugMessage("Executing chat_bubble with parameters:", true);
                    handleDebugMessage("Text: " + string(parameters[0]), true);
                    handleDebugMessage("Owner: " + string(parameters[1]), true);
                    handleDebugMessage("Choices: " + json_stringify(parameters[2]), true);
                    scr_chat_bubble(parameters[0], parameters[1], parameters[2]);
                } else {
                    handleDebugMessage("Error: Not enough parameters for chat_bubble action", true);
                    handleDebugMessage("Parameters received: " + json_stringify(parameters), true);
                }
            } else if (is_array(parameters)) {
                script_execute_ext(asset_get_index(scriptName), parameters);
            } else {
                script_execute(asset_get_index(scriptName), parameters);
            }
        } else {
            handleDebugMessage("Script not found for command: " + commandName, true);
        }
        return;
    } else {
        handleDebugMessage("Action '" + actionName + "' not found.", true);
        return;
    }
} else if (openParenIndex > 0 && closeParenIndex > openParenIndex) {
        commandName = string_trim(string_copy(command, 1, openParenIndex - 1));
        var paramString = string_copy(command, openParenIndex + 1, closeParenIndex - openParenIndex - 1);
        parameters = parse_arguments(paramString);
    } else {
        commandName = command;
    }
    
    if (commandName == "chat_bubble") {
        if (is_array(parameters) && array_length(parameters) >= 2) {
            var text = parameters[0];
            var owner = parameters[1];
            var choices = (array_length(parameters) > 2) ? parameters[2] : [];
            scr_chat_bubble(text, owner, choices);
        } else if (is_string(parameters)) {
            var parsed = json_parse(parameters);
            if (is_array(parsed) && array_length(parsed) >= 2) {
                var text = parsed[0];
                var owner = parsed[1];
                var choices = (array_length(parsed) > 2) ? parsed[2] : [];
                scr_chat_bubble(text, owner, choices);
            } else {
                handleDebugMessage("Error: Invalid parameters for chat_bubble command", true);
            }
        } else {
            handleDebugMessage("Error: Invalid parameters for chat_bubble command", true);
        }
        return;
    }
    
    var scriptName = "scr_" + commandName;
    
    if (script_exists(asset_get_index(scriptName))) {
        if (is_array(parameters)) {
            script_execute_ext(asset_get_index(scriptName), parameters);
        } else {
            script_execute(asset_get_index(scriptName), parameters);
        }
    } else {
        handleDebugMessage("Script not found for command: " + commandName, true);
    }
}

Script: save_actions
File: save_actions.gml
Code:
function save_actions() {
    if (ds_map_size(global.actionDetails) == 0) {
        handleDebugMessage("No actions to save.", true);
        return;
    }
    
    var file = file_text_open_write("Actions.txt");
    var actionKey = ds_map_find_first(global.actionDetails);
    
    while (!is_undefined(actionKey)) {
        var actionData = ds_map_find_value(global.actionDetails, actionKey);
        var command = actionData[? "command"];
        var parameters = actionData[? "parameters"];
        
        var encodedParams = base64_encode(json_stringify(parameters));
        
        var line = actionKey + "|||" + command + "|||" + encodedParams;
        file_text_write_string(file, line);
        file_text_writeln(file);
        handleDebugMessage("Saving action: " + line, true);
        actionKey = ds_map_find_next(global.actionDetails, actionKey);
    }
    
    file_text_close(file);
    handleDebugMessage("Actions saved successfully to Actions.txt.", true);
}

//function save_actions() {
//    if (ds_map_size(global.actionDetails) == 0) {
//        handleDebugMessage("No actions to save.", true);
//        return;
//    }
    
//    var file = file_text_open_write("Actions.txt");
//    var actionKey = ds_map_find_first(global.actionDetails);
    
//    while (!is_undefined(actionKey)) {
//        var actionData = ds_map_find_value(global.actionDetails, actionKey);
//        var command = actionData[? "command"];
//        var parameters = actionData[? "parameters"];
        
//        var paramString = "[";
//        for (var i = 0; i < array_length(parameters); i++) {
//            if (is_string(parameters[i])) {
//                paramString += "\"" + parameters[i] + "\"";
//            } else {
//                paramString += string(parameters[i]);
//            }
//            if (i < array_length(parameters) - 1) {
//                paramString += ",";
//            }
//        }
//        paramString += "]";
        
//        file_text_write_string(file, actionKey + "," + command + "," + paramString);
//        file_text_writeln(file);
//        actionKey = ds_map_find_next(global.actionDetails, actionKey);
//    }
    
//    file_text_close(file);
//    handleDebugMessage("Actions saved successfully to Actions.txt.", true);
//}



Script: load_actions
File: load_actions.gml
Code:
function load_actions() {
    ds_map_clear(global.actionDetails);
    var filePath = "Actions.txt";
    if (!file_exists(filePath)) {
        handleDebugMessage("Actions.txt not found. Starting with an empty actions map.", true);
        return;
    }
    var file = file_text_open_read(filePath);
    while (!file_text_eof(file)) {
        var line = file_text_read_string(file);
        file_text_readln(file);
        if (string_length(line) == 0) continue;
        
        var parts = string_split(line, "|||", false, 3);
        if (array_length(parts) < 3) {
            handleDebugMessage("Error loading action. Malformed line: " + line, true);
            continue;
        }
        
        var actionName = string_trim(parts[0]);
        var commandName = string_trim(parts[1]);
        var encodedParams = parts[2];
        
        var decodedParams = base64_decode(encodedParams);
        var parameters = json_parse(decodedParams);
        
        var actionEntry = ds_map_create();
        ds_map_add(actionEntry, "command", commandName);
        ds_map_add(actionEntry, "parameters", parameters);
        ds_map_add(global.actionDetails, actionName, actionEntry);
        
        handleDebugMessage("Loaded action: " + actionName + ", Command: " + commandName + ", Parameters: " + json_stringify(parameters), true);
    }
    file_text_close(file);
    handleDebugMessage("Actions loaded successfully from Actions.txt.", true);
}

Script: decode_action_parameters
File: decode_action_parameters.gml
Code:
function decode_action_parameters(encoded_params) {
    try {
        var decoded = base64_decode(encoded_params);
        handleDebugMessage("Decoded string: " + decoded, true);
        // Check if the decoded string is empty or just whitespace
        if (string_trim(decoded) == "") {
            handleDebugMessage("Decoded string is empty or whitespace", true);
            return [];
        }
        var parsed = json_parse(decoded);
        handleDebugMessage("Successfully decoded parameters: " + json_stringify(parsed), true);
        return parsed;
    } catch(e) {
        handleDebugMessage("Error decoding parameters: " + string(e) + ". Raw encoded data: " + encoded_params, true);
        // Return an empty array if decoding fails
        return [];
    }
}

Script: scr_chat_bubble
File: scr_chat_bubble.gml
Code:
/// @function scr_chat_bubble(Text, owner, [choices])
/// @param {string} _text - The text to show in the chat bubble
/// @param {string} _ownerName - The owner object name it will follow
/// @param {array} [_choices] - Optional array of choices, each choice is an array [text, actionName]
function scr_chat_bubble(_text, _ownerName, _choices = []) {
    handleDebugMessage("Creating chat bubble: " + string(_text) + ", Owner: " + string(_ownerName) + ", Choices: " + json_stringify(_choices), true);
    
    if (is_string(_choices)) {
        try {
            _choices = json_parse(_choices);
        } catch(e) {
            handleDebugMessage("Error parsing choices: " + string(e), true);
            _choices = [];
        }
    }

    var _owner = asset_get_index(_ownerName);
    if (!object_exists(_owner)) {
        _owner = yeancat;
        handleDebugMessage("Owner object not found, using yeancat", true);
    }

    var ownerInstance = instance_find(_owner, 0);
    if (ownerInstance == noone) {
        ownerInstance = instance_create_layer(room_width/2, room_height/2, "Instances", _owner);
        handleDebugMessage("Owner instance not found, created new instance", true);
    }

    var bubble = instance_create_layer(ownerInstance.x, ownerInstance.y - 60, "uii", obj_chat_bubble);
    with (bubble) {
        text = _text;
        owner = ownerInstance;
        choices = _choices;
        // Add any other necessary properties
    }

    handleDebugMessage("Chat Bubble Created. Following '" + string(_ownerName) + "' with text: '" + string(_text) + "'. Number of choices: " + string(array_length(_choices)), true);
}

Script: parse_arguments
File: parse_arguments.gml
Code:
/// @function parse_arguments(argsString)
/// @description Parses a string containing command arguments into an array
function parse_arguments(argsString) {
    var args = [];
    var depthh = 0;
    var currentArg = "";
    var inQuotes = false;
    var bracketDepth = 0;
    
    for (var i = 1; i <= string_length(argsString); i++) {
        var char = string_char_at(argsString, i);
        
        if (char == "\"" && string_char_at(argsString, i - 1) != "\\") {
            inQuotes = !inQuotes;
        }
        
        if (!inQuotes) {
            if (char == "[") bracketDepth++;
            if (char == "]") bracketDepth--;
            if (char == "(") depthh++;
            if (char == ")") depthh--;
        }
        
        if ((char == "," && depthh == 0 && bracketDepth == 0 && !inQuotes) || i == string_length(argsString)) {
            if (i == string_length(argsString)) currentArg += char;
            array_push(args, string_trim(currentArg));
            currentArg = "";
        } else {
            currentArg += char;
        }
    }
    
    return args;
}

Script: handleDebugMessage
File: handleDebugMessage.gml
Code:
/// @function handleDebugMessage(msg, isDebug)
/// @description Logs messages to the debug console and files, and manages chat display
/// @param {string} msg - The message to log
/// @param {bool} isDebug - True if this is a debug message, false for essential messages
function handleDebugMessage(msg, isDebug) {
    var safeMsg = is_string(msg) ? msg : "Undefined message content";
    // Remove newlines from the message
    safeMsg = string_replace_all(safeMsg, "\n", " ");
    safeMsg = string_replace_all(safeMsg, "\r", "");
    
    var currentDate = date_current_datetime();
    var formattedDate = date_date_string(currentDate);
    var formattedTime = date_time_string(currentDate);
    var logMsg = formattedDate + " " + formattedTime + ": " + safeMsg + "\n";
    show_debug_message("Date: " + formattedDate + " Time: " + formattedTime + " Msg: " + safeMsg);
    
    // Log to file
    logToFile(working_directory + global.sessionLogFileName, logMsg);
    logToFile(working_directory + global.masterLogFileName, logMsg);
    
    // Always add messages to the debug messages list
    if (ds_exists(global.debugMessages, ds_type_list)) {
        if (ds_list_size(global.debugMessages) >= global.maximumMessages) {
            ds_list_delete(global.debugMessages, 0);
        }
        ds_list_add(global.debugMessages, safeMsg);
        global.lastAddedMessage = safeMsg;
    } else {
        show_debug_message("ERROR: global.debugMessages is not a valid ds_list");
    }
    
    // Create a chat bubble for non-debug messages that don't start with "/"
    if (!isDebug && string_char_at(safeMsg, 1) != "/") {
        var cleanMsg = string_remove_between(safeMsg, "[", "]");
        cleanMsg = string_replace_all(cleanMsg, "\n", " ");
        scr_chat_bubble(cleanMsg, "yeancat", []); // Pass an empty array for choices
    }
    
    // WPM Calculation Logic Integration
    if (!isDebug) {
        var wordCount = string_word_count(safeMsg);
        var messageDetails = [currentDate, wordCount];
        if (ds_exists(global.chatLogs, ds_type_list)) {
            ds_list_add(global.chatLogs, messageDetails);
            updateWPM();
        } else {
            show_debug_message("ERROR: global.chatLogs is not a valid ds_list");
        }
    }
}





///// @function handleDebugMessage(msg, isDebug)
///// @param {string} msg - The message to log
///// @param {bool} isDebug - True if this is a debug message, false for essential messages
//function handleDebugMessage(msg, isDebug) {
//    var safeMsg = is_string(msg) ? msg : "Undefined message content";
//    var currentDate = date_current_datetime();
//    var formattedDate = date_date_string(currentDate);
//    var formattedTime = date_time_string(currentDate);
//    var logMsg = formattedDate + " " + formattedTime + ": " + safeMsg + "\n";

//    show_debug_message("Date: " + formattedDate + " Time: " + formattedTime + " Msg: " + safeMsg);

//    // Function to handle file logging
//    function logToFile(filePath, message) {
//        var file;
//        if (file_exists(filePath)) {
//            file = file_text_open_append(filePath);
//        } else {
//            file = file_text_open_write(filePath);
//        }
//        file_text_write_string(file, message);
//        file_text_close(file);
//    }

//    logToFile(working_directory + global.sessionLogFileName, logMsg);
//    logToFile(working_directory + global.masterLogFileName, logMsg);

//    if (isDebug && global.showDebugMessages) {
//        if (ds_list_size(obj_Client.debugMessages) >= global.maximumMessages) {
//            ds_list_delete(obj_Client.debugMessages, 0); // Keep the latest messages
//        }
//        ds_list_add(debugMessages, safeMsg);
//		if show_chatbox and ds_exists(debugMessages, ds_type_list) {
//			// Before calling drawChatMessages, ensure messages is a ds_list
//if (!ds_exists(debugMessages, ds_type_list)) {
//    show_debug_message("Error: debugMessages is not a valid ds_list.");
//    return;
//}

//var totalLines = drawChatMessages(debugMessages, 990, 0, global.max_visible_lines, .5, false,global.c_chat2,global.c_chat1);
//		if (totalLines-obj_Client.scrollIndex>global.max_visible_lines) {
//			var totalLines_inRecentMessage = 1
//			if is_string(msg) {
//			totalLines_inRecentMessage = countLinesInString(msg)
//			}
//			obj_Client.scrollIndex = totalLines //scroll to bottom when new message
//            obj_Client.scrollIndex -= (clamp(totalLines_inRecentMessage-1,0,999999)); //scroll back up number of lines in newest message (-1)
//        }
//        if (obj_Client.scrollIndex>totalLines ) {
//			//clamp scroll
//            obj_Client.scrollIndex = clamp(totalLines,0,99999);
//        }
//        draw_set_font(obj_Client.fnt_chat);
//        global.longestmessage = updateLongestMessage(debugMessages);	
//		}
//    }
//}



Script: json_stringify not found in the expected directories.

Script: json_parse not found in the expected directories.

Script: base64_encode not found in the expected directories.

Script: base64_decode not found in the expected directories.

Script: appendAndWrap
File: appendAndWrap.gml
Code:
/// @function appendAndWrap(char, currentBuffer, maxWidth)
/// @param {string} char - the character being added
/// @param {string} currentBuffer - the current content of the command buffer
/// @param {real} maxWidth - the maximum width of a line before wrapping
/// @desc Appends a character to the buffer and wraps text if necessary.
// Function to wrap text lines and handle spaces near line ends correctly
function appendAndWrap(char, currentBuffer, maxWidth) {
    var tempBuffer = currentBuffer + char;
    var lastNewline = string_last_index_of(tempBuffer, "\n");
    var line = (lastNewline != -1) ? string_copy(tempBuffer, lastNewline + 2, string_length(tempBuffer) - lastNewline) : tempBuffer;
    var lineWidth = string_width(line);

    // Don't wrap inside parentheses for command parameters
    var openParenCount = string_count("(", line);
    var closeParenCount = string_count(")", line);
    
    if (openParenCount > closeParenCount) {
        return tempBuffer;
    }

    // Handle space near maximum line width
    if (char == " " && lineWidth >= maxWidth - string_width("w")) {
        return string_insert("\n", tempBuffer, string_length(tempBuffer));
    } else if (lineWidth > maxWidth) {
        // Insert newline at last space or force it if no space found
        var lastSpace = string_last_index_of(line, " ");
        if (lastSpace > -1) {
            return string_insert("\n", tempBuffer, lastNewline + lastSpace + 2);
        } else {
            return string_insert("\n", tempBuffer, string_length(tempBuffer));
        }
    }

    return tempBuffer;
}






Script: array_to_string_robust
File: array_to_string_robust.gml
Code:
function array_to_string_robust(arr, depth = 0) {
    var result = "[";
    for (var i = 0; i < array_length(arr); i++) {
        if (is_array(arr[i])) {
            result += array_to_string_robust(arr[i], depth + 1);
        } else if (is_string(arr[i])) {
            var cleaned_string = string_replace_all(arr[i], "\n", "\\n");
            cleaned_string = string_replace_all(cleaned_string, "\r", "\\r");
            cleaned_string = string_replace_all(cleaned_string, "\"", "\\\"");
            result += "\"" + cleaned_string + "\"";
        } else {
            result += string(arr[i]);
        }
        if (i < array_length(arr) - 1) result += ",";
    }
    result += "]";
    return (depth == 0) ? string_replace_all(result, " ", "") : result;
}

Script: scr_goto_planet
File: scr_goto_planet.gml
Code:
function scr_goto_planet(_id) {
    var planetId = -1;
    
    if (is_array(_id) && array_length(_id) > 0) {
        _id = _id[0];
    }
    
    if (is_string(_id)) {
        // Try to parse as JSON, if it fails, use the string as is
        try {
            _id = json_parse(_id);
        } catch(e) {
            // If parsing fails, just use the string as is
        }
    }
    
    _id = string(_id);
    
    // Rest of the function remains the same
    if (string_is_real(_id)) {
        var numericId = real(_id);
        if (numericId >= 0 && numericId < array_length(obj_terrain.planets)) {
            planetId = numericId;
        } else {
            var mes = "Invalid Planet ID: " + string(numericId);
            handleDebugMessage(mes, true);
            return;
        }
    } else {
        for (var i = 0; i < array_length(obj_terrain.planets); i++) {
            if (string_lower(string(obj_terrain.planet_names[i, 0])) == string_lower(_id)) {
                planetId = i;
                break;
            }
        }
        if (planetId == -1) {
            var mes = "Invalid Planet Name: " + _id;
            handleDebugMessage(mes, true);
            return;
        }
    }
    
    obj_terrain.planet = planetId;
    obj_terrain2.planet = planetId;
    obj_terrain.systemposition = obj_terrain.planets[planetId, 0];
    var p_name = obj_terrain.planet_names[planetId, 0];
    var mes = "Teleported to " + p_name + ".";
    handleDebugMessage(mes, true);
}

Script: scr_level_up
File: scr_level_up.gml
Code:
function scr_level_up(Count) {
    if (is_array(Count) && array_length(Count) > 0) {
        Count = Count[0];
    }
    
    if (is_string(Count)) {
        // Try to parse as JSON, if it fails, use the string as is
        try {
            Count = json_parse(Count);
        } catch(e) {
            // If parsing fails, just use the string as is
        }
    }
    
    var realCount = real(Count);

    var instance = instance_create_layer(x, y, "uii", obj_level_up);
    if (instance != noone) {
        instance.levelup_goal = realCount;
        handleDebugMessage("Level up initiated with goal: " + string(realCount), true);
    } else {
        handleDebugMessage("Failed to create level up instance.", true);
    }
}

Script: scr_save_game
File: scr_save_game.gml
Code:
// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function scr_save_game() {
	//save the game
	//make sure player exists

	// create save data structure
	var save_data = ds_map_create();
	save_data[? "password"] = master.password
	save_data[? "dondadollars"] = master.dondadollars
	save_data[? "dondaunlocked"] = master.dondaunlocked
	save_data[? "upgradetot"] = master.upgradetot
	save_data[? "damagenumbers"] = master.damagenumbers
	save_data[? "moneynumbers"] = master.moneynumbers
	save_data[? "muteall"] = master.muteall
	save_data[? "specialfx"] = master.specialfx
	save_data[? "playtime"] = master.playtime
	save_data[? "overallkills"] = master.overallkills
	save_data[? "maxweapons"] = master.maxweapons
	//options
save_data[? "playername"] = master.playername
save_data[? "mastervol"]=master.mastervol
save_data[? "mastervolset"]=master.mastervolset
save_data[? "uiscale"]=master.uiscale
save_data[? "musicvol"]=master.musicvol
save_data[? "sfxvol"]=master.sfxvol
save_data[? "dialougevol"]=master.dialougevol
save_data[? "uivol"]=master.uivol

save_data[? "version"]=master.version
	
	for (i=0; i<array_length(master.weapons); i ++) {
		save_data[? "wepd"+string(i)] =  master.weapons[i,3]
		save_data[? "wepu"+string(i)] =  master.weapons[i,13]
		save_data[? "wepsp"+string(i)] =  master.weapons[i,15]
	}
	
	for (i=0; i<array_length(master.passives); i ++) {
		save_data[? "pasd"+string(i)] =  master.passives[i,2]
		save_data[? "pasu"+string(i)] =  master.passives[i,7]
		save_data[? "passp"+string(i)] =  master.passives[i,9]
	}
	
	for (i=0; i<array_length(master.notice); i ++) {
		save_data[? "noticea"+string(i)] =  master.notice[i,0]
		save_data[? "noticeb"+string(i)] =  master.notice[i,1]
		save_data[? "noticec"+string(i)] =  master.notice[i,2]
		save_data[? "noticed"+string(i)] =  master.notice[i,3]
	}
	for (i=0; i<array_length(master.visitedplanets); i ++) {
		save_data[? "vplan"+string(i)] =  master.visitedplanets[i]
	}
	for (i=0; i<array_length(master.allkills); i++) {
		save_data[? "allkills"+string(i)] =  master.allkills[i]
	}
	save_data[? "recordkill"] =  master.recordkill
	save_data[? "recordtime"] =  master.recordtime
	save_data[? "recordlevel"] =  master.recordlevel
	
	for (i=0; i<array_length(master.charrecordkill); i++) {
		save_data[? "charrecordkill"+string(i)] =  master.charrecordkill[i]
	}
	for (i=0; i<array_length(master.charrecordtime); i++) {
		save_data[? "charrecordtime"+string(i)] =  master.charrecordtime[i]
	}
	for (i=0; i<array_length(master.charrecordlevel); i++) {
		save_data[? "charrecordlevel"+string(i)] =  master.charrecordlevel[i]
	}
	for (i=0; i<array_length(master.chartotalkill); i++) {
		save_data[? "chartotalkill"+string(i)] =  master.chartotalkill[i]
	}
	save_data[? "shownmessage"] =  master.shownmessage
	save_data[? "email"] =  master.email
	
//	//character level record
//if master.charrecordlevel[master.charselect]<master.level {
//	master.charrecordlevel[master.charselect]=master.level
//}
////character kill record
//if master.charrecordkill[master.charselect]<master.killcount {
//	master.charrecordkill[master.charselect]=master.killcount
//}
////character time record
//if master.charrecordtime[master.charselect]<master.ti {
//	master.charrecordtime[master.charselect]=master.ti
//}

	for (i=0; i<array_length(master.weapons); i++) {
	save_data[? "diswep"+string(i)] = master.weapons[i,3]
	save_data[? "lockwep"+string(i)] = master.weapons[i,13]
	}
	for (i=0; i<array_length(master.items); i++) {
	save_data[? "disite"+string(i)] = master.items[i,3]
	}
	for (i=0; i<array_length(master.passives); i++) {
	save_data[? "dispas"+string(i)] = master.dispas[i]
	save_data[? "lockpas"+string(i)] = master.lockpas[i]
	}
	save_data[? "legacyversion"] = master.legacyversion
	if master.playerid>0 {
	save_data[? "playerid"] = master.playerid
	save_data[? "playernumber"] =master.playernumber
	} else {
	save_data[? "playerid"] = -1
	save_data[? "playernumber"] = -1
	}
	//unlocked //name, //level,//xp,//xpto,//Lyricism (Damage), //Rhythm (AT rate), //Flow (Movement), //Swag (Money Value), variation (evolution?,
for (i=0; i<array_length(master.characters); i ++) {
	save_data[? "charunlocked"+string(i)] =  master.characters[i,0]
	save_data[? "charname"+string(i)] =  master.characters[i,1]
	save_data[? "charlevel"+string(i)] =  master.characters[i,2]
	save_data[? "charxp"+string(i)] =  master.characters[i,3]
	save_data[? "charxpto"+string(i)] =  master.characters[i,4]
	save_data[? "charlyricism"+string(i)] =  master.characters[i,5]
	save_data[? "charrhythm"+string(i)] =  master.characters[i,6]
	save_data[? "charflow"+string(i)] =  master.characters[i,7]
	save_data[? "charswag"+string(i)] =  master.characters[i,8]
	save_data[? "charvariation"+string(i)] =  master.characters[i,9]
}
	
	if master.characters[master.charselect,0]>0 {
	save_data[? "charselect"] = master.charselect
	} else {
		save_data[? "charselect"] = 0
	}
	{
		for (i=0; i<array_length(master.itemsload); i ++) {
		save_data[? "itemsload"+string(i)]=master.itemsload[i,1]
		}
		save_data[? "hidecompletedunlocks"]=master.hidecompletedunlocks
		save_data[? "hidelockedcol"]=master.hidelockedcol
//tasks
//what it unlocks, 1requirement,2progress,3completed?,4image,5visible?,6rewardtype, 7collectionid (if item), 8 seen, cumulative?
		for (i=0; i<array_length(master.tasks); i ++) {
		save_data[? "tasksprogress"+string(i)]=master.tasks[i,2]
		save_data[? "taskscompleted"+string(i)]=master.tasks[i,3]
		save_data[? "tasksvisible"+string(i)]=master.tasks[i,5]
		save_data[? "tasksseen"+string(i)]=master.tasks[i,8]
		}
		

//achievements
//name, 1requirement, 2achieved?, 3visible?, 4rarity, 5image, 6seen, 7 progress
		for (i=0; i<array_length(master.achievements); i ++) {
		save_data[? "achievementsachieved"+string(i)]=master.achievements[i,2]
		save_data[? "achievementsvisible"+string(i)]=master.achievements[i,3]
		save_data[? "achievementsseen"+string(i)]=master.achievements[i,6]
		save_data[? "achievementsprogress"+string(i)]=master.achievements[i,7]
		}
		

//collectibles
//name,1state, 2amount collected, 3amount til next,4enabled,5upgradeprice,6level,7seen,i8mage, 9can disable, 10item id
//state: 0 =locked, 1=unlocked, 2=obtained.
		for (i=0; i<array_length(master.collection); i ++) {
		save_data[? "collectionstate"+string(i)]=master.collection[i,1]
		save_data[? "collectionamount"+string(i)]=master.collection[i,2]
		save_data[? "collectionenabled"+string(i)]=master.collection[i,4]
		save_data[? "collectionlevel"+string(i)]=master.collection[i,6]
		save_data[? "collectionseen"+string(i)]=master.collection[i,7]
		save_data[? "collectioninshop"+string(i)]=master.collection[i,19]
		}
		


//shop
//name, 1type, 2bought?, 3price, 4collectionid, 5seen, 6image,id
		for (i=0; i<array_length(master.shop); i ++) {
		save_data[? "shopbought"+string(i)]=master.shop[i,2]
		save_data[? "shopseen"+string(i)]=master.shop[i,5]
		}
		
		if master.tutorial>2 {
		save_data[? "tutorial"]=master.tutorial
		} else {
			save_data[? "tutorial"]=0
		}
save_data[? "invisible"]=master.invisible
save_data[? "disconnected"]=master.disconnected//opt out of online play
save_data[? "banned_"]=master.banned//0=no, -1=permaban, 1-inf =how many days.
save_data[? "date_banned"]=master.datebanned
save_data[? "times_banned"]=master.timesbanned
save_data[? "last_online"]=master.last_time_online
save_data[? "last_version_played"]=master.last_version_played
for (var i=0; i<array_length(master.messages); i ++) {
	save_data[? "message_from_"+string(i)]=master.messages[i,0]
	save_data[? "message_"+string(i)]=master.messages[i,1]
	save_data[? "message_read"+string(i)]=master.messages[i,2]
	save_data[? "message_date"+string(i)]=master.messages[i,3]
//[Player From,Message,Read? (-1=N/A 0=not read, 1=notified, 2=read
}
save_data[? "friend_count"]=master.friend_count
for (var i=0; i<array_length(master.friends_list); i ++) {
	save_data[? "friends_list_name_"+string(i)]=master.friends_list[i,0]
	save_data[? "friends_list_id"+string(i)]=master.friends_list[i,1]
	save_data[? "friends_list_date"+string(i)]=master.friends_list[i,2]
	save_data[? "friends_list_best"+string(i)]=master.friends_list[i,3]
//[name, id, date became friends, best friends?]
}

save_data[? "game_progress"]=master.game_progress
for (var i=0; i<array_length(master.planet_log); i ++) {
	save_data[? "planet_log"+string(i)]=master.planet_log[i]
} //0=not visited 1=visited 2=completed
save_data[? "selected_planet"]=master.selectedstage
save_data[? "tasks_complete"]=master.tasks_completed
save_data[? "collect_unlocked"]=master.collectibles_unlocked
save_data[? "dollar_array_have"]=master.dollar_array[0]
save_data[? "dollar_array_spent"]=master.dollar_array[1]
save_data[? "dollar_array_earned"]=master.dollar_array[2]
//[have, spent, earned]
save_data[? "enemy_kc"]=master.enemy_killcount
save_data[? "boss_kc"]=master.boss_killcount
save_data[? "level_end_kc"]=master.levelender_killcount
for (var i=0; i<array_length(master.ind_boss_kills); i ++) {
save_data[? "ind_boss_kills"+string(i)]=master.ind_boss_kills[i]
}
for (var i=0; i<array_length(master.character_levels); i ++) {
	save_data[? "character_levels"+string(i)]=master.character_levels[i]
} //[0-50, 0-50, ..14 times]
save_data[? "name_text_font"]=master.name_text[0]
save_data[? "name_text_color"]=master.name_text[1]
save_data[? "name_text_ocolor"]=master.name_text[2]

//FONTS //0name, 1asset name, 2unlocked?
for (var i=0; i<array_length(master.font_array); i ++) {
save_data[? "font_array"+string(i)]=master.font_array[i,2]
}

save_data[? "permissions"] = master.permissions

//[font = 0;color = 0;outline color]
save_data[? "character_id"]=master.character_id
for (var i=0; i<array_length(master.custom_look); i ++) {
	save_data[? "custom_look"+string(i)]=master.custom_look[i]
}//[Head, Variant, Body, Variant, Trail, Variant, Hat, Variant]
for (var i=0; i<array_length(master.theme_song); i ++) {
	save_data[? "theme_song"+string(i)]=master.theme_song[i]
} //(Theme 19 = custom, bass, drum, keys, vocals,remix?)
save_data[? "login_message"]=master.login_message
for (var i=0; i<array_length(master.clan_info); i ++) {
	save_data[? "clan_info_id"]=master.clan_info[0]
	save_data[? "clan_info_name"]=master.clan_info[1]
	save_data[? "clan_info_rank"]=master.clan_info[2]
	save_data[? "clan_info_rankin"]=master.clan_info[3]
	save_data[? "clan_info_date_joined"]=master.clan_info[4]
	save_data[? "clan_info_dollars"]=master.clan_info[5]
	save_data[? "clan_info_tasks"]=master.clan_info[6]
	save_data[? "clan_info_recruited"]=master.clan_info[7]
	save_data[? "clan_info_position"]=master.clan_info[8]
	save_data[? "clan_info_recruitedby"]=master.clan_info[9]
}
//[Clan ID, 1Clan Name, 2Clan Rank, 3Rank in Clan, 4Date Joined, 
//5Dollars Donated, 6Tasks Completed, 7Members Recruited, 8Position in Clan, 9recruited by]





	}

handleDebugMessage("Saved Game", true);

var save_string = json_encode(save_data);
	ds_map_destroy(save_data);
	save_string = base64_encode(save_string);

	var file = file_text_open_write(working_directory + "yeancatsave.txt");
	file_text_write_string(file, save_string);
	file_text_close(file);
}




== Related Logs ==

Log: SessionLog_45495.55
Content:
07/22/24 08:11:52: Loaded action: MainMenuChoices, Command: chat_bubble, Parameters: [ "What would you like to do?","yeancat","Go to Earth","GotoEarth","Level Up","LevelUpOnce","Save 
Game","SaveGameNow","Cancel","null" ]
07/22/24 08:11:52: Loaded action: HelloWorld2, Command: chat_bubble, Parameters: [ "Hello World","yeancat" ]
07/22/24 08:11:52: Loaded action: LevelUpOnce, Command: level_up, Parameters: [ "1" ]
07/22/24 08:11:52: Loaded action: Hello6, Command: chat_bubble, Parameters: [ "Hello World","yeancat" ]
07/22/24 08:11:52: Loaded action: HelloWorld, Command: chat_bubble, Parameters: [ "Hello World!","yeancat" ]
07/22/24 08:11:52: Loaded action: Lvl50, Command: level_up, Parameters: [ "50" ]
07/22/24 08:11:53: Loaded action: GotoEarth, Command: goto_planet, Parameters: [ "Earth" ]
07/22/24 08:11:53: Loaded action: Hello3, Command: chat_bubble, Parameters: [ "Hello World","yeancat" ]
07/22/24 08:11:53: Actions loaded successfully from Actions.txt.
07/22/24 08:11:53: [Client] Failed to reconnect to server. Will try again...
07/22/24 08:12:13: Executing command: chat_bubble("Hello World","yeancat")
07/22/24 08:12:14: Processed command: chat_bubble("Hello World","yeancat")
07/22/24 08:12:14: Chat Bubble Created. Following 'yeancat' with text: 'Hello World' and 0 choices
07/22/24 08:12:18: [Jay Arnold] YAY! IT WORKED!
07/22/24 08:12:18: Chat Bubble Created. Following 'yeancat' with text: ' YAY! IT WORKED!' and 0 choices
07/22/24 08:12:45: Executing command: add_action(Hello7,chat_bubble,["Hello World!","yeancat"])
07/22/24 08:12:45: Processed command: add_action(Hello7,chat_bubble,["Hello World!","yeancat"])
07/22/24 08:12:45: Adding action: Hello7, Command: chat_bubble, Parameters: [ ""Hello World!"",""yeancat"" ]
07/22/24 08:12:46: Checking for command: chat_bubble
07/22/24 08:12:46: Action 'Hello7' added successfully.
07/22/24 08:12:46: Actions saved successfully to Actions.txt.
07/22/24 08:12:48: [Jay Arnold] brilliant
07/22/24 08:12:48: Chat Bubble Created. Following 'yeancat' with text: ' brilliant' and 0 choices
07/22/24 08:12:55: Executing command: execute_action(Hello7)
07/22/24 08:12:55: Processed command: execute_action(Hello7)
07/22/24 08:12:56: Chat Bubble Created. Following 'yeancat' with text: 'Hello World!' and 0 choices
07/22/24 08:13:50: Executing command: list_actions
07/22/24 08:13:50: Processed command: list_actions
07/22/24 08:13:50: Actions: SaveGameNow, LVL202, Hello4, MainMenuChoices, HelloWorld2, LevelUpOnce, Hello6, HelloWorld, Lvl50, GotoEarth, Hello3, Hello7, 
07/22/24 08:14:03: Executing command: execute_action(MainMenuChoices)
07/22/24 08:14:03: Processed command: execute_action(MainMenuChoices)
07/22/24 08:14:03: Chat Bubble Created. Following 'yeancat' with text: 'What would you like to do?' and 0 choices
07/22/24 08:14:24: [Jay Arnold] okay now we need to fix the bug where choice bubbles are only being
 created with 0 choices.
07/22/24 08:14:24: Chat Bubble Created. Following 'yeancat' with text: ' okay now we need to fix the bug where choice bubbles are only being  created with 0 choices.' and 0 choices
07/22/24 08:15:02: [Jay Arnold] great job! please in your next response just tell me which objects and
 scripts you need to look at to fix this bug.
07/22/24 08:15:03: Chat Bubble Created. Following 'yeancat' with text: ' great job! please in your next response just tell me which objects and  scripts you need to look at to fix this bug.' and 0 choices
07/22/24 08:15:58: [Jay Arnold] this log is SessionLog_45495.55
07/22/24 08:15:58: Chat Bubble Created. Following 'yeancat' with text: ' this log is SessionLog_45495.55' and 0 choices

