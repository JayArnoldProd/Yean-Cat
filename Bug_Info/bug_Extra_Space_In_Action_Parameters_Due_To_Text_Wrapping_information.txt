Bug Name: Extra_Space_In_Action_Parameters_Due_To_Text_Wrapping
Description: Certain actions have extra space characters added to their action parameters due to text wrapping in the chat input box. This causes issues when executing actions, particularly with planet names or other parameters sensitive to exact string matching. For example, 'Vultures Valley' becomes 'Vultures  Valley', causing the action to fail due to an invalid planet name.

== Related Objects ==

Object: obj_Client

File: Step_0.gml
Code:
/// Step Event of obj_Client

//create mouse if it doesnt exist and using keyboard and mouse
if !instance_exists(obj_Cursor) and (global.control_type!=1) { 
	instance_create_depth(mouse_x,mouse_y,-1000000,obj_Cursor);
}

// Set current font and heartbeat rate
global.heartbeatBPM = global.current_bpm;
fnt_chat = master.font_array[fnt_chat_id, 1];
global.wrapWidth = 2350; // Adjusted wrap width

//check for gamepad input
check_gamepad_input()

//randomly and probability skewed to bring shake_angle back to 0
if abs(shake_angle)>.1 {
	var invert = choose(-1,1)*(random(8)+92)/100
	shake_angle=round(invert*shake_angle*100)/100
} else {
	if shake_angle!=0 {
	shake_angle=0
	keyboard_lastkey=vk_nokey
	}
}

// Handle reconnection logic
if (!global.isConnected && global.reconnectTimer <= 0) {
    var result = network_connect(global.client_socket, global.serverAddress, global.serverPort);
    if (result >= 0) {
        global.isConnected = true;
        isServerRunning = true;
        handleDebugMessage("[Client] Successfully reconnected to server.", true);
        global.reconnectTimer = global.reconnectInterval;
    } else {
        global.reconnectTimer = global.reconnectInterval;
        isServerRunning = false;
        handleDebugMessage("[Client] Failed to reconnect to server. Will try again...", true);
    }
} else if (global.isConnected && global.reconnectTimer > 0) {
    global.reconnectTimer--;
}

// Handle incoming network events safely
if (ds_exists(async_load, ds_type_map)) {
    var type = ds_map_find_value(async_load, "type");
    var n_id = ds_map_find_value(async_load, "id");

    if (n_id == global.client_socket) {
        switch (type) {
            case network_type_data:
                var buffer = ds_map_find_value(async_load, "buffer");
                buffer_seek(buffer, buffer_seek_start, 0);
                var identifier = buffer_read(buffer, buffer_u8);

                switch (identifier) {
                    case global.IDENTIFIER_HEARTBEAT:
                        handleDebugMessage("[Client] Heartbeat received from server.", true);
                        break;
                    
                    case global.IDENTIFIER_TEST_MESSAGE:
                        var msg = buffer_read(buffer, buffer_string);
                        handleDebugMessage("[Client] Message from server: " + msg, true);
                        break;
                }
                buffer_delete(buffer);
                break;

            case network_type_connect:
                handleDebugMessage("[Client] Connected to server.", true);
                break;
                
            case network_type_disconnect:
                global.isConnected = false;
                handleDebugMessage("[Client] Disconnected from server. Attempting to identify cause...", true);
                break;
        }
    }
} else {
    //show_debug_message("ERROR: Invalid ds_map reference in async event.");
}


// Command input and execution logic
if (input_check_pressed("chat") && !isActive) {
    isActive = true;
    global.commandBuffer = "";
    keyboard_string = "";
    show_debug_message("[Client] Chat input activated.");
}

// Toggle chat box with a specific key, e.g., Tab
if (keyboard_check_pressed(vk_tab)) {
    show_chatbox = !show_chatbox;
    global.commandBuffer = "";  // Clear previous commands or texts
    keyboard_string = "";
    show_debug_message("[Client] Toggled chat box visibility: " + string(show_chatbox));
}

// Handle backspace and text input
if (isActive) {
// Handle backspace input
    if (input_check("cancel") && string_length(global.commandBuffer) > 0) {
        if (global.backspaceTimer == 0 || global.backspaceTimer >= global.backspaceDelay) {
            var lastCharPosition = string_length(global.commandBuffer);

            // Check if the last character is a newline
            if (string_char_at(global.commandBuffer, lastCharPosition) == "\n") {
                // Adjust the global.lastSpaceIndex if necessary
                if (global.lastSpaceIndex >= lastCharPosition) {
                    global.lastSpaceIndex = string_last_index_of(string_copy(global.commandBuffer, 1, lastCharPosition - 1), " ");
                }
            }

            // Perform the character deletion
            global.commandBuffer = string_delete(global.commandBuffer, lastCharPosition, 1);
            update_chat_input_visuals();
            show_debug_message("[Client] Updated command buffer after backspace: " + global.commandBuffer);

            // Clear the keyboard buffer to avoid unwanted characters
            keyboard_string = "";

            // Increase deletion speed
            if (global.backspaceTimer == 0) {
                global.backspaceTimer = 1;
            } else {
                global.backspaceTimer = global.backspaceSpeed;
				if global.backspaceSpeed<14 {
					global.backspaceSpeed+=1
				}
            }
        } else {
            global.backspaceTimer += 1;
        }
    } else {
        global.backspaceTimer = 0; // Reset timer when backspace is released
		global.backspaceSpeed=1
    }
	if string_length(global.commandBuffer)<global.character_limit {
    var char = keyboard_string;
	} else {
		var char = "";
		if keyboard_check_pressed(vk_anykey) {
		if last_key_is_valid_character(keyboard_lastkey) {
			//play sound to indicate char limit. 
			var sound = audio_play_sound(uibuttonsound7,0,0,master.uivol*master.mastervol)
			shake_angle=choose(-1,1)*random_range(.95,1.00)
		}
		}
	}
    // Detect pasting via Ctrl+V (Windows) or Command+V (Mac)
    var pasting = false;
    if (os_type == os_windows) {
        if (keyboard_check(vk_control) && keyboard_check_pressed(ord("V"))) {
            pasting = true;
			keyboard_string=""
			char = ""
        }
    } else if (os_type == os_macosx) {
        if (keyboard_check(92) && keyboard_check_pressed(ord("V"))) {
            pasting = true;
			keyboard_string=""
			char = ""
        }
    }

    // Handle pasting
    if (pasting) {
        if (clipboard_has_text()) {
            var clip_string = clipboard_get_text();
            if (string_length(clip_string) > 0 && string_length(clip_string) < global.longestmessage) {
                global.commandBuffer = appendAndWrap(clip_string, global.commandBuffer, global.wrapWidth);
                update_chat_input_visuals();
                show_debug_message("[Client] Appended clipboard content to command buffer: " + global.commandBuffer);
            } else {
                handleDebugMessage("Clipboard content is too long to paste!", false);
            }
        }
        pasting = false;
    }

    if (char != "") {
        // Prevent typing if command is filled
        if (!((global.textColor == c_lime || global.textColor == c_red) && slash_typed)) {
            draw_set_font(fnt_chat);
            global.commandBuffer = appendAndWrap(char, global.commandBuffer, global.wrapWidth);
        }
        update_chat_input_visuals();
        keyboard_string = ""; // Clear the buffer after reading
        show_debug_message("[Client] Appended character to command buffer: " + global.commandBuffer);
    }

// Check if Enter is pressed to process the command or chat message
if (input_check_pressed("confirm")) {
        if (string_char_at(global.commandBuffer, 1) == "/") {
            var command = string_delete(global.commandBuffer, 1, 1);
            execute_command(string_trim(command));
        } else {
            var chatMessage = "[" + master.playername + "] " + global.commandBuffer;
            global.message_is_bubble = 1;
            handleDebugMessage(chatMessage, -1);
            global.message_is_bubble = 0;
        }

        // Add the command/message to the recall list
        if (string_length(global.commandBuffer) > 0) {
            ds_list_add(global.recall_list, global.commandBuffer);
            if (ds_list_size(global.recall_list) > global.recall_max) {
                ds_list_delete(global.recall_list, 0);  // Remove the oldest entry if exceeding the limit
            }
        }
        global.recall_index = -1;
        global.textColor = global.defaultTextColor;
        global.commandBuffer = "";
        isActive = false;
        show_debug_message("[Client] Processed command/chat and cleared buffer.");
}
    // Navigate through the recall list using up and down arrows
    if (keyboard_check_pressed(vk_up)) {
        if (global.recall_index == -1) {
            global.recall_index = ds_list_size(global.recall_list) - 1;
        } else {
            global.recall_index = max(0, global.recall_index - 1);
        }

        if (global.recall_index >= 0 && global.recall_index < ds_list_size(global.recall_list)) {
            global.commandBuffer = ds_list_find_value(global.recall_list, global.recall_index);
            update_chat_input_visuals();
            show_debug_message("[Client] Recalled previous command/chat: " + global.commandBuffer);
        }
    } else if (keyboard_check_pressed(vk_down)) {
        if (global.recall_index != -1) {
            global.recall_index = min(ds_list_size(global.recall_list) - 1, global.recall_index + 1);

            if (global.recall_index < ds_list_size(global.recall_list)) {
                global.commandBuffer = ds_list_find_value(global.recall_list, global.recall_index);
            } else {
                global.commandBuffer = "";
            }
            update_chat_input_visuals();
            show_debug_message("[Client] Recalled next command/chat: " + global.commandBuffer);
        }
    }
}

if (show_chatbox && ds_exists(global.debugMessages, ds_type_list)) {
    var totalLines = drawChatMessages(global.debugMessages, 990, 0, global.max_visible_lines, .5, false, global.c_chat2, global.c_chat1);
 
    // Check if a new message was added
    if (ds_list_size(global.debugMessages) > 0 && 
        ds_list_find_value(global.debugMessages, ds_list_size(global.debugMessages) - 1) == global.lastAddedMessage) {
        // Scroll to the bottom when a new message is added
        scrollIndex = max(0, totalLines - global.max_visible_lines);
        global.lastAddedMessage = ""; // Reset the last added message
    } else {
        // Ensure scrollIndex is within valid range
        scrollIndex = clamp(scrollIndex, 0, max(0, totalLines - global.max_visible_lines));
    }
    
    // Draw the chat messages
    drawChatMessages(global.debugMessages, 990, 0, global.max_visible_lines, .5, true, global.c_chat2, global.c_chat1);
}

// Only process incoming data and send heartbeats if the server is running
if (isServerRunning && sendHeartbeat && (current_time - global.lastHeartbeatTime >= broadcastInterval)) {
    handleDebugMessage("Heartbeat sent to Server", true);
    global.lastHeartbeatTime = current_time;
}





File: Other_68.gml
Code:
// Async Networking Event Handling for Client

/// Revised Async Networking Event
var type = ds_map_find_value(async_load, "type");
var n_id = ds_map_find_value(async_load, "id");

if (n_id == global.client_socket) {
    switch (type) {
        case network_type_connect:
            show_debug_message("[Client] Connected to server.");
            global.isConnected = true;
            break;
        case network_type_disconnect:
            show_debug_message("[Client] Disconnected from server.");
            global.isConnected = false;
            break;
        case network_type_data:
            if (ds_map_exists(async_load, "buffer")) {
                var buffer = ds_map_find_value(async_load, "buffer");
                if (buffer != undefined) {
                    buffer_seek(buffer, buffer_seek_start, 0);
                    var identifier = buffer_read(buffer, buffer_u8);
                    handleNetworkData(identifier, buffer);
                } else {
                    show_debug_message("ERROR: Buffer not found in data event.");
                }
            } else {
                show_debug_message("ERROR: 'buffer' key does not exist in the async_load map.");
            }
            break;
    }
} else {
    show_debug_message("ERROR: Invalid socket ID reference in async event.");
}


//// Async Networking Event of obj_Client

//var type = ds_map_find_value(async_load, "type");
//var n_id = ds_map_find_value(async_load, "id");

//if (n_id == global.client_socket) {
//    switch (type) {
//        case network_type_data:
//            var buffer = ds_map_find_value(async_load, "buffer");
//            buffer_seek(buffer, buffer_seek_start, 0);
//            var identifier = buffer_read(buffer, buffer_u8);

//            switch (identifier) {
//                case global.IDENTIFIER_HEARTBEAT:
//                    // Handle heartbeat received from the server
//                    show_debug_message("[Client] Heartbeat received from server.");
//                    // Optionally, send back a confirmation or keep alive message
//                    break;
                
//                case global.IDENTIFIER_UNIQUE_ID:
//                    // This would be where the server confirms receipt of your unique ID
//                    // Or any other custom logic for unique ID handling
//                    var confirmationMessage = buffer_read(buffer, buffer_string);
//                    show_debug_message("[Client] Server confirmed Unique ID: " + confirmationMessage);
//                    break;
                
//                // Add more case handlers for different data types as needed
//            }
//            buffer_delete(buffer);
//            break;

//        case network_type_connect:
//            // Immediately upon connection, send the unique ID to the server
//            // This ensures server is aware of who just connected
//            var buffer = buffer_create(256, buffer_grow, 1);
//            buffer_seek(buffer, buffer_seek_start, 0);
//            buffer_write(buffer, buffer_u8, global.IDENTIFIER_UNIQUE_ID);
//            buffer_write(buffer, buffer_string, global.clientUniqueID);
//            network_send_packet(global.client_socket, buffer, buffer_tell(buffer));
//            show_debug_message("[Client] Sent unique ID to server: " + global.clientUniqueID);
//            buffer_delete(buffer);
//            break;
            
//        case network_type_disconnect:
//            // Handle disconnection logic here, if needed
//            global.isConnected = false; // Update the connection status
//            show_debug_message("[Client] Disconnected from server.");
//            break;
//    }
//}


File: Destroy_0.gml
Code:
///Destroy Event for obj_Client
if (global.isConnected) {
    network_destroy(global.client_socket);
}


//// Clean up dynamic resources
//if (ds_exists(clien, ds_type_map)) {
//    ds_map_destroy(myDataStructure);
//}

// Optionally, inform the master object or handle game state changes
// For example, transition to a different room or update the UI
//event_perform_object(obj_Master, ev_Other, ev_user0); // Custom user event for cleanup in obj_Master


File: Draw_0.gml
Code:
///Client Draw Code
draw_set_font(fnt_chat);
if show_chatbox=true {
	var xx = 990;
	var yy = 686; // Starting y position
	var lm_cal=clamp(xx+(clamp(110-global.longestmessage,0,110))+1.65*(global.longestmessage-50)/3,xx+215,(display_get_gui_width()-10)/2+room_width/2)+10
	var x1 = 980
	var y1 = 686-20
	var x2 = max(lm_cal,clamp(xx+(clamp(110-global.longestmessage,0,110))+1.65*(string_width(global.commandBuffer)-1)/3,xx+215,(display_get_gui_width())/2+room_width/2+50))
	var y2 = _yy+100
	//draw transparent background box for chatbox that adjusts to fit the longest message. will be later swapped for a scaled image background
	draw_rectangle_outlined(x1,y1,x2,y2,false,global.borderwidth,global.o_color,global.bg_color,global.bg_alpha);
	draw_set_alpha(1);
	var sca=.7
	global.chat_line_height = 70 * sca + 5;
// Set drawing properties
draw_set_colour(c_ltgray);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(fnt_chat); 
// Display server status
var serverStatus = "Server Unable to Connect"; // Default message
if (isServerRunning) {
    serverStatus = "Server Online";
	draw_set_colour(c_lime);
} else {
    serverStatus = "Server Stopped";
	draw_set_colour(c_red);
}

if show_server_status=true {
draw_text_transformed(xx, yy, serverStatus, sca, sca, 0);
yy += 40; // Increment y position for next line
}

if connectedClients>0 {
	draw_set_colour(c_aqua);
} else {
	draw_set_colour(c_ltgrey);
}
if show_server_status=true {
	//we can keep drawing this section this way unless somehow your next response can condense it as well. but its  kind of fine as is, no issues here.
draw_text_transformed(xx+3, yy+3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_text_transformed(xx-3, yy+3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_text_transformed(xx+3, yy-3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_text_transformed(xx-3, yy-3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_set_color(global.c_chat1);
draw_text_transformed(xx, yy-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
yy += 50; // Increment y position for next 
} else {
	draw_set_color(global.c_chat1);
	draw_text_transformed(xx+3, yy+3-10, "Chat Box", sca, sca, 0);
	draw_text_transformed(xx-3, yy+3-10, "Chat Box", sca, sca, 0);
	draw_text_transformed(xx+3, yy-3-10, "Chat Box", sca, sca, 0);
	draw_text_transformed(xx-3, yy-3-10, "Chat Box", sca, sca, 0);
	draw_set_color(global.c_chat2);
	draw_text_transformed(xx, yy-10, "Chat Box", sca, sca, 0);
yy += 60; // Increment y position for next line
}

sca=.5

if show_chatbox and ds_exists(global.debugMessages, ds_type_list) {
    var startY = yy;
    var maxLinesToShow = global.max_visible_lines;
	// Before calling drawChatMessages, ensure messages is a ds_list
if (!ds_exists(global.debugMessages, ds_type_list)) {
    show_debug_message("Error: debugMessages is not a valid ds_list.");
    return;
}

    var totalLines = drawChatMessages(global.debugMessages, 990, startY, maxLinesToShow, sca, false,global.c_chat2,global.c_chat1);

    // Calculate the max index for scrolling based on the total number of lines
    var maxScrollIndex = max(0, clamp(totalLines - maxLinesToShow,0,9999999));

    // Scroll messages with keyboard or mouse wheel
    if (input_check("up") || mouse_wheel_up()) {
		if !(input_check("up") and isActive = true) { //disable scrolling from "W" when typing
        scrollIndex = max(0, scrollIndex - 1);
        show_debug_message("[Client] Scrolled up: Current scroll index is " + string(scrollIndex));
		}
    }
    if (input_check("down") || mouse_wheel_down()) {
		if !(input_check("down") and isActive = true) {//disable scrolling from "S" when typing
        scrollIndex = min(maxScrollIndex, scrollIndex + 1);
        show_debug_message("[Client] Scrolled down: Current scroll index is " + string(scrollIndex));
		}
    }

    // Ensuring scrollIndex is always within the valid range
    scrollIndex = clamp(scrollIndex, 0, maxScrollIndex);

    // Redraw messages considering the scroll index
	// Before calling drawChatMessages, ensure messages is a ds_list
if (!ds_exists(global.debugMessages, ds_type_list)) {
    show_debug_message("Error: debugMessages is not a valid ds_list.");
    return;
}

    drawChatMessages(global.debugMessages, 990, yy , maxLinesToShow, sca, true,global.c_chat2,global.c_chat1);
}

yy=yy+clamp(totalLines-scrollIndex,0,global.max_visible_lines)*(global.chat_line_height*1.00)+5
sca=.6
_yy=yy-15
 
if (isActive) {
// Determine the number of line breaks in the command buffer
var lineCount = array_length(string_split(global.commandBuffer, "\n"));

// Calculate the new height based on the number of lines
var lines = string_split(global.commandBuffer, "\n");
var boxHeight = global.chat_line_height*1.05 * array_length(lines) + 2; // Calculate box height based on number of lines

//chat input box drawing code 
draw_set_color(c_black); // Set initial color to black (border)
 
    if (string_char_at(global.commandBuffer, 1) = "/") {
        draw_set_color(c_white);  // border becomes white if command is being typed
    }
// Adjust the bottom y-coordinate of the rectangle to expand with each new line
draw_rectangle(xx + 5, yy - 11, clamp(xx - 90 + 1.85 * (string_width(global.commandBuffer) - 1) / 3, xx - 90, (display_get_gui_width() - 10) / 2 + room_width / 2) + 150 + 10, yy + boxHeight + 10, false);

    draw_set_color(c_white);  // Set initial bg color to white when no '/' detected
    if (string_char_at(global.commandBuffer, 1) = "/") {
        draw_set_color(c_black);  // Default bg color if command is being typed
		slash_typed=true
    } else {
		slash_typed=false
	}
draw_rectangle(xx + 10, yy - 6, clamp(xx - 90 + 1.85 * (string_width(global.commandBuffer) - 1) / 3, xx - 90, (display_get_gui_width() - 10) / 2 + room_width / 2) + 150, yy + boxHeight, false);
//draw command buffer
draw_set_color(global.c_chat2);
	//we stay drawing these like this because theres no need for line handling here.

	draw_set_color(merge_color(global.textColor,c_red,clamp(abs(shake_angle),0,1)));
    draw_text_transformed(xx+20+shake_angle*7, yy-shake_angle*7, global.commandBuffer + "_", sca, sca, shake_angle*.25);  // Shoblinking cursor
} else {
	draw_set_color(merge_color(global.c_chat1,c_red,clamp(abs(shake_angle),0,1)));
    draw_text_transformed(xx+20+shake_angle*7, yy-shake_angle*7, global.commandBuffer + "_", sca, sca, shake_angle*.25);  // Show blinking cursor
}
} else {
	exit
}


// instance_exists(obj_levelup) {
//if input_value() != undefined {
//draw_set_color(c_red)
//var dbug = ""
//draw_text_transformed(room_width/2,room_height/2,string(global.choiceselect),3,3,0)
//draw_text_transformed(room_width/2,room_height/2,dbug,3,3,0)
//}

////debug draw last key id
//draw_set_color(c_black);
//draw_text(room_width/2+2,room_height/2+2,keyboard_lastkey)
//draw_text(room_width/2-2,room_height/2+2,keyboard_lastkey)
//draw_text(room_width/2+2,room_height/2-2,keyboard_lastkey)
//draw_text(room_width/2-2,room_height/2-2,keyboard_lastkey)
//draw_set_color(c_white);
//draw_text(room_width/2,room_height/2,keyboard_lastkey)

File: Alarm_0.gml
Code:
// Alarm[0] Event
var t_buffer = buffer_create(256, buffer_grow, 1);
buffer_seek(t_buffer, buffer_seek_start, 0);
buffer_write(t_buffer, buffer_u8, global.IDENTIFIER_UNIQUE_ID);
buffer_write(t_buffer, buffer_string, global.clientUniqueID);
network_send_packet(global.client_socket, t_buffer, buffer_tell(t_buffer));
buffer_delete(t_buffer);
global.uniqueIDSent = true; // Ensure we don't resend the unique ID
show_debug_message("[Client] Unique ID sent after delay: " + global.clientUniqueID);


File: obj_Client.yy
Code:
{
  "$GMObject":"",
  "%Name":"obj_Client",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":68,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":1,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":2,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":5,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"obj_Client",
  "overriddenProperties":[],
  "parent":{
    "name":"Objects",
    "path":"folders/Objects.yy",
  },
  "parentObjectId":null,
  "persistent":true,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":null,
  "spriteMaskId":null,
  "visible":true,
}

File: Other_5.gml
Code:
/// @description Insert description here
//room end of obj_client
show_chatbox=false

File: Create_0.gml
Code:

// obj_Client setup Create Event
global.lastAddedMessage = "";
global.sessionLogFileName = "SessionLog_" + string_replace_all(string(date_current_datetime()), ":", "-") + ".txt";
global.masterLogFileName = "MasterLog.txt";
global.logDebugMessagesToFile = false; // By default, log debug messages to the file
global.serverAddress = "127.0.0.1"; // Example server address
// Initialize the data structure globally if not already initialized
global.chatLogs=-1
global.bubble_send_to_log=1
global.message_is_bubble=0
if (!ds_exists(global.chatLogs, ds_type_list)) {
    global.chatLogs = ds_list_create();
}
time=0
// Global Variable Initialization (usually in some global script or create event)
global.typingSpeedCalcDuration = 60; // Default to 60 seconds
global.lastWPMUpdateTime = 0; // Timestamp of the last WPM update
global.WPMUpdateInterval = 5000; // Minimum time between updates in milliseconds (e.g., 5000ms = 5 seconds)
lastUpdateTime = -1;
updateInterval = 60; // Run every 60 seconds
//input
input_cursor_coord_space_set(INPUT_COORD_SPACE.ROOM, 0);
//input_mouse_capture_set(true, 1);
window_set_cursor(cr_none)
instance_create_depth(room_width/2,room_height/2,-1000000,obj_Cursor);
// Global time offset initialized
global.timeOffset = 0;
global.inputDisplayEnabled = false;  // Initialize the variable at an appropriate place in your game startup code
global.actions = ds_map_create();
// Adding command details
// Global initialization script or create event
global.commandDetails = ds_map_create();
add_command("goto_planet(", 1, [["string", "real"]], true);  // Requires '(' visually
add_command("jump_planet(", 1, [["string", "real"]], true);  // Requires '(' visually
add_command("toggle_server", 3, [[]], false);  // Does not require '(' visually
add_command("toggle_debug", 1, [[]], false);  // Does not require '(' visually
add_command("list_clients", 1, [[]], false);  // Does not require '(' visually
add_command("enable_heartbeat", 2, [[]], false);  // Does not require '(' visually
add_command("disable_heartbeat", 2, [[]], false);  // Does not require '(' visually
add_command("toggle_log_debug", 2, [[]], false);  // Does not require '(' visually
add_command("set_my_permission(", 0, [["string", "real"]], true);
add_command("save_game", 0, [[]], false);  // Does not require "(" visually
add_command("game_end(", 0, [["string", "real"]], true); 
add_command("list_commands", 0, [[]], false); // No arguments, accessible at all permission levels
add_command("show_lines(", 0, [["real"]], true);
add_command("set_variable(", 2, [["string"],["string","real"]],true)
add_command("level_up(", 1, [["real"]], true);  // Command requires '(' visually and a real number argument
add_command("show_wpm", 0, [[]], false);  // Does not require '(' visually, level 0 permission
add_command("chat_bubble(", 1, [["string"], ["string"], ["array"]], true);
add_command("save_macros", 1, [[]], false);  // Add the command to save macros
add_command("list_variables", 2, [[]], false);
add_command("add_action(", 2, [["string"],["string"],["array"]],true);
add_command("save_actions", 2, [], false);
add_command("list_actions", 2, [], false);
add_command("execute_action(", 2, [["string"]], true);
add_command("show_variable(", 2, [["string"]], true);
add_command("return_controller", 1, [[]], false);
add_command("toggle_input_display", 1, [[]], false);
add_command("show_gamepad_mapping", 1, [[]], false);
add_command("chat_bubble_choices(", 1, [["string"], ["string"], ["string", "string"]], true);
add_command("add_chat_bubble_action(", 2, [["string"], ["string"], ["string"], ["array"]], true);
// Initialize global action details
global.actionDetails = ds_map_create();



//add_command("spawn_boss(", 2, [["string"]], true);

//0name //1health //2resistance0-1invincible /3/rate //4attackset //5damage //6moveset //7image //8appearance [0=character,1=boss] //9appearanceid
//add_boss("Drake",6666666,.666,1,1,1,4,spr_boss1,1,0]

// You can add new commands or modify existing ones easily with the `add_command` function.
global.variableDetails = ds_map_create();
add_variable("Level", "level", 1, master, "real", 1, 100000, [], [], "Player");
add_variable("Password", "password", 1, master, "string", 1, 100000, [], [], "Player");
add_variable("BPM", "target_bpm", 115, global, "real", 1, 100000, [], [], "Gameplay");
add_variable("Time", "ti", 0, master, "real", 0, 99999999, [], [], "Gameplay");
add_variable("WPM Window", "typingSpeedCalcDuration", 60, global, "real", 1, 600, [], [], "Social");
add_variable("CharacterLimit", "character_limit", 1, global, "real", 0, 1000, [], [], "Social");
add_variable("Macro1", "macro1", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro2", "macro2", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro3", "macro3", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro4", "macro4", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro5", "macro5", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro6", "macro6", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro7", "macro7", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro8", "macro8", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro9", "macro9", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro10", "macro10", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("ControllerType", "control_type", 1, global, "real", -99999999, 99999999, [], [], "Global");
global.debugCommand = "";
//global.character_limit
// Ensure commandBuffer is initialized
global.commandBuffer = "";
slash_typed=false //whether or not a command is being typed
// Initialize a global variable for text color
c_pink = make_color_hsv(0,58,255);
global.defaultTextColor = c_black;
global.textColor = global.defaultTextColor;
// Global Variable Initialization (usually in some global script or create event)
global.typingSpeedCalcDuration = 60; // Default to 60 seconds
 // This will store the input from the user
isActive = true;  // To check if command input is active
sendHeartbeat = false; // Control sending of heartbeat messages
_yy=0
pasting=0;
global.longestmessage=400;
global.c_chat2=c_black
global.c_chat1=c_white
fnt_chat=Font4
global.borderwidth=8 //bg width
global.bg_alpha=.4 //bg alpha
global.bg_color=c_black //background color
global.o_color=c_white //outline color
global.wrapWidth = 2350; // Adjust this value based on your chat box
global.character_limit=300;//character limit for chat
global.lastSpaceIndex = -1;

//Other Variables
global.showDebugMessages = true; // Enable debug messages by default
global.maximumMessages=2000;
maxDisplayMessages = 9; // Number of debug messages to display at once
// Initialize max visible lines for the chat box
global.max_visible_lines = maxDisplayMessages;  // You can adjust this number based on your needs

global.debugMessages = ds_list_create();
fnt_chat_id=0
// Global settings for text wrapping
global.chat_threshold = 2350;  // Threshold to start considering wrapping
global.chat_text_limit = 2350; // Maximum pixel width of text before wrapping
global.chat_line_height = 50; // Height of each line of text in pixels
global.min_width = 110;  // Minimum width of the chat box
global.max_width = 1000;  // Maximum width of the chat box, adjust according to your UI design
// Adjust these values to tweak where the text wraps
global.chat_threshold = global.chat_threshold * 1.66;  // Increase the threshold
global.chat_text_limit = global.chat_text_limit * 1.66;  // Increase the width limit

//Scrolling Variables
scrollIndex = 0; // Initialize scroll position
baseScrollSensitivity = 0.1; // Base sensitivity, how much the index changes initially per mouse wheel movement
maxScrollSensitivity = 1.0; // Maximum sensitivity after continuous scrolling
sensitivityIncrement = 0.05; // How much the sensitivity increases with continuous scrolling
sensitivityDecrement = 0.01; // How much the sensitivity decreases when not scrolling
global.scrollSensitivity = baseScrollSensitivity; // Current sensitivity, starts at base sensitivity
global.isScrolling = false; // Tracks if the user is currently scrolling

// Server Configuration
show_server_status=false
global.serverPort = "5555";
global.maxClients = 4;
global.heartbeatBPM = 115; // Beats per minute for the heartbeat
global.lastHeartbeatTime = current_time; // Store the current time
broadcastInterval = 60000 / global.heartbeatBPM; // Time between heartbeats in milliseconds

global.clientUniqueID = ""; // Initialize to an empty string
global.reconnectTimer = 0; // Time to attempt a reconnect
global.reconnectInterval = 2000; // Interval between reconnect attempts
global.isConnected = false; // Connection status
global.IDENTIFIER_UNIQUE_ID = 2; // Ensure this matches server expectation
global.uniqueIDSent = false; // Prevent re-sending

// Initialize server state and structures
isServerRunning = false;
connectedClients = 0;

// Generate or load the unique ID
if (!file_exists(working_directory + "client_id.txt")) {
    // For a new ID
    global.clientUniqueID = string(irandom_range(100000, 999999));
    var file = file_text_open_write(working_directory + "client_id.txt");
    file_text_write_string(file, global.clientUniqueID);
    file_text_close(file);
} else {
    // For an existing ID
    var file = file_text_open_read(working_directory + "client_id.txt");
    global.clientUniqueID = file_text_read_string(file);
    file_text_close(file);
}

// Client Initialization and Connection
global.client_socket = network_create_socket(network_socket_tcp);
var status = network_connect(global.client_socket, global.serverAddress, global.serverPort);
if (status >= 0) {
    // Successful connection
    show_debug_message("[Client] Successfully connected and ID sent.");
	isServerRunning = true;
    var buffer = buffer_create(256, buffer_grow, 1);
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_u8, global.IDENTIFIER_UNIQUE_ID);
    buffer_write(buffer, buffer_string, global.clientUniqueID);
    network_send_packet(global.client_socket, buffer, buffer_tell(buffer));
    buffer_delete(buffer);
} else {
    // Handle connection failure
    show_debug_message("[Client] Connection failed.");
}

show_chatbox=false
depth-=10; //ensure at top or front of view

global.backspaceTimer = 0;
global.backspaceDelay = 15; // Initial delay before rapid deletion
global.backspaceSpeed = 1;  // Delay between rapid deletions

global.recall_list = ds_list_create();  // List to store past messages and commands
global.recall_max = 20;  // Maximum number of entries to remember
global.recall_index = -1;  // Index for navigating through the recall list

shake_angle=0 //angle to shake text when character limit reached.

load_actions()


Object: obj_chat_bubble

File: Step_0.gml
Code:
// obj_chat_bubble Step Event
if (owner != noone) {
    x = owner.x;
    y = owner.y - 60;
}

if (wrapped == 0) {
    draw_set_font(text_font);
    var text_length = string_length(text);
    var longestWordWidth = get_longest_word_width(text, text_font, 1);
    
    // Adjust max_width based on text length
    max_width = clamp(500 + text_length * 2, min_width, 1500);
    
    // Calculate initial text scale
    text_scale = min(clamp(1 - text_length / 500, 0.5, 1), clamp(1.5 - longestWordWidth / 1000, 0.5, 1));
    
    // Wrap text
    wrapped_text = wrap_chat_text(text, max_width - 2 * padding);
    
    // Count lines and adjust scale if needed
    line_count = string_count("\n", wrapped_text) + 1;
    if (line_count > 5) {
        text_scale *= (5 / line_count);
        wrapped_text = wrap_chat_text(text, (max_width - 2 * padding) / text_scale);
        line_count = string_count("\n", wrapped_text) + 1;
    }
    
    // Calculate bubble dimensions
    scale_x = clamp(string_width_ext(wrapped_text, -1, max_width - 2 * padding) * text_scale + 6 * padding, min_width, max_width);
    real_scale_y = clamp(string_height_ext(wrapped_text, -1, max_width - 2 * padding) * text_scale + 4 * padding, min_height - 120, max_height - 120);
    
    scale_y = real_scale_y + 120;
    wrapped = 1;
}

// Calculate top_middle_x and top_middle_y
top_middle_x = x - (sprite_get_xoffset(sprite_index) - 250) * scale_x / 500;
top_middle_y = y - sprite_get_yoffset(sprite_index) - real_scale_y - 60;

// obj_chat_bubble Step Event
if (timer_enabled) {
    lifetime++;
    if (lifetime >= duration) {
        instance_destroy();
    }
}


File: Destroy_0.gml
Code:
// obj_chat_bubble Destroy Event
if (ds_exists(hover_progress, ds_type_map)) {
    ds_map_destroy(hover_progress);
}
if (ds_exists(hover_scale, ds_type_map)) {
    ds_map_destroy(hover_scale);
}

File: Draw_0.gml
Code:
// obj_chat_bubble Draw Event
// At the beginning of the Draw Event, add these variables if they're not already defined:
if (!variable_instance_exists(id, "text_color")) {
    _text_color = c_black;  // Default text color
}
if (!variable_instance_exists(id, "text_color_outline")) {
    text_color_outline = c_white;  // Default outline color
}
if (!variable_instance_exists(id, "text_scale")) {
    text_scale = 1;  // Default text scale
}
if (!variable_instance_exists(id, "outline_size")) {
    outline_size = 1;  // Default outline size
}
if (!variable_instance_exists(id, "padding")) {
    padding = 10;  // Default padding
}
if (!variable_instance_exists(id, "max_width")) {
    max_width = 500;  // Default max width
}

// Define sprite variables (you can set these in the Create event)
if (!variable_instance_exists(id, "main_bubble_sprite")) {
    main_bubble_sprite = spr_chatbubble1;
}
if (!variable_instance_exists(id, "choice_bubble_sprite")) {
    choice_bubble_sprite = main_bubble_sprite; // Use the same sprite for choices
}
var tail_sprite_index = 0;
var middle_sprite_index = 1;
var top_sprite_index = 2;

var bottom_y = y;
var top_y = y - real_scale_y;
var middle_height = clamp(scale_y - 240, 0, max_height - 120);
var middle_y = y - sprite_get_yoffset(main_bubble_sprite) - (120 - sprite_get_yoffset(main_bubble_sprite)) * middle_height / 120;

// Draw main chat bubble
draw_sprite_ext(main_bubble_sprite, tail_sprite_index, x, bottom_y, scale_x / 500, 1, 0, c_white, 1);
draw_sprite_ext(main_bubble_sprite, middle_sprite_index, x, middle_y, scale_x / 500, middle_height / 120, 0, c_white, 1);
draw_sprite_ext(main_bubble_sprite, top_sprite_index, x, top_y, scale_x / 500, 1, 0, c_white, 1);

// Draw message text
draw_set_font(text_font);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
drawTextWithOutline(top_middle_x, top_middle_y + padding + 130, wrapped_text, text_scale, outline_size, text_color_outline, _text_color, max_width - 2 * padding);

// Calculate choice layout variables
// Calculate choice layout variables
if (array_length(choices) > 0) {
    var choice_padding = 20;
    var choice_width = 450;
    var choice_height = 100;
    choices_per_row = min(2, array_length(choices));
    var rows = ceil(array_length(choices) / choices_per_row);
    
    var total_width = (choice_width + choice_padding) * choices_per_row - choice_padding;
    var start_x = x - total_width / 2;
    var start_y = bottom_y + 40;  // Position choices below the main bubble

    // Draw choices
    for (var i = 0; i < array_length(choices); i++) {
        var row = i div choices_per_row;
        var col = i mod choices_per_row;
        var choice_x = start_x + col * (choice_width + choice_padding);
        var choice_y = start_y + row * (choice_height + choice_padding);

        var choice_middle_height = 0; //this should be set above 0 if there is more than 1 line in a choice.
        var choice_top_y = choice_y-60;
        var choice_bottom_y = choice_y + choice_middle_height+60;
        var choice_middle_y = choice_y+0;

        var is_hovering = point_in_rectangle(mouse_x, mouse_y, choice_x, choice_y, choice_x + choice_width, choice_bottom_y);
        
        var alpha = 0.5;
        var color = c_white;
        var scale = 1;

        // Smooth hover animation
        if (ds_exists(hover_progress, ds_type_map) && ds_exists(hover_scale, ds_type_map)) {
            if (!ds_map_exists(hover_progress, i)) ds_map_add(hover_progress, i, 0);
            if (!ds_map_exists(hover_scale, i)) ds_map_add(hover_scale, i, 1);

            if (is_hovering) {
                hover_progress[? i] = min(hover_progress[? i] + 1/30, 1);
                hover_scale[? i] = min(hover_scale[? i] + 0.05/30, 1.05);
            } else {
                hover_progress[? i] = max(hover_progress[? i] - 1/30, 0);
                hover_scale[? i] = max(hover_scale[? i] - 0.05/30, 1);
            }
            
            alpha = lerp(0.5, 1, hover_progress[? i]);
            color = merge_color(c_white, c_ltgray, hover_progress[? i]);
            scale = hover_scale[? i];
        }
			
        // Check for mouse click
        if (is_hovering && mouse_check_button_pressed(mb_left)) {
            if (choices[i][1] != "null") {
                handle_choice_selection(choices[i][1]);  // Pass the action name to the new function
            } else {
                // Handle "null" action (e.g., close the chat bubble)
                instance_destroy();
            }
        }

        // Draw choice bubble
        var choice_scale_x = choice_width / 500 * scale;
        var choice_scale_y = scale;
        draw_sprite_ext(choice_bubble_sprite, tail_sprite_index, choice_x + choice_width/2, choice_bottom_y, choice_scale_x, choice_scale_y, 0, color, alpha);
        draw_sprite_ext(choice_bubble_sprite, middle_sprite_index, choice_x + choice_width/2, choice_middle_y, choice_scale_x, choice_middle_height / 120 * choice_scale_y, 0, color, alpha);
        draw_sprite_ext(choice_bubble_sprite, top_sprite_index, choice_x + choice_width/2, choice_top_y, choice_scale_x, choice_scale_y, 0, color, alpha);

        // Draw choice text
        var choice_text = choices[i][0];
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        
        var text_color = is_hovering ? c_white : c_black;
        var outline_color = is_hovering ? c_black : c_white;
        
        drawTextWithOutline(choice_x + choice_width / 2, choice_y + choice_middle_height / 2, choice_text, 0.8 * scale, 1, outline_color, text_color, choice_width - 20);
    }
}

// Debug: draw bounding box
if (show_bounds) {
    draw_set_color(c_red);
    draw_rectangle(top_middle_x - scale_x/2, top_middle_y + 130, top_middle_x + scale_x/2, bottom_y, true);
}

File: Create_0.gml
Code:
// obj_chat_bubble Create Event

hover_progress = ds_map_create();
hover_scale = ds_map_create();
// In the Create Event of obj_chat_bubble
_text_color = c_black;
choices_per_row=2
text_color_outline = c_white;
text_scale = 1;
outline_size = 2;
padding = 15;
text = "";
wrapped_text = "";
line_count = 1;
owner = noone;
choices=[]
max_width = 500;
max_height = 800;
min_width = 200;
min_height = 240;
top_middle_x = 0;
top_middle_y = 0;

scale_y = min_height;
scale_x = min_width;
real_scale_y = min_height - 120;
duration = 1000;
lifetime = 0;
// Create event of obj_chat_bubble
main_bubble_sprite = spr_chatbubble1;
choice_bubble_sprite = spr_chatchoice1;
text_font = Font_Default;
wrapped = 0;
show_bounds = false;

// Set up timer
if (array_length(choices) > 0) {
    has_choices = true;
    timer_enabled = false;
} else {
    has_choices = false;
    timer_enabled = true;
}

File: obj_chat_bubble.yy
Code:
{
  "$GMObject":"",
  "%Name":"obj_chat_bubble",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":1,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"obj_chat_bubble",
  "overriddenProperties":[],
  "parent":{
    "name":"ui",
    "path":"folders/Objects/ui.yy",
  },
  "parentObjectId":null,
  "persistent":false,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":{
    "name":"spr_chatbubble1",
    "path":"sprites/spr_chatbubble1/spr_chatbubble1.yy",
  },
  "spriteMaskId":null,
  "visible":true,
}

== Related Scripts ==

Script: drawChatMessages
File: drawChatMessages.gml
Code:
/// @description Draws chat messages within given bounds and manages outlines
/// @param {ds_list} messages - The list of messages to draw
/// @param {real} x - The x-coordinate for drawing messages
/// @param {real} startY - The starting y-coordinate for drawing messages
/// @param {real} maxLinesToShow - The max number of lines to show in the chat box
/// @param {real} sca - Scale for text
/// @param {boolean} visible_ - does it draw the chat message?
/// @param {color} col1 - Outline color
/// @param {color} col2 - Text color
/// @returns {int} total number of lines in all messages
function drawChatMessages(messages, x, startY, maxLinesToShow, sca, visible_, col1, col2) {
    var currentY = startY;
    var totalHeight = 0;
    var maxWidth = room_width - x - 20;
    var totalMessages = ds_list_size(messages);
    var startIndex = max(0, min(scrollIndex, totalMessages - maxLinesToShow));

    // First pass: calculate total height for visible messages
    for (var i = 0; i < maxLinesToShow && (i + startIndex) < totalMessages; i++) {
        var message = messages[| i + startIndex];
        var messageHeight = string_height_ext(message, -1, maxWidth) * sca;
        totalHeight += messageHeight + 5; // 5 pixels padding between messages
    }

    // Draw messages
    if (visible_) {
        for (var i = 0; i < maxLinesToShow && (i + startIndex) < totalMessages; i++) {
            var message = messages[| i + startIndex];
            drawTextWithOutline(x, currentY, message, sca, 2, col1, col2, maxWidth);
            currentY += string_height_ext(message, -1, maxWidth) * sca + 5;
        }
    }

    return totalMessages;
}






Script: string_wrap
File: string_wrap.gml
Code:
function string_wrap(str, max_width) {
    var text_wrapped = "";
    var space_pos = -1;
    var line_width = 0;
    var str_len = string_length(str);
    
    for (var i = 1; i <= str_len; i++) {
        var char = string_char_at(str, i);
        var char_width = string_width(char);
        
        if (char == " ") space_pos = i;
        
        if (line_width + char_width > max_width) {
            if (space_pos != -1) {
                text_wrapped += string_copy(str, 1, space_pos - 1) + "\n";
                str = string_delete(str, 1, space_pos);
                line_width = 0;
                i = 0;
                str_len = string_length(str);
                space_pos = -1;
            } else {
                text_wrapped += string_copy(str, 1, i - 1) + "\n";
                str = string_delete(str, 1, i - 1);
                line_width = 0;
                i = 0;
                str_len = string_length(str);
            }
        } else {
            line_width += char_width;
        }
    }
    
    text_wrapped += str;
    return text_wrapped;
}

Script: handleDebugMessage
File: handleDebugMessage.gml
Code:
/// @function handleDebugMessage(msg, isDebug)
/// @description Logs messages to the debug console and files, and manages chat display
/// @param {string} msg - The message to log
/// @param {bool} isDebug - True if this is a debug message, false for essential messages
function handleDebugMessage(msg, isDebug) {
    var safeMsg = is_string(msg) ? msg : "Undefined message content";
    // Remove newlines from the message
    safeMsg = string_replace_all(safeMsg, "\n", " ");
    safeMsg = string_replace_all(safeMsg, "\r", "");
    
    var currentDate = date_current_datetime();
    var formattedDate = date_date_string(currentDate);
    var formattedTime = date_time_string(currentDate);
    var logMsg = formattedDate + " " + formattedTime + ": " + safeMsg + "\n";
    show_debug_message("Date: " + formattedDate + " Time: " + formattedTime + " Msg: " + safeMsg);
    
    // Log to file
    logToFile(working_directory + global.sessionLogFileName, logMsg);
    logToFile(working_directory + global.masterLogFileName, logMsg);
    
    // Always add messages to the debug messages list
	if (isDebug=true && global.logDebugMessagesToFile) || (isDebug<=0) {
    if (ds_exists(global.debugMessages, ds_type_list)) {
        if (ds_list_size(global.debugMessages) >= global.maximumMessages) {
            ds_list_delete(global.debugMessages, 0);
        }
        ds_list_add(global.debugMessages, safeMsg);
        global.lastAddedMessage = safeMsg;
    } else {
        show_debug_message("ERROR: global.debugMessages is not a valid ds_list");
    }
	}
    // Create a chat bubble for non-debug messages that don't start with "/"
    if (isDebug = -1 && string_char_at(safeMsg, 1) != "/"){
        var cleanMsg = string_remove_between(safeMsg, "[", "]");
        cleanMsg = string_replace_all(cleanMsg, "\n", " ");
        scr_chat_bubble(cleanMsg, "yeancat", []); // Pass an empty array for choices
    }
    
    // WPM Calculation Logic Integration
    if (!isDebug) {
        var wordCount = string_word_count(safeMsg);
        var messageDetails = [currentDate, wordCount];
        if (ds_exists(global.chatLogs, ds_type_list)) {
            ds_list_add(global.chatLogs, messageDetails);
            updateWPM();
        } else {
            show_debug_message("ERROR: global.chatLogs is not a valid ds_list");
        }
    }
}





///// @function handleDebugMessage(msg, isDebug)
///// @param {string} msg - The message to log
///// @param {bool} isDebug - True if this is a debug message, false for essential messages
//function handleDebugMessage(msg, isDebug) {
//    var safeMsg = is_string(msg) ? msg : "Undefined message content";
//    var currentDate = date_current_datetime();
//    var formattedDate = date_date_string(currentDate);
//    var formattedTime = date_time_string(currentDate);
//    var logMsg = formattedDate + " " + formattedTime + ": " + safeMsg + "\n";

//    show_debug_message("Date: " + formattedDate + " Time: " + formattedTime + " Msg: " + safeMsg);

//    // Function to handle file logging
//    function logToFile(filePath, message) {
//        var file;
//        if (file_exists(filePath)) {
//            file = file_text_open_append(filePath);
//        } else {
//            file = file_text_open_write(filePath);
//        }
//        file_text_write_string(file, message);
//        file_text_close(file);
//    }

//    logToFile(working_directory + global.sessionLogFileName, logMsg);
//    logToFile(working_directory + global.masterLogFileName, logMsg);

//    if (isDebug && global.showDebugMessages) {
//        if (ds_list_size(obj_Client.debugMessages) >= global.maximumMessages) {
//            ds_list_delete(obj_Client.debugMessages, 0); // Keep the latest messages
//        }
//        ds_list_add(debugMessages, safeMsg);
//		if show_chatbox and ds_exists(debugMessages, ds_type_list) {
//			// Before calling drawChatMessages, ensure messages is a ds_list
//if (!ds_exists(debugMessages, ds_type_list)) {
//    show_debug_message("Error: debugMessages is not a valid ds_list.");
//    return;
//}

//var totalLines = drawChatMessages(debugMessages, 990, 0, global.max_visible_lines, .5, false,global.c_chat2,global.c_chat1);
//		if (totalLines-obj_Client.scrollIndex>global.max_visible_lines) {
//			var totalLines_inRecentMessage = 1
//			if is_string(msg) {
//			totalLines_inRecentMessage = countLinesInString(msg)
//			}
//			obj_Client.scrollIndex = totalLines //scroll to bottom when new message
//            obj_Client.scrollIndex -= (clamp(totalLines_inRecentMessage-1,0,999999)); //scroll back up number of lines in newest message (-1)
//        }
//        if (obj_Client.scrollIndex>totalLines ) {
//			//clamp scroll
//            obj_Client.scrollIndex = clamp(totalLines,0,99999);
//        }
//        draw_set_font(obj_Client.fnt_chat);
//        global.longestmessage = updateLongestMessage(debugMessages);	
//		}
//    }
//}



Script: execute_command
File: execute_command.gml
Code:
function execute_command(command) {
    handleDebugMessage("Executing command: " + command, true);
    command = string_trim(string_replace_all(command, "\n", " "));
    if (command == "") {
        handleDebugMessage("Error: Empty command", true);
        return;
    }
    if (string_char_at(command, 1) == "/") {
        command = string_delete(command, 1, 1);
    }
    handleDebugMessage("Processed command: " + command, true);
    
    var fullCommand = command;
    var openParenIndex = string_pos("(", command);
    var closeParenIndex = string_last_pos(")", command);
    var commandName = "";
    var parameters = [];
    
    if (string_pos("add_action(", command) == 1) {
        var startParen = string_pos("(", command);
        var endParen = string_last_pos(")", command);
        if (startParen > 0 && endParen > startParen) {
            var argsString = string_copy(command, startParen + 1, endParen - startParen - 1);
            var args = parse_arguments(argsString);
            if (array_length(args) >= 3) {
                var actionName = string_trim_lr(args[0]);
                var actionCommand = string_trim_lr(args[1]);
                var actionParams = "";
                for (var i = 2; i < array_length(args); i++) {
                    actionParams += args[i];
                    if (i < array_length(args) - 1) actionParams += ",";
                }
                actionParams = string_trim_lr(actionParams);
                scr_add_action(actionName, actionCommand, actionParams);
            } else {
                handleDebugMessage("Invalid number of arguments for add_action", true);
            }
        }
        return;
    } else if (string_pos("execute_action(", command) == 1) {
        var actionName = string_replace(command, "execute_action(", "");
        actionName = string_replace(actionName, ")", "");
        actionName = string_trim_lr(actionName);
        
        handleDebugMessage("execute_action - Action Name: " + actionName, true);
        
        if (ds_map_exists(global.actionDetails, actionName)) {
            var encodedCommand = ds_map_find_value(global.actionDetails, actionName);
            var decodedCommand = json_parse(base64_decode(encodedCommand));
            
            handleDebugMessage("Executing action: " + actionName, true);
            handleDebugMessage("Decoded Command: " + decodedCommand, true);
            
            // Split the decoded command into command name and parameters
            var cmdParts = string_split(decodedCommand, "(");
            var cmdName = string_trim_lr(cmdParts[0]);
            var cmdParams = string_trim_lr(string_replace(cmdParts[1], ")", ""));
            
            // Parse the parameters
            var params = json_parse(cmdParams);
            
            // Execute the command with the parsed parameters
            var scriptName = "scr_" + cmdName;
            if (script_exists(asset_get_index(scriptName))) {
                if (is_array(params)) {
                    script_execute_ext(asset_get_index(scriptName), params);
                } else {
                    script_execute(asset_get_index(scriptName), params);
                }
            } else {
                handleDebugMessage("Script not found for command: " + cmdName, true);
            }
        } else {
            handleDebugMessage("Action '" + actionName + "' not found.", true);
        }
        return;
    } else if (openParenIndex > 0 && closeParenIndex > openParenIndex) {
        commandName = string_trim_lr(string_copy(command, 1, openParenIndex - 1));
        var paramString = string_copy(command, openParenIndex + 1, closeParenIndex - openParenIndex - 1);
        parameters = parse_arguments(paramString);
    } else {
        commandName = command;
    }
	
	if (commandName == "chat_bubble") {
        var params = parse_arguments(paramString);
        if (array_length(params) >= 2) {
            var text = string_replace_all(params[0], "\"", "");
            var owner = string_replace_all(params[1], "\"", "");
            var choices = (array_length(params) > 2) ? json_parse(params[2]) : [];
            
            scr_chat_bubble(text, owner, choices);
        } else {
            handleDebugMessage("Invalid number of arguments for chat_bubble", true);
        }
        return;
    }
    
    var scriptName = "scr_" + commandName;
    if (script_exists(asset_get_index(scriptName))) {
        if (is_array(parameters) && array_length(parameters) > 0) {
            script_execute_ext(asset_get_index(scriptName), parameters);
        } else {
            script_execute(asset_get_index(scriptName));
        }
    } else {
        handleDebugMessage("Script not found for command: " + commandName, true);
    }
}

Script: add_command
File: add_command.gml
Code:
// Function to add command details
function add_command(cmd, lvl, args, requiresParentheses) {
    var cmdEntry = ds_map_create();
    ds_map_add(cmdEntry, "requiredLevel", lvl);
    
    // Check if args array is not empty and contains at least one non-empty array element
    var argsRequired = false;
    var argCount = 0; // Initialize argCount
    if (array_length(args) > 0) {
        for (var i = 0; i < array_length(args); i++) {
            if (array_length(args[i]) > 0) {
                argsRequired = true;
                argCount++; // Increment for each argument type array
            }
        }
    }
    
    ds_map_add(cmdEntry, "argsRequired", argsRequired);
    ds_map_add(cmdEntry, "arg_count", argCount); // Adding arg_count to the command details
    ds_map_add(cmdEntry, "arg_types", args);
    ds_map_add(cmdEntry, "requiresParentheses", requiresParentheses);
    ds_map_add(global.commandDetails, cmd, cmdEntry);
}




Script: add_action not found in the expected directories.

Script: parse_arguments
File: parse_arguments.gml
Code:
function parse_arguments(argsString) {
    var args = [];
    var currentArg = "";
    var inQuotes = false;
    var bracketDepth = 0;
    var arrayDepth = 0;
    
    for (var i = 1; i <= string_length(argsString); i++) {
        var char = string_char_at(argsString, i);
        
        if (char == "\"" && string_char_at(argsString, i - 1) != "\\") {
            inQuotes = !inQuotes;
        }
        
        if (!inQuotes) {
            if (char == "[") arrayDepth++;
            if (char == "]") arrayDepth--;
            if (char == "(") bracketDepth++;
            if (char == ")") bracketDepth--;
        }
        
        if (char == "," && bracketDepth == 0 && arrayDepth == 0 && !inQuotes) {
            array_push(args, string_trim_lr(currentArg));
            currentArg = "";
        } else {
            currentArg += char;
        }
    }
    
    if (currentArg != "") {
        array_push(args, string_trim_lr(currentArg));
    }
    
    return args;
}

Script: drawTextWithOutline
File: drawTextWithOutline.gml
Code:
function drawTextWithOutline(x, y, text, scale, outline_width, outline_color, text_color, max_width) {
    draw_set_color(outline_color);
    for (var i = -outline_width; i <= outline_width; i++) {
        for (var j = -outline_width; j <= outline_width; j++) {
            draw_text_ext_transformed(x + i, y + j, text, -1, max_width, scale, scale, 0);
        }
    }
    draw_set_color(text_color);
    draw_text_ext_transformed(x, y, text, -1, max_width, scale, scale, 0);
}

//function drawTextWithOutline(x, y, text, sca, offset, col1, col2, max_text_width = -1) {
//    if (max_text_width == -1) {
//        // If no max width is provided, use regular draw_text
//        draw_set_color(col1);
//        draw_text_transformed(x + offset, y + offset, text, sca, sca, 0);
//        draw_text_transformed(x - offset, y + offset, text, sca, sca, 0);
//        draw_text_transformed(x + offset, y - offset, text, sca, sca, 0);
//        draw_text_transformed(x - offset, y - offset, text, sca, sca, 0);
//        draw_set_color(col2);
//        draw_text_transformed(x, y, text, sca, sca, 0);
//    } else {
//        // Use draw_text_ext_transformed if max width is provided
//        draw_set_color(col1);
//        draw_text_ext_transformed(x + offset, y + offset, text, -1, max_text_width, sca, sca, 0);
//        draw_text_ext_transformed(x - offset, y + offset, text, -1, max_text_width, sca, sca, 0);
//        draw_text_ext_transformed(x + offset, y - offset, text, -1, max_text_width, sca, sca, 0);
//        draw_text_ext_transformed(x - offset, y - offset, text, -1, max_text_width, sca, sca, 0);
//        draw_set_color(col2);
//        draw_text_ext_transformed(x, y, text, -1, max_text_width, sca, sca, 0);
//    }
//}

Script: appendAndWrap
File: appendAndWrap.gml
Code:
/// @function appendAndWrap(char, currentBuffer, maxWidth)
/// @param {string} char - the character being added
/// @param {string} currentBuffer - the current content of the command buffer
/// @param {real} maxWidth - the maximum width of a line before wrapping
/// @desc Appends a character to the buffer and wraps text if necessary.
// Function to wrap text lines and handle spaces near line ends correctly
function appendAndWrap(char, currentBuffer, maxWidth) {
    var tempBuffer = currentBuffer + char;
    var lastNewline = string_last_index_of(tempBuffer, "\n");
    var line = (lastNewline != -1) ? string_copy(tempBuffer, lastNewline + 2, string_length(tempBuffer) - lastNewline) : tempBuffer;
    var lineWidth = string_width(line);

    // Don't wrap inside parentheses for command parameters
    var openParenCount = string_count("(", line);
    var closeParenCount = string_count(")", line);
    
    if (openParenCount > closeParenCount) {
        return tempBuffer;
    }

    // Handle space near maximum line width
    if (char == " " && lineWidth >= maxWidth - string_width("w")) {
        return string_insert("\n", tempBuffer, string_length(tempBuffer));
    } else if (lineWidth > maxWidth) {
        // Insert newline at last space or force it if no space found
        var lastSpace = string_last_index_of(line, " ");
        if (lastSpace > -1) {
            return string_insert("\n", tempBuffer, lastNewline + lastSpace + 2);
        } else {
            return string_insert("\n", tempBuffer, string_length(tempBuffer));
        }
    }

    return tempBuffer;
}






Script: update_chat_input_visuals
File: update_chat_input_visuals.gml
Code:
function update_chat_input_visuals() {
    var inputText = string_trim(global.commandBuffer);
    //show_debug_message("Input text: '" + inputText + "'");
    
    if (inputText == "") {
        global.textColor = global.defaultTextColor;
        //show_debug_message("Empty input, setting default color");
        return;
    }
    
    if (string_char_at(inputText, 1) != "/") {
        global.textColor = global.defaultTextColor;
        //show_debug_message("Not a command, setting default color");
        return;
    }
    
    var commandEnd = string_pos("(", inputText);
    if (commandEnd == 0) commandEnd = string_length(inputText) + 1;
    
    var command = string_copy(inputText, 2, commandEnd - 2);
    show_debug_message("Extracted command: '" + command + "'");
    
    var hasPermission = check_permission_command(command);
    var commandExists = ds_map_exists(global.commandDetails, command + "(") || ds_map_exists(global.commandDetails, command);
    var requiresParentheses = ds_map_exists(global.commandDetails, command + "(");
    
    show_debug_message("Command exists: " + string(commandExists) + ", Requires parentheses: " + string(requiresParentheses) + ", Has permission: " + string(hasPermission));
    
    if (!commandExists) {
        global.textColor = c_pink;
        show_debug_message("Command doesn't exist, setting color to pink");
        return;
    }
    
    if (!hasPermission) {
        global.textColor = c_red;
        show_debug_message("No permission, setting color to red");
        return;
    }
    
    var openParenPos = string_pos("(", inputText);
    var closeParenPos = string_last_pos(")", inputText);
    
    if (requiresParentheses) {
        if (openParenPos == 0) {
            global.textColor = c_aqua;
            show_debug_message("Parentheses required but not opened, setting color to aqua");
        } else if (closeParenPos == 0 || !are_brackets_balanced(inputText)) {
            global.textColor = c_yellow;
            show_debug_message("Parentheses or brackets not properly closed, setting color to yellow");
        } else {
            var params = string_copy(inputText, openParenPos + 1, closeParenPos - openParenPos - 1);
            var isValid = are_params_valid(params);
            global.textColor = isValid ? c_lime : c_yellow;
            show_debug_message("Params: '" + params + "', Is valid: " + string(isValid) + ", Setting color to " + (global.textColor == c_lime ? "green" : "yellow"));
        }
    } else {
        global.textColor = c_lime;
        show_debug_message("No parentheses needed, setting color to green");
    }
    
    show_debug_message("Final text color set to: " + (global.textColor == c_lime ? "green" : (global.textColor == c_red ? "red" : (global.textColor == c_yellow ? "yellow" : (global.textColor == c_aqua ? "aqua" : (global.textColor == c_pink ? "pink" : "unknown"))))));
}

//// Function to update the color of the chatbox text based on command input
//function update_chat_input_visuals() {
//    var inputText = string_trim(global.commandBuffer);
//    var firstChar = string_char_at(inputText, 1);

//    if (inputText == "") {
//        global.textColor = global.defaultTextColor;
//    } else if (firstChar == "/") {
//        if (string_length(inputText) == 1) {
//            global.textColor = c_white; // Initial '/' is white
//        } else {
//            var commandEnd = string_pos(" ", inputText);
//            if (commandEnd == 0) commandEnd = string_length(inputText);
//            var argsStart = string_pos("(", inputText);
//            var argsEnd = string_pos(")", inputText);

//            // Adjust the commandEnd if "(" is part of the command
//            if (argsStart > 0 && argsStart < commandEnd) {
//                commandEnd = argsStart;
//            }
//            var command = string_copy(inputText, 2, commandEnd - 1);
//            var hasPermission = check_permission_command(command);

//            // Ensure the command is valid before changing the color based on arguments
//            if (ds_map_exists(global.commandDetails, command)) {
//                // Call handleCommandWithArgs to manage the text color based on command validation
//                global.textColor = handleCommandWithArgs(argsStart, argsEnd, command, hasPermission);
//            } else {
//                // If the command is not valid, do not turn it aqua just for typing '('
//                global.textColor = c_pink;  // Set to pink as the command is not recognized
//            }
//        }
//    } else {
//        global.textColor = global.defaultTextColor;
//    }
//}



//// Function to update the color of the chatbox text based on command input
//function update_chat_input_visuals() {
//    var inputText = string_trim(global.commandBuffer);
//    var firstChar = string_char_at(inputText, 1);

//    if (inputText == "") {
//        global.textColor = global.defaultTextColor;
//    } else if (firstChar == "/") {
//        if (string_length(inputText) == 1) {
//            global.textColor = c_white; // Initial '/' is white
//        } else {
//            var commandEnd = string_pos(" ", inputText);
//            if (commandEnd == 0) commandEnd = string_length(inputText);
//            var argsStart = string_pos("(", inputText);
//            var argsEnd = string_pos(")", inputText);

//            // Adjust the commandEnd if "(" is part of the command
//            if (argsStart > 0 && argsStart < commandEnd) {
//                commandEnd = argsStart;
//            }
//            var command = string_copy(inputText, 2, commandEnd - 1);
//            var hasPermission = check_permission_command(command);

//            // Ensure the command is valid before changing the color based on arguments
//            if (ds_map_exists(global.commandDetails, command)) {
//                // Extract and validate array arguments
//                var argsString = string_copy(inputText, argsStart + 1, argsEnd - argsStart - 1);
//                var isValidArray = true;

//                if (string_pos("[", argsString) > 0 && string_pos("]", argsString) > 0) {
//                    var arrayStart = string_pos("[", argsString);
//                    var arrayEnd = string_pos("]", argsString);
//                    var arrayString = string_copy(argsString, arrayStart + 1, arrayEnd - arrayStart - 1);
//                    var arrayParams = string_split(arrayString, ",");

//                    // Check if each element is a valid parameter
//                    for (var i = 0; i < array_length(arrayParams); i++) {
//                        if (string_trim(arrayParams[i]) == "") {
//                            isValidArray = false;
//                            break;
//                        }
//                    }
//                }

//                // Check if command parameters are valid
//                if (isValidArray) {
//                    global.textColor = handleCommandWithArgs(argsStart, argsEnd, command, hasPermission);
//                } else {
//                    global.textColor = c_pink; // Set to pink if the array is invalid
//                }
//            } else {
//                global.textColor = c_pink;  // Set to pink if the command is not recognized
//            }
//        }
//    } else {
//        global.textColor = global.defaultTextColor;
//    }
//}



//// Function to update the color of the chatbox text based on command input
//function update_chat_input_visuals() {
//    var inputText = string_trim(global.commandBuffer);
//    var firstChar = string_char_at(inputText, 1);

//    if (inputText == "") {
//        global.textColor = global.defaultTextColor;
//    } else if (firstChar == "/") {
//        if (string_length(inputText) == 1) {
//            global.textColor = c_white; // Initial '/' is white
//        } else {
//            var commandEnd = string_pos(" ", inputText);
//            if (commandEnd == 0) commandEnd = string_length(inputText);
//            var argsStart = string_pos("(", inputText);
//            var argsEnd = string_pos(")", inputText);

//            // Adjust the commandEnd if "(" is part of the command
//            if (argsStart > 0 && argsStart < commandEnd) {
//                commandEnd = argsStart;
//            }
//            var command = string_copy(inputText, 2, commandEnd - 1);
//            var hasPermission = check_permission_command(command);

//            // Ensure the command is valid before changing the color based on arguments
//            if (ds_map_exists(global.commandDetails, command)) {
//                // Extract and validate array arguments
//                var argsString = string_copy(inputText, argsStart + 1, argsEnd - argsStart - 1);
//                var isValidArray = true;

//                if (string_pos("[", argsString) > 0 && string_pos("]", argsString) > 0) {
//                    var arrayStart = string_pos("[", argsString);
//                    var arrayEnd = string_pos("]", argsString);
//                    var arrayString = string_copy(argsString, arrayStart + 1, arrayEnd - arrayStart - 1);
//                    var arrayParams = string_split(arrayString, ",");

//                    // Check if each element is a valid parameter
//                    for (var i = 0; i < array_length(arrayParams); i++) {
//                        if (string_trim(arrayParams[i]) == "") {
//                            isValidArray = false;
//                            break;
//                        }
//                    }
//                }

//                // Call `handleCommandWithArgs` to manage the text color based on command validation
//                if (isValidArray) {
//                    global.textColor = handleCommandWithArgs(argsStart, argsEnd, command, hasPermission);
//                } else {
//                    global.textColor = c_pink; // Set to pink if the array is invalid
//                }
//            } else {
//                // If the command is not valid, do not turn it aqua just for typing '('
//                global.textColor = c_pink;  // Set to pink as the command is not recognized
//            }
//        }
//    } else {
//        global.textColor = global.defaultTextColor;
//    }
//}










Script: load_actions
File: load_actions.gml
Code:
function load_actions() {
    var filePath = "Actions.txt";
    if (!file_exists(filePath)) {
        handleDebugMessage("Actions.txt not found. Starting with an empty actions map.", true);
        return;
    }
    var file = file_text_open_read(filePath);
    while (!file_text_eof(file)) {
        var line = file_text_read_string(file);
        file_text_readln(file);
        if (string_length(line) == 0) continue;
        
        var parts = string_split(line, "|||", false, 2);
        if (array_length(parts) < 2) {
            handleDebugMessage("Error loading action. Malformed line: " + line, true);
            continue;
        }
        
        var actionName = string_trim(parts[0]);
        var encodedCommand = parts[1];
        
        ds_map_set(global.actionDetails, actionName, encodedCommand);
        
        handleDebugMessage("Loaded action: " + actionName + ", Encoded Command: " + encodedCommand, true);
    }
    file_text_close(file);
    handleDebugMessage("Actions loaded successfully from Actions.txt.", true);
}

Script: save_actions
File: save_actions.gml
Code:
function save_actions() {
    if (ds_map_size(global.actionDetails) == 0) {
        handleDebugMessage("No actions to save.", true);
        return;
    }
    
    var file = file_text_open_write("Actions.txt");
    var actionKey = ds_map_find_first(global.actionDetails);
    
    while (!is_undefined(actionKey)) {
        var encodedCommand = ds_map_find_value(global.actionDetails, actionKey);
        var line = actionKey + "|||" + encodedCommand;
        file_text_write_string(file, line);
        file_text_writeln(file);
        handleDebugMessage("Saving action: " + line, true);
        actionKey = ds_map_find_next(global.actionDetails, actionKey);
    }
    
    file_text_close(file);
    handleDebugMessage("Actions saved successfully to Actions.txt.", true);
}
//function save_actions() {
//    if (ds_map_size(global.actionDetails) == 0) {
//        handleDebugMessage("No actions to save.", true);
//        return;
//    }
    
//    var file = file_text_open_write("Actions.txt");
//    var actionKey = ds_map_find_first(global.actionDetails);
    
//    while (!is_undefined(actionKey)) {
//        var actionData = ds_map_find_value(global.actionDetails, actionKey);
//        var command = actionData[? "command"];
//        var parameters = actionData[? "parameters"];
        
//        var paramString = "[";
//        for (var i = 0; i < array_length(parameters); i++) {
//            if (is_string(parameters[i])) {
//                paramString += "\"" + parameters[i] + "\"";
//            } else {
//                paramString += string(parameters[i]);
//            }
//            if (i < array_length(parameters) - 1) {
//                paramString += ",";
//            }
//        }
//        paramString += "]";
        
//        file_text_write_string(file, actionKey + "," + command + "," + paramString);
//        file_text_writeln(file);
//        actionKey = ds_map_find_next(global.actionDetails, actionKey);
//    }
    
//    file_text_close(file);
//    handleDebugMessage("Actions saved successfully to Actions.txt.", true);
//}



Script: handle_choice_selection
File: handle_choice_selection.gml
Code:
/// @function handle_choice_selection(action_name)
/// @param {string} action_name The name of the action to execute
function handle_choice_selection(action_name) {
    // Clean up data structures before executing the action
    if (ds_exists(hover_progress, ds_type_map)) {
        ds_map_destroy(hover_progress);
    }
    if (ds_exists(hover_scale, ds_type_map)) {
        ds_map_destroy(hover_scale);
    }
    
    // Check if the action exists in our action list
    if (ds_map_exists(global.actionDetails, action_name)) {
        execute_command("execute_action(" + action_name + ")");
    } else {
        // If it's not an action, it might be a direct command
        execute_command(action_name);
    }
    
    // Destroy the chat bubble after selection
    instance_destroy();
}

Script: string_split not found in the expected directories.

Script: logToFile
File: LogToFile.gml
Code:
    // Function to handle file logging
    function logToFile(filePath, message) {
        var file;
        if (file_exists(filePath)) {
            file = file_text_open_append(filePath);
        } else {
            file = file_text_open_write(filePath);
        }
        file_text_write_string(file, message);
        file_text_close(file);
    }

== Related Logs ==

Log: SessionLog_45501.16
Content:
07/27/24 22:45:32: Loaded action: SaveGameNow, Encoded Command: InNhdmVfZ2FtZShbXSki
07/27/24 22:45:32: Loaded action: MoreChoices3, Encoded Command: ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJEaXZpbmUgRG9tYWluXCIsXCJHb3RvRGl2aW5lRG9tYWluXCJdLFtcIllldG9waWFcIixcIkdvdG9ZZXRvcGlhXCJdLFtcIktpbmcncyAgS2luZ2RvbVwiLFwiR290b0tpbmdzS2luZ2RvbVwiXSxbXCJNb3JlXCIsXCJNb3JlQ2hvaWNlczRcIl1dXSki
07/27/24 22:45:32: Loaded action: GotoKingsKingdom, Encoded Command: ImdvdG9fcGxhbmV0KFtcIktpbmdzIEtpbmdkb21cIl0pIg==
07/27/24 22:45:32: Loaded action: MainMenuChoices2, Encoded Command: ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJFYXJ0aFwiLFwiR290b0VhcnRoXCJdLFtcIlVuaXZlcnNlICBDaXR5XCIsXCJHb3RvVW5pdmVyc2VDaXR5XCJdLFtcIkZhbnRhc2lhXCIsXCJHb3RvRmFudGFzaWFcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMxXCJdXV0pIg==
07/27/24 22:45:32: Loaded action: MoreChoices1, Encoded Command: ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJMYW5kIG9mIEx1Y3lcIixcIkdvdG9MYW5kT2ZMdWN5XCJdLFtcIlBsYWNlIG9mIFBhYmxvXCIsXCJHb3RvUGxhY2VPZlBhYmxvXCJdLFtcIkdob3N0ICBUb3duXCIsXCJHb3RvR2hvc3RUb3duXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzMlwiXV1dKSI=
07/27/24 22:45:32: Loaded action: GotoDivineDomain, Encoded Command: ImdvdG9fcGxhbmV0KFtcIkRpdmluZSBEb21haW5cIl0pIg==
07/27/24 22:45:32: Loaded action: GotoTheEndonda, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlRoZSBFbmRvbmRhXCJdKSI=
07/27/24 22:45:32: Loaded action: GotoUniverseCity, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlVuaXZlcnNlIENpdHlcIl0pIg==
07/27/24 22:45:32: Loaded action: GotoLandOfLucy, Encoded Command: ImdvdG9fcGxhbmV0KFtcIkxhbmQgb2YgTHVjeVwiXSki
07/27/24 22:45:32: Loaded action: GotoPlaceOfPablo, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlBsYWNlIG9mIFBhYmxvXCJdKSI=
07/27/24 22:45:32: Loaded action: GotoTheIcyHeart, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlRoZSBJY3kgSGVhcnRcIl0pIg==
07/27/24 22:45:32: Loaded action: GotoGhostTown, Encoded Command: ImdvdG9fcGxhbmV0KFtcIkdob3N0IFRvd25cIl0pIg==
07/27/24 22:45:32: Loaded action: MainMenuChoices, Encoded Command: ImNoYXRfYnViYmxlKFtcIldoYXQgd291bGQgeW91IGxpa2UgdG8gZG8/XCIsXCJ5ZWFuY2F0XCIsW1tcIkdvIHRvIEVhcnRoXCIsXCJHb3RvRWFydGhcIl0sW1wiTGV2ZWwgVXBcIixcIkxldmVsVXBPbmNlXCJdLFtcIlNhdmUgIEdhbWVcIixcIlNhdmVHYW1lTm93XCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:45:32: Loaded action: LevelUpOnce, Encoded Command: ImxldmVsX3VwKFsxXSki
07/27/24 22:45:32: Loaded action: GotoTheGoldMines, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlRoZSBHb2xkIE1pbmVzXCJdKSI=
07/27/24 22:45:32: Loaded action: MoreChoices2, Encoded Command: ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJWdWx0dXJlcycgVmFsbGV5XCIsXCJHb3RvVnVsdHVyZXNWYWxsZXlcIl0sW1wiVGhlIEVuZG9uZGFcIixcIkdvdG9UaGVFbmRvbmRhXCJdLFtcIlN0b3JteSAgU2FuZHNcIixcIkdvdG9TdG9ybXlTYW5kc1wiXSxbXCJNb3JlXCIsXCJNb3JlQ2hvaWNlczNcIl1dXSki
07/27/24 22:45:32: Loaded action: MoreChoices4, Encoded Command: ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJUaGUgSWN5IEhlYXJ0XCIsXCJHb3RvVGhlSWN5SGVhcnRcIl0sW1wiVGhlIEdvbGQgIE1pbmVzXCIsXCJHb3RvVGhlR29sZE1pbmVzXCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:45:32: Loaded action: GotoVulturesValley, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlZ1bHR1cmVzICBWYWxsZXlcIl0pIg==
07/27/24 22:45:32: Loaded action: GotoEarth, Encoded Command: ImdvdG9fcGxhbmV0KFtcIkVhcnRoXCJdKSI=
07/27/24 22:45:32: Loaded action: GotoStormySands, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlN0b3JteSBTYW5kc1wiXSki
07/27/24 22:45:32: Loaded action: GotoFantasia, Encoded Command: ImdvdG9fcGxhbmV0KFtcIkZhbnRhc2lhXCJdKSI=
07/27/24 22:45:32: Loaded action: GotoYetopia, Encoded Command: ImdvdG9fcGxhbmV0KFtcIllldG9waWFcIl0pIg==
07/27/24 22:45:32: Actions loaded successfully from Actions.txt.
07/27/24 22:45:32: [Client] Failed to reconnect to server. Will try again...
07/27/24 22:45:43: Executing command: add_action(MoreChoices2,chat_bubble,["Where would you like to go?","yeancat",[["Vultures Valley","GotoVulturesValley"],["The Endonda","GotoTheEndonda"],["Stormy Sands","GotoStormySands"],["More","MoreChoices3"]]])
07/27/24 22:45:43: Processed command: add_action(MoreChoices2,chat_bubble,["Where would you like to go?","yeancat",[["Vultures Valley","GotoVulturesValley"],["The Endonda","GotoTheEndonda"],["Stormy Sands","GotoStormySands"],["More","MoreChoices3"]]])
07/27/24 22:45:43: scr_add_action - Raw inputs:
07/27/24 22:45:43: Name: MoreChoices2
07/27/24 22:45:43: Command: chat_bubble
07/27/24 22:45:43: Parameters: ["Where would you like to go?","yeancat",[["Vultures Valley","GotoVulturesValley"],["The Endonda","GotoTheEndonda"],["Stormy Sands","GotoStormySands"],["More","MoreChoices3"]]]
07/27/24 22:45:43: Action 'MoreChoices2' added/updated successfully.
07/27/24 22:45:43: Encoded Command: ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJWdWx0dXJlcyBWYWxsZXlcIixcIkdvdG9WdWx0dXJlc1ZhbGxleVwiXSxbXCJUaGUgRW5kb25kYVwiLFwiR290b1RoZUVuZG9uZGFcIl0sW1wiU3Rvcm15IFNhbmRzXCIsXCJHb3RvU3Rvcm15U2FuZHNcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMzXCJdXV0pIg==
07/27/24 22:45:43: Saving action: SaveGameNow|||InNhdmVfZ2FtZShbXSki
07/27/24 22:45:43: Saving action: MoreChoices3|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJEaXZpbmUgRG9tYWluXCIsXCJHb3RvRGl2aW5lRG9tYWluXCJdLFtcIllldG9waWFcIixcIkdvdG9ZZXRvcGlhXCJdLFtcIktpbmcncyAgS2luZ2RvbVwiLFwiR290b0tpbmdzS2luZ2RvbVwiXSxbXCJNb3JlXCIsXCJNb3JlQ2hvaWNlczRcIl1dXSki
07/27/24 22:45:43: Saving action: GotoKingsKingdom|||ImdvdG9fcGxhbmV0KFtcIktpbmdzIEtpbmdkb21cIl0pIg==
07/27/24 22:45:43: Saving action: MainMenuChoices2|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJFYXJ0aFwiLFwiR290b0VhcnRoXCJdLFtcIlVuaXZlcnNlICBDaXR5XCIsXCJHb3RvVW5pdmVyc2VDaXR5XCJdLFtcIkZhbnRhc2lhXCIsXCJHb3RvRmFudGFzaWFcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMxXCJdXV0pIg==
07/27/24 22:45:43: Saving action: MoreChoices1|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJMYW5kIG9mIEx1Y3lcIixcIkdvdG9MYW5kT2ZMdWN5XCJdLFtcIlBsYWNlIG9mIFBhYmxvXCIsXCJHb3RvUGxhY2VPZlBhYmxvXCJdLFtcIkdob3N0ICBUb3duXCIsXCJHb3RvR2hvc3RUb3duXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzMlwiXV1dKSI=
07/27/24 22:45:43: Saving action: GotoDivineDomain|||ImdvdG9fcGxhbmV0KFtcIkRpdmluZSBEb21haW5cIl0pIg==
07/27/24 22:45:43: Saving action: GotoTheEndonda|||ImdvdG9fcGxhbmV0KFtcIlRoZSBFbmRvbmRhXCJdKSI=
07/27/24 22:45:43: Saving action: GotoUniverseCity|||ImdvdG9fcGxhbmV0KFtcIlVuaXZlcnNlIENpdHlcIl0pIg==
07/27/24 22:45:43: Saving action: GotoLandOfLucy|||ImdvdG9fcGxhbmV0KFtcIkxhbmQgb2YgTHVjeVwiXSki
07/27/24 22:45:43: Saving action: GotoPlaceOfPablo|||ImdvdG9fcGxhbmV0KFtcIlBsYWNlIG9mIFBhYmxvXCJdKSI=
07/27/24 22:45:43: Saving action: GotoTheIcyHeart|||ImdvdG9fcGxhbmV0KFtcIlRoZSBJY3kgSGVhcnRcIl0pIg==
07/27/24 22:45:43: Saving action: GotoGhostTown|||ImdvdG9fcGxhbmV0KFtcIkdob3N0IFRvd25cIl0pIg==
07/27/24 22:45:43: Saving action: MainMenuChoices|||ImNoYXRfYnViYmxlKFtcIldoYXQgd291bGQgeW91IGxpa2UgdG8gZG8/XCIsXCJ5ZWFuY2F0XCIsW1tcIkdvIHRvIEVhcnRoXCIsXCJHb3RvRWFydGhcIl0sW1wiTGV2ZWwgVXBcIixcIkxldmVsVXBPbmNlXCJdLFtcIlNhdmUgIEdhbWVcIixcIlNhdmVHYW1lTm93XCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:45:43: Saving action: LevelUpOnce|||ImxldmVsX3VwKFsxXSki
07/27/24 22:45:43: Saving action: GotoTheGoldMines|||ImdvdG9fcGxhbmV0KFtcIlRoZSBHb2xkIE1pbmVzXCJdKSI=
07/27/24 22:45:43: Saving action: MoreChoices2|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJWdWx0dXJlcyBWYWxsZXlcIixcIkdvdG9WdWx0dXJlc1ZhbGxleVwiXSxbXCJUaGUgRW5kb25kYVwiLFwiR290b1RoZUVuZG9uZGFcIl0sW1wiU3Rvcm15IFNhbmRzXCIsXCJHb3RvU3Rvcm15U2FuZHNcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMzXCJdXV0pIg==
07/27/24 22:45:43: Saving action: MoreChoices4|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJUaGUgSWN5IEhlYXJ0XCIsXCJHb3RvVGhlSWN5SGVhcnRcIl0sW1wiVGhlIEdvbGQgIE1pbmVzXCIsXCJHb3RvVGhlR29sZE1pbmVzXCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:45:43: Saving action: GotoVulturesValley|||ImdvdG9fcGxhbmV0KFtcIlZ1bHR1cmVzICBWYWxsZXlcIl0pIg==
07/27/24 22:45:43: Saving action: GotoEarth|||ImdvdG9fcGxhbmV0KFtcIkVhcnRoXCJdKSI=
07/27/24 22:45:44: Saving action: GotoStormySands|||ImdvdG9fcGxhbmV0KFtcIlN0b3JteSBTYW5kc1wiXSki
07/27/24 22:45:44: Saving action: GotoFantasia|||ImdvdG9fcGxhbmV0KFtcIkZhbnRhc2lhXCJdKSI=
07/27/24 22:45:44: Saving action: GotoYetopia|||ImdvdG9fcGxhbmV0KFtcIllldG9waWFcIl0pIg==
07/27/24 22:45:44: Actions saved successfully to Actions.txt.
07/27/24 22:45:51: Executing command: add_action(MoreChoices3,chat_bubble,["Where would you like to go?","yeancat",[["Divine Domain","GotoDivineDomain"],["Yetopia","GotoYetopia"],["Kings  Kingdom","GotoKingsKingdom"],["More","MoreChoices4"]]])
07/27/24 22:45:51: Processed command: add_action(MoreChoices3,chat_bubble,["Where would you like to go?","yeancat",[["Divine Domain","GotoDivineDomain"],["Yetopia","GotoYetopia"],["Kings  Kingdom","GotoKingsKingdom"],["More","MoreChoices4"]]])
07/27/24 22:45:51: scr_add_action - Raw inputs:
07/27/24 22:45:51: Name: MoreChoices3
07/27/24 22:45:51: Command: chat_bubble
07/27/24 22:45:51: Parameters: ["Where would you like to go?","yeancat",[["Divine Domain","GotoDivineDomain"],["Yetopia","GotoYetopia"],["Kings  Kingdom","GotoKingsKingdom"],["More","MoreChoices4"]]]
07/27/24 22:45:51: Action 'MoreChoices3' added/updated successfully.
07/27/24 22:45:51: Encoded Command: ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJEaXZpbmUgRG9tYWluXCIsXCJHb3RvRGl2aW5lRG9tYWluXCJdLFtcIllldG9waWFcIixcIkdvdG9ZZXRvcGlhXCJdLFtcIktpbmdzICBLaW5nZG9tXCIsXCJHb3RvS2luZ3NLaW5nZG9tXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzNFwiXV1dKSI=
07/27/24 22:45:51: Saving action: SaveGameNow|||InNhdmVfZ2FtZShbXSki
07/27/24 22:45:51: Saving action: MoreChoices3|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJEaXZpbmUgRG9tYWluXCIsXCJHb3RvRGl2aW5lRG9tYWluXCJdLFtcIllldG9waWFcIixcIkdvdG9ZZXRvcGlhXCJdLFtcIktpbmdzICBLaW5nZG9tXCIsXCJHb3RvS2luZ3NLaW5nZG9tXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzNFwiXV1dKSI=
07/27/24 22:45:51: Saving action: GotoKingsKingdom|||ImdvdG9fcGxhbmV0KFtcIktpbmdzIEtpbmdkb21cIl0pIg==
07/27/24 22:45:51: Saving action: MainMenuChoices2|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJFYXJ0aFwiLFwiR290b0VhcnRoXCJdLFtcIlVuaXZlcnNlICBDaXR5XCIsXCJHb3RvVW5pdmVyc2VDaXR5XCJdLFtcIkZhbnRhc2lhXCIsXCJHb3RvRmFudGFzaWFcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMxXCJdXV0pIg==
07/27/24 22:45:51: Saving action: MoreChoices1|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJMYW5kIG9mIEx1Y3lcIixcIkdvdG9MYW5kT2ZMdWN5XCJdLFtcIlBsYWNlIG9mIFBhYmxvXCIsXCJHb3RvUGxhY2VPZlBhYmxvXCJdLFtcIkdob3N0ICBUb3duXCIsXCJHb3RvR2hvc3RUb3duXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzMlwiXV1dKSI=
07/27/24 22:45:51: Saving action: GotoDivineDomain|||ImdvdG9fcGxhbmV0KFtcIkRpdmluZSBEb21haW5cIl0pIg==
07/27/24 22:45:51: Saving action: GotoTheEndonda|||ImdvdG9fcGxhbmV0KFtcIlRoZSBFbmRvbmRhXCJdKSI=
07/27/24 22:45:51: Saving action: GotoUniverseCity|||ImdvdG9fcGxhbmV0KFtcIlVuaXZlcnNlIENpdHlcIl0pIg==
07/27/24 22:45:51: Saving action: GotoLandOfLucy|||ImdvdG9fcGxhbmV0KFtcIkxhbmQgb2YgTHVjeVwiXSki
07/27/24 22:45:51: Saving action: GotoPlaceOfPablo|||ImdvdG9fcGxhbmV0KFtcIlBsYWNlIG9mIFBhYmxvXCJdKSI=
07/27/24 22:45:51: Saving action: GotoTheIcyHeart|||ImdvdG9fcGxhbmV0KFtcIlRoZSBJY3kgSGVhcnRcIl0pIg==
07/27/24 22:45:51: Saving action: GotoGhostTown|||ImdvdG9fcGxhbmV0KFtcIkdob3N0IFRvd25cIl0pIg==
07/27/24 22:45:51: Saving action: MainMenuChoices|||ImNoYXRfYnViYmxlKFtcIldoYXQgd291bGQgeW91IGxpa2UgdG8gZG8/XCIsXCJ5ZWFuY2F0XCIsW1tcIkdvIHRvIEVhcnRoXCIsXCJHb3RvRWFydGhcIl0sW1wiTGV2ZWwgVXBcIixcIkxldmVsVXBPbmNlXCJdLFtcIlNhdmUgIEdhbWVcIixcIlNhdmVHYW1lTm93XCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:45:51: Saving action: LevelUpOnce|||ImxldmVsX3VwKFsxXSki
07/27/24 22:45:51: Saving action: GotoTheGoldMines|||ImdvdG9fcGxhbmV0KFtcIlRoZSBHb2xkIE1pbmVzXCJdKSI=
07/27/24 22:45:51: Saving action: MoreChoices2|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJWdWx0dXJlcyBWYWxsZXlcIixcIkdvdG9WdWx0dXJlc1ZhbGxleVwiXSxbXCJUaGUgRW5kb25kYVwiLFwiR290b1RoZUVuZG9uZGFcIl0sW1wiU3Rvcm15IFNhbmRzXCIsXCJHb3RvU3Rvcm15U2FuZHNcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMzXCJdXV0pIg==
07/27/24 22:45:51: Saving action: MoreChoices4|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJUaGUgSWN5IEhlYXJ0XCIsXCJHb3RvVGhlSWN5SGVhcnRcIl0sW1wiVGhlIEdvbGQgIE1pbmVzXCIsXCJHb3RvVGhlR29sZE1pbmVzXCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:45:51: Saving action: GotoVulturesValley|||ImdvdG9fcGxhbmV0KFtcIlZ1bHR1cmVzICBWYWxsZXlcIl0pIg==
07/27/24 22:45:51: Saving action: GotoEarth|||ImdvdG9fcGxhbmV0KFtcIkVhcnRoXCJdKSI=
07/27/24 22:45:51: Saving action: GotoStormySands|||ImdvdG9fcGxhbmV0KFtcIlN0b3JteSBTYW5kc1wiXSki
07/27/24 22:45:51: Saving action: GotoFantasia|||ImdvdG9fcGxhbmV0KFtcIkZhbnRhc2lhXCJdKSI=
07/27/24 22:45:51: Saving action: GotoYetopia|||ImdvdG9fcGxhbmV0KFtcIllldG9waWFcIl0pIg==
07/27/24 22:45:51: Actions saved successfully to Actions.txt.
07/27/24 22:46:08: Executing command: execute_action(MainMenuChoices2)
07/27/24 22:46:08: Processed command: execute_action(MainMenuChoices2)
07/27/24 22:46:08: execute_action - Action Name: MainMenuChoices2
07/27/24 22:46:08: Executing action: MainMenuChoices2
07/27/24 22:46:08: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Earth","GotoEarth"],["Universe  City","GotoUniverseCity"],["Fantasia","GotoFantasia"],["More","MoreChoices1"]]])
07/27/24 22:46:08: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Earth","GotoEarth"],["Universe  City","GotoUniverseCity"],["Fantasia","GotoFantasia"],["More","MoreChoices1"]]
07/27/24 22:46:08: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:46:11: Executing command: execute_action(MoreChoices1)
07/27/24 22:46:11: Processed command: execute_action(MoreChoices1)
07/27/24 22:46:11: execute_action - Action Name: MoreChoices1
07/27/24 22:46:11: Executing action: MoreChoices1
07/27/24 22:46:11: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Land of Lucy","GotoLandOfLucy"],["Place of Pablo","GotoPlaceOfPablo"],["Ghost  Town","GotoGhostTown"],["More","MoreChoices2"]]])
07/27/24 22:46:11: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Land of Lucy","GotoLandOfLucy"],["Place of Pablo","GotoPlaceOfPablo"],["Ghost  Town","GotoGhostTown"],["More","MoreChoices2"]]
07/27/24 22:46:11: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:46:13: Executing command: execute_action(MoreChoices2)
07/27/24 22:46:13: Processed command: execute_action(MoreChoices2)
07/27/24 22:46:13: execute_action - Action Name: MoreChoices2
07/27/24 22:46:13: Executing action: MoreChoices2
07/27/24 22:46:13: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Vultures Valley","GotoVulturesValley"],["The Endonda","GotoTheEndonda"],["Stormy Sands","GotoStormySands"],["More","MoreChoices3"]]])
07/27/24 22:46:13: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Vultures Valley","GotoVulturesValley"],["The Endonda","GotoTheEndonda"],["Stormy Sands","GotoStormySands"],["More","MoreChoices3"]]
07/27/24 22:46:13: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:46:14: Executing command: execute_action(GotoVulturesValley)
07/27/24 22:46:14: Processed command: execute_action(GotoVulturesValley)
07/27/24 22:46:14: execute_action - Action Name: GotoVulturesValley
07/27/24 22:46:14: Executing action: GotoVulturesValley
07/27/24 22:46:14: Decoded Command: goto_planet(["Vultures  Valley"])
07/27/24 22:50:54: Loaded action: SaveGameNow, Encoded Command: InNhdmVfZ2FtZShbXSki
07/27/24 22:50:54: Loaded action: MoreChoices3, Encoded Command: ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJEaXZpbmUgRG9tYWluXCIsXCJHb3RvRGl2aW5lRG9tYWluXCJdLFtcIllldG9waWFcIixcIkdvdG9ZZXRvcGlhXCJdLFtcIktpbmdzICBLaW5nZG9tXCIsXCJHb3RvS2luZ3NLaW5nZG9tXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzNFwiXV1dKSI=
07/27/24 22:50:54: Loaded action: GotoKingsKingdom, Encoded Command: ImdvdG9fcGxhbmV0KFtcIktpbmdzIEtpbmdkb21cIl0pIg==
07/27/24 22:50:54: Loaded action: MainMenuChoices2, Encoded Command: ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJFYXJ0aFwiLFwiR290b0VhcnRoXCJdLFtcIlVuaXZlcnNlICBDaXR5XCIsXCJHb3RvVW5pdmVyc2VDaXR5XCJdLFtcIkZhbnRhc2lhXCIsXCJHb3RvRmFudGFzaWFcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMxXCJdXV0pIg==
07/27/24 22:50:54: Loaded action: MoreChoices1, Encoded Command: ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJMYW5kIG9mIEx1Y3lcIixcIkdvdG9MYW5kT2ZMdWN5XCJdLFtcIlBsYWNlIG9mIFBhYmxvXCIsXCJHb3RvUGxhY2VPZlBhYmxvXCJdLFtcIkdob3N0ICBUb3duXCIsXCJHb3RvR2hvc3RUb3duXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzMlwiXV1dKSI=
07/27/24 22:50:54: Loaded action: GotoDivineDomain, Encoded Command: ImdvdG9fcGxhbmV0KFtcIkRpdmluZSBEb21haW5cIl0pIg==
07/27/24 22:50:54: Loaded action: GotoTheEndonda, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlRoZSBFbmRvbmRhXCJdKSI=
07/27/24 22:50:54: Loaded action: GotoUniverseCity, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlVuaXZlcnNlIENpdHlcIl0pIg==
07/27/24 22:50:54: Loaded action: GotoLandOfLucy, Encoded Command: ImdvdG9fcGxhbmV0KFtcIkxhbmQgb2YgTHVjeVwiXSki
07/27/24 22:50:54: Loaded action: GotoPlaceOfPablo, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlBsYWNlIG9mIFBhYmxvXCJdKSI=
07/27/24 22:50:54: Loaded action: GotoTheIcyHeart, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlRoZSBJY3kgSGVhcnRcIl0pIg==
07/27/24 22:50:54: Loaded action: GotoGhostTown, Encoded Command: ImdvdG9fcGxhbmV0KFtcIkdob3N0IFRvd25cIl0pIg==
07/27/24 22:50:54: Loaded action: MainMenuChoices, Encoded Command: ImNoYXRfYnViYmxlKFtcIldoYXQgd291bGQgeW91IGxpa2UgdG8gZG8/XCIsXCJ5ZWFuY2F0XCIsW1tcIkdvIHRvIEVhcnRoXCIsXCJHb3RvRWFydGhcIl0sW1wiTGV2ZWwgVXBcIixcIkxldmVsVXBPbmNlXCJdLFtcIlNhdmUgIEdhbWVcIixcIlNhdmVHYW1lTm93XCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:50:54: Loaded action: LevelUpOnce, Encoded Command: ImxldmVsX3VwKFsxXSki
07/27/24 22:50:54: Loaded action: GotoTheGoldMines, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlRoZSBHb2xkIE1pbmVzXCJdKSI=
07/27/24 22:50:54: Loaded action: MoreChoices2, Encoded Command: ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJWdWx0dXJlcyBWYWxsZXlcIixcIkdvdG9WdWx0dXJlc1ZhbGxleVwiXSxbXCJUaGUgRW5kb25kYVwiLFwiR290b1RoZUVuZG9uZGFcIl0sW1wiU3Rvcm15IFNhbmRzXCIsXCJHb3RvU3Rvcm15U2FuZHNcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMzXCJdXV0pIg==
07/27/24 22:50:54: Loaded action: MoreChoices4, Encoded Command: ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJUaGUgSWN5IEhlYXJ0XCIsXCJHb3RvVGhlSWN5SGVhcnRcIl0sW1wiVGhlIEdvbGQgIE1pbmVzXCIsXCJHb3RvVGhlR29sZE1pbmVzXCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:50:54: Loaded action: GotoVulturesValley, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlZ1bHR1cmVzICBWYWxsZXlcIl0pIg==
07/27/24 22:50:54: Loaded action: GotoEarth, Encoded Command: ImdvdG9fcGxhbmV0KFtcIkVhcnRoXCJdKSI=
07/27/24 22:50:54: Loaded action: GotoStormySands, Encoded Command: ImdvdG9fcGxhbmV0KFtcIlN0b3JteSBTYW5kc1wiXSki
07/27/24 22:50:54: Loaded action: GotoFantasia, Encoded Command: ImdvdG9fcGxhbmV0KFtcIkZhbnRhc2lhXCJdKSI=
07/27/24 22:50:54: Loaded action: GotoYetopia, Encoded Command: ImdvdG9fcGxhbmV0KFtcIllldG9waWFcIl0pIg==
07/27/24 22:50:54: Actions loaded successfully from Actions.txt.
07/27/24 22:50:54: [Client] Failed to reconnect to server. Will try again...
07/27/24 22:51:17: Executing command: execute_action(GotoVulturesValley)
07/27/24 22:51:17: Processed command: execute_action(GotoVulturesValley)
07/27/24 22:51:17: execute_action - Action Name: GotoVulturesValley
07/27/24 22:51:17: Executing action: GotoVulturesValley
07/27/24 22:51:17: Decoded Command: goto_planet(["Vultures  Valley"])
07/27/24 22:51:17: Invalid Planet Name: Vultures  Valley
07/27/24 22:51:32: Executing command: goto_planet(Vultures Valley)
07/27/24 22:51:32: Processed command: goto_planet(Vultures Valley)
07/27/24 22:51:32: Teleported to Vultures Valley.
07/27/24 22:52:00: Executing command: add_action(GotoVulturesValley,goto_planet,["Vultures  Valley"])
07/27/24 22:52:00: Processed command: add_action(GotoVulturesValley,goto_planet,["Vultures  Valley"])
07/27/24 22:52:00: scr_add_action - Raw inputs:
07/27/24 22:52:00: Name: GotoVulturesValley
07/27/24 22:52:00: Command: goto_planet
07/27/24 22:52:00: Parameters: ["Vultures  Valley"]
07/27/24 22:52:00: Action 'GotoVulturesValley' added/updated successfully.
07/27/24 22:52:00: Encoded Command: ImdvdG9fcGxhbmV0KFtcIlZ1bHR1cmVzICBWYWxsZXlcIl0pIg==
07/27/24 22:52:00: Saving action: SaveGameNow|||InNhdmVfZ2FtZShbXSki
07/27/24 22:52:00: Saving action: MoreChoices3|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJEaXZpbmUgRG9tYWluXCIsXCJHb3RvRGl2aW5lRG9tYWluXCJdLFtcIllldG9waWFcIixcIkdvdG9ZZXRvcGlhXCJdLFtcIktpbmdzICBLaW5nZG9tXCIsXCJHb3RvS2luZ3NLaW5nZG9tXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzNFwiXV1dKSI=
07/27/24 22:52:00: Saving action: GotoKingsKingdom|||ImdvdG9fcGxhbmV0KFtcIktpbmdzIEtpbmdkb21cIl0pIg==
07/27/24 22:52:00: Saving action: MainMenuChoices2|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJFYXJ0aFwiLFwiR290b0VhcnRoXCJdLFtcIlVuaXZlcnNlICBDaXR5XCIsXCJHb3RvVW5pdmVyc2VDaXR5XCJdLFtcIkZhbnRhc2lhXCIsXCJHb3RvRmFudGFzaWFcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMxXCJdXV0pIg==
07/27/24 22:52:00: Saving action: MoreChoices1|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJMYW5kIG9mIEx1Y3lcIixcIkdvdG9MYW5kT2ZMdWN5XCJdLFtcIlBsYWNlIG9mIFBhYmxvXCIsXCJHb3RvUGxhY2VPZlBhYmxvXCJdLFtcIkdob3N0ICBUb3duXCIsXCJHb3RvR2hvc3RUb3duXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzMlwiXV1dKSI=
07/27/24 22:52:00: Saving action: GotoDivineDomain|||ImdvdG9fcGxhbmV0KFtcIkRpdmluZSBEb21haW5cIl0pIg==
07/27/24 22:52:00: Saving action: GotoTheEndonda|||ImdvdG9fcGxhbmV0KFtcIlRoZSBFbmRvbmRhXCJdKSI=
07/27/24 22:52:00: Saving action: GotoUniverseCity|||ImdvdG9fcGxhbmV0KFtcIlVuaXZlcnNlIENpdHlcIl0pIg==
07/27/24 22:52:00: Saving action: GotoLandOfLucy|||ImdvdG9fcGxhbmV0KFtcIkxhbmQgb2YgTHVjeVwiXSki
07/27/24 22:52:00: Saving action: GotoPlaceOfPablo|||ImdvdG9fcGxhbmV0KFtcIlBsYWNlIG9mIFBhYmxvXCJdKSI=
07/27/24 22:52:00: Saving action: GotoTheIcyHeart|||ImdvdG9fcGxhbmV0KFtcIlRoZSBJY3kgSGVhcnRcIl0pIg==
07/27/24 22:52:00: Saving action: GotoGhostTown|||ImdvdG9fcGxhbmV0KFtcIkdob3N0IFRvd25cIl0pIg==
07/27/24 22:52:00: Saving action: MainMenuChoices|||ImNoYXRfYnViYmxlKFtcIldoYXQgd291bGQgeW91IGxpa2UgdG8gZG8/XCIsXCJ5ZWFuY2F0XCIsW1tcIkdvIHRvIEVhcnRoXCIsXCJHb3RvRWFydGhcIl0sW1wiTGV2ZWwgVXBcIixcIkxldmVsVXBPbmNlXCJdLFtcIlNhdmUgIEdhbWVcIixcIlNhdmVHYW1lTm93XCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:52:00: Saving action: LevelUpOnce|||ImxldmVsX3VwKFsxXSki
07/27/24 22:52:00: Saving action: GotoTheGoldMines|||ImdvdG9fcGxhbmV0KFtcIlRoZSBHb2xkIE1pbmVzXCJdKSI=
07/27/24 22:52:00: Saving action: MoreChoices2|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJWdWx0dXJlcyBWYWxsZXlcIixcIkdvdG9WdWx0dXJlc1ZhbGxleVwiXSxbXCJUaGUgRW5kb25kYVwiLFwiR290b1RoZUVuZG9uZGFcIl0sW1wiU3Rvcm15IFNhbmRzXCIsXCJHb3RvU3Rvcm15U2FuZHNcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMzXCJdXV0pIg==
07/27/24 22:52:00: Saving action: MoreChoices4|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJUaGUgSWN5IEhlYXJ0XCIsXCJHb3RvVGhlSWN5SGVhcnRcIl0sW1wiVGhlIEdvbGQgIE1pbmVzXCIsXCJHb3RvVGhlR29sZE1pbmVzXCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:52:00: Saving action: GotoVulturesValley|||ImdvdG9fcGxhbmV0KFtcIlZ1bHR1cmVzICBWYWxsZXlcIl0pIg==
07/27/24 22:52:00: Saving action: GotoEarth|||ImdvdG9fcGxhbmV0KFtcIkVhcnRoXCJdKSI=
07/27/24 22:52:00: Saving action: GotoStormySands|||ImdvdG9fcGxhbmV0KFtcIlN0b3JteSBTYW5kc1wiXSki
07/27/24 22:52:00: Saving action: GotoFantasia|||ImdvdG9fcGxhbmV0KFtcIkZhbnRhc2lhXCJdKSI=
07/27/24 22:52:00: Saving action: GotoYetopia|||ImdvdG9fcGxhbmV0KFtcIllldG9waWFcIl0pIg==
07/27/24 22:52:00: Actions saved successfully to Actions.txt.
07/27/24 22:52:03: Executing command: execute_action(GotoVulturesValley)
07/27/24 22:52:03: Processed command: execute_action(GotoVulturesValley)
07/27/24 22:52:03: execute_action - Action Name: GotoVulturesValley
07/27/24 22:52:03: Executing action: GotoVulturesValley
07/27/24 22:52:03: Decoded Command: goto_planet(["Vultures  Valley"])
07/27/24 22:52:04: Invalid Planet Name: Vultures  Valley
07/27/24 22:52:10: Executing command: goto_planet(Vultures Valley)
07/27/24 22:52:10: Processed command: goto_planet(Vultures Valley)
07/27/24 22:52:10: Teleported to Vultures Valley.
07/27/24 22:52:26: [Jay Arnold] it seems an extra space character is adde to this planet name  somewhere
07/27/24 22:52:26: Creating chat bubble:  it seems an extra space character is adde to this planet name  somewhere, Owner: yeancat, Choices: []
07/27/24 22:52:26: Chat Bubble Created. Following 'yeancat' with text: ' it seems an extra space character is adde to this planet name  somewhere'. Number of choices: 0
07/27/24 22:52:49: Executing command: execute_action(GotoKingsKingdom)
07/27/24 22:52:49: Processed command: execute_action(GotoKingsKingdom)
07/27/24 22:52:49: execute_action - Action Name: GotoKingsKingdom
07/27/24 22:52:49: Executing action: GotoKingsKingdom
07/27/24 22:52:49: Decoded Command: goto_planet(["Kings Kingdom"])
07/27/24 22:52:49: Teleported to Kings Kingdom.
07/27/24 22:53:18: Executing command: add_action(GotoVulturesValley,goto_planet,["VulturesValley"] )
07/27/24 22:53:18: Processed command: add_action(GotoVulturesValley,goto_planet,["VulturesValley"] )
07/27/24 22:53:18: scr_add_action - Raw inputs:
07/27/24 22:53:18: Name: GotoVulturesValley
07/27/24 22:53:18: Command: goto_planet
07/27/24 22:53:18: Parameters: ["VulturesValley"]
07/27/24 22:53:18: Action 'GotoVulturesValley' added/updated successfully.
07/27/24 22:53:18: Encoded Command: ImdvdG9fcGxhbmV0KFtcIlZ1bHR1cmVzVmFsbGV5XCJdKSI=
07/27/24 22:53:18: Saving action: SaveGameNow|||InNhdmVfZ2FtZShbXSki
07/27/24 22:53:18: Saving action: MoreChoices3|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJEaXZpbmUgRG9tYWluXCIsXCJHb3RvRGl2aW5lRG9tYWluXCJdLFtcIllldG9waWFcIixcIkdvdG9ZZXRvcGlhXCJdLFtcIktpbmdzICBLaW5nZG9tXCIsXCJHb3RvS2luZ3NLaW5nZG9tXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzNFwiXV1dKSI=
07/27/24 22:53:18: Saving action: GotoKingsKingdom|||ImdvdG9fcGxhbmV0KFtcIktpbmdzIEtpbmdkb21cIl0pIg==
07/27/24 22:53:18: Saving action: MainMenuChoices2|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJFYXJ0aFwiLFwiR290b0VhcnRoXCJdLFtcIlVuaXZlcnNlICBDaXR5XCIsXCJHb3RvVW5pdmVyc2VDaXR5XCJdLFtcIkZhbnRhc2lhXCIsXCJHb3RvRmFudGFzaWFcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMxXCJdXV0pIg==
07/27/24 22:53:18: Saving action: MoreChoices1|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJMYW5kIG9mIEx1Y3lcIixcIkdvdG9MYW5kT2ZMdWN5XCJdLFtcIlBsYWNlIG9mIFBhYmxvXCIsXCJHb3RvUGxhY2VPZlBhYmxvXCJdLFtcIkdob3N0ICBUb3duXCIsXCJHb3RvR2hvc3RUb3duXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzMlwiXV1dKSI=
07/27/24 22:53:18: Saving action: GotoDivineDomain|||ImdvdG9fcGxhbmV0KFtcIkRpdmluZSBEb21haW5cIl0pIg==
07/27/24 22:53:18: Saving action: GotoTheEndonda|||ImdvdG9fcGxhbmV0KFtcIlRoZSBFbmRvbmRhXCJdKSI=
07/27/24 22:53:19: Saving action: GotoUniverseCity|||ImdvdG9fcGxhbmV0KFtcIlVuaXZlcnNlIENpdHlcIl0pIg==
07/27/24 22:53:19: Saving action: GotoLandOfLucy|||ImdvdG9fcGxhbmV0KFtcIkxhbmQgb2YgTHVjeVwiXSki
07/27/24 22:53:19: Saving action: GotoPlaceOfPablo|||ImdvdG9fcGxhbmV0KFtcIlBsYWNlIG9mIFBhYmxvXCJdKSI=
07/27/24 22:53:19: Saving action: GotoTheIcyHeart|||ImdvdG9fcGxhbmV0KFtcIlRoZSBJY3kgSGVhcnRcIl0pIg==
07/27/24 22:53:19: Saving action: GotoGhostTown|||ImdvdG9fcGxhbmV0KFtcIkdob3N0IFRvd25cIl0pIg==
07/27/24 22:53:19: Saving action: MainMenuChoices|||ImNoYXRfYnViYmxlKFtcIldoYXQgd291bGQgeW91IGxpa2UgdG8gZG8/XCIsXCJ5ZWFuY2F0XCIsW1tcIkdvIHRvIEVhcnRoXCIsXCJHb3RvRWFydGhcIl0sW1wiTGV2ZWwgVXBcIixcIkxldmVsVXBPbmNlXCJdLFtcIlNhdmUgIEdhbWVcIixcIlNhdmVHYW1lTm93XCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:53:19: Saving action: LevelUpOnce|||ImxldmVsX3VwKFsxXSki
07/27/24 22:53:19: Saving action: GotoTheGoldMines|||ImdvdG9fcGxhbmV0KFtcIlRoZSBHb2xkIE1pbmVzXCJdKSI=
07/27/24 22:53:19: Saving action: MoreChoices2|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJWdWx0dXJlcyBWYWxsZXlcIixcIkdvdG9WdWx0dXJlc1ZhbGxleVwiXSxbXCJUaGUgRW5kb25kYVwiLFwiR290b1RoZUVuZG9uZGFcIl0sW1wiU3Rvcm15IFNhbmRzXCIsXCJHb3RvU3Rvcm15U2FuZHNcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMzXCJdXV0pIg==
07/27/24 22:53:19: Saving action: MoreChoices4|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJUaGUgSWN5IEhlYXJ0XCIsXCJHb3RvVGhlSWN5SGVhcnRcIl0sW1wiVGhlIEdvbGQgIE1pbmVzXCIsXCJHb3RvVGhlR29sZE1pbmVzXCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:53:19: Saving action: GotoVulturesValley|||ImdvdG9fcGxhbmV0KFtcIlZ1bHR1cmVzVmFsbGV5XCJdKSI=
07/27/24 22:53:19: Saving action: GotoEarth|||ImdvdG9fcGxhbmV0KFtcIkVhcnRoXCJdKSI=
07/27/24 22:53:19: Saving action: GotoStormySands|||ImdvdG9fcGxhbmV0KFtcIlN0b3JteSBTYW5kc1wiXSki
07/27/24 22:53:19: Saving action: GotoFantasia|||ImdvdG9fcGxhbmV0KFtcIkZhbnRhc2lhXCJdKSI=
07/27/24 22:53:19: Saving action: GotoYetopia|||ImdvdG9fcGxhbmV0KFtcIllldG9waWFcIl0pIg==
07/27/24 22:53:19: Actions saved successfully to Actions.txt.
07/27/24 22:53:22: Executing command: execute_action(GotoVulturesValley)
07/27/24 22:53:22: Processed command: execute_action(GotoVulturesValley)
07/27/24 22:53:22: execute_action - Action Name: GotoVulturesValley
07/27/24 22:53:22: Executing action: GotoVulturesValley
07/27/24 22:53:22: Decoded Command: goto_planet(["VulturesValley"])
07/27/24 22:53:22: Invalid Planet Name: VulturesValley
07/27/24 22:53:30: Executing command: add_action(GotoVulturesValley,goto_planet,["Vultures  Valley"])
07/27/24 22:53:30: Processed command: add_action(GotoVulturesValley,goto_planet,["Vultures  Valley"])
07/27/24 22:53:30: scr_add_action - Raw inputs:
07/27/24 22:53:30: Name: GotoVulturesValley
07/27/24 22:53:30: Command: goto_planet
07/27/24 22:53:30: Parameters: ["Vultures  Valley"]
07/27/24 22:53:30: Action 'GotoVulturesValley' added/updated successfully.
07/27/24 22:53:30: Encoded Command: ImdvdG9fcGxhbmV0KFtcIlZ1bHR1cmVzICBWYWxsZXlcIl0pIg==
07/27/24 22:53:30: Saving action: SaveGameNow|||InNhdmVfZ2FtZShbXSki
07/27/24 22:53:30: Saving action: MoreChoices3|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJEaXZpbmUgRG9tYWluXCIsXCJHb3RvRGl2aW5lRG9tYWluXCJdLFtcIllldG9waWFcIixcIkdvdG9ZZXRvcGlhXCJdLFtcIktpbmdzICBLaW5nZG9tXCIsXCJHb3RvS2luZ3NLaW5nZG9tXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzNFwiXV1dKSI=
07/27/24 22:53:30: Saving action: GotoKingsKingdom|||ImdvdG9fcGxhbmV0KFtcIktpbmdzIEtpbmdkb21cIl0pIg==
07/27/24 22:53:30: Saving action: MainMenuChoices2|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJFYXJ0aFwiLFwiR290b0VhcnRoXCJdLFtcIlVuaXZlcnNlICBDaXR5XCIsXCJHb3RvVW5pdmVyc2VDaXR5XCJdLFtcIkZhbnRhc2lhXCIsXCJHb3RvRmFudGFzaWFcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMxXCJdXV0pIg==
07/27/24 22:53:30: Saving action: MoreChoices1|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJMYW5kIG9mIEx1Y3lcIixcIkdvdG9MYW5kT2ZMdWN5XCJdLFtcIlBsYWNlIG9mIFBhYmxvXCIsXCJHb3RvUGxhY2VPZlBhYmxvXCJdLFtcIkdob3N0ICBUb3duXCIsXCJHb3RvR2hvc3RUb3duXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzMlwiXV1dKSI=
07/27/24 22:53:30: Saving action: GotoDivineDomain|||ImdvdG9fcGxhbmV0KFtcIkRpdmluZSBEb21haW5cIl0pIg==
07/27/24 22:53:30: Saving action: GotoTheEndonda|||ImdvdG9fcGxhbmV0KFtcIlRoZSBFbmRvbmRhXCJdKSI=
07/27/24 22:53:30: Saving action: GotoUniverseCity|||ImdvdG9fcGxhbmV0KFtcIlVuaXZlcnNlIENpdHlcIl0pIg==
07/27/24 22:53:31: Saving action: GotoLandOfLucy|||ImdvdG9fcGxhbmV0KFtcIkxhbmQgb2YgTHVjeVwiXSki
07/27/24 22:53:31: Saving action: GotoPlaceOfPablo|||ImdvdG9fcGxhbmV0KFtcIlBsYWNlIG9mIFBhYmxvXCJdKSI=
07/27/24 22:53:31: Saving action: GotoTheIcyHeart|||ImdvdG9fcGxhbmV0KFtcIlRoZSBJY3kgSGVhcnRcIl0pIg==
07/27/24 22:53:31: Saving action: GotoGhostTown|||ImdvdG9fcGxhbmV0KFtcIkdob3N0IFRvd25cIl0pIg==
07/27/24 22:53:31: Saving action: MainMenuChoices|||ImNoYXRfYnViYmxlKFtcIldoYXQgd291bGQgeW91IGxpa2UgdG8gZG8/XCIsXCJ5ZWFuY2F0XCIsW1tcIkdvIHRvIEVhcnRoXCIsXCJHb3RvRWFydGhcIl0sW1wiTGV2ZWwgVXBcIixcIkxldmVsVXBPbmNlXCJdLFtcIlNhdmUgIEdhbWVcIixcIlNhdmVHYW1lTm93XCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:53:31: Saving action: LevelUpOnce|||ImxldmVsX3VwKFsxXSki
07/27/24 22:53:31: Saving action: GotoTheGoldMines|||ImdvdG9fcGxhbmV0KFtcIlRoZSBHb2xkIE1pbmVzXCJdKSI=
07/27/24 22:53:31: Saving action: MoreChoices2|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJWdWx0dXJlcyBWYWxsZXlcIixcIkdvdG9WdWx0dXJlc1ZhbGxleVwiXSxbXCJUaGUgRW5kb25kYVwiLFwiR290b1RoZUVuZG9uZGFcIl0sW1wiU3Rvcm15IFNhbmRzXCIsXCJHb3RvU3Rvcm15U2FuZHNcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMzXCJdXV0pIg==
07/27/24 22:53:31: Saving action: MoreChoices4|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJUaGUgSWN5IEhlYXJ0XCIsXCJHb3RvVGhlSWN5SGVhcnRcIl0sW1wiVGhlIEdvbGQgIE1pbmVzXCIsXCJHb3RvVGhlR29sZE1pbmVzXCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:53:31: Saving action: GotoVulturesValley|||ImdvdG9fcGxhbmV0KFtcIlZ1bHR1cmVzICBWYWxsZXlcIl0pIg==
07/27/24 22:53:31: Saving action: GotoEarth|||ImdvdG9fcGxhbmV0KFtcIkVhcnRoXCJdKSI=
07/27/24 22:53:31: Saving action: GotoStormySands|||ImdvdG9fcGxhbmV0KFtcIlN0b3JteSBTYW5kc1wiXSki
07/27/24 22:53:31: Saving action: GotoFantasia|||ImdvdG9fcGxhbmV0KFtcIkZhbnRhc2lhXCJdKSI=
07/27/24 22:53:31: Saving action: GotoYetopia|||ImdvdG9fcGxhbmV0KFtcIllldG9waWFcIl0pIg==
07/27/24 22:53:31: Actions saved successfully to Actions.txt.
07/27/24 22:53:37: Executing command: add_action(GotoVulturesValley,goto_planet,["Vultures  Valley"])
07/27/24 22:53:37: Processed command: add_action(GotoVulturesValley,goto_planet,["Vultures  Valley"])
07/27/24 22:53:37: scr_add_action - Raw inputs:
07/27/24 22:53:37: Name: GotoVulturesValley
07/27/24 22:53:37: Command: goto_planet
07/27/24 22:53:38: Parameters: ["Vultures  Valley"]
07/27/24 22:53:38: Action 'GotoVulturesValley' added/updated successfully.
07/27/24 22:53:38: Encoded Command: ImdvdG9fcGxhbmV0KFtcIlZ1bHR1cmVzICBWYWxsZXlcIl0pIg==
07/27/24 22:53:38: Saving action: SaveGameNow|||InNhdmVfZ2FtZShbXSki
07/27/24 22:53:38: Saving action: MoreChoices3|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJEaXZpbmUgRG9tYWluXCIsXCJHb3RvRGl2aW5lRG9tYWluXCJdLFtcIllldG9waWFcIixcIkdvdG9ZZXRvcGlhXCJdLFtcIktpbmdzICBLaW5nZG9tXCIsXCJHb3RvS2luZ3NLaW5nZG9tXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzNFwiXV1dKSI=
07/27/24 22:53:38: Saving action: GotoKingsKingdom|||ImdvdG9fcGxhbmV0KFtcIktpbmdzIEtpbmdkb21cIl0pIg==
07/27/24 22:53:38: Saving action: MainMenuChoices2|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJFYXJ0aFwiLFwiR290b0VhcnRoXCJdLFtcIlVuaXZlcnNlICBDaXR5XCIsXCJHb3RvVW5pdmVyc2VDaXR5XCJdLFtcIkZhbnRhc2lhXCIsXCJHb3RvRmFudGFzaWFcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMxXCJdXV0pIg==
07/27/24 22:53:38: Saving action: MoreChoices1|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJMYW5kIG9mIEx1Y3lcIixcIkdvdG9MYW5kT2ZMdWN5XCJdLFtcIlBsYWNlIG9mIFBhYmxvXCIsXCJHb3RvUGxhY2VPZlBhYmxvXCJdLFtcIkdob3N0ICBUb3duXCIsXCJHb3RvR2hvc3RUb3duXCJdLFtcIk1vcmVcIixcIk1vcmVDaG9pY2VzMlwiXV1dKSI=
07/27/24 22:53:38: Saving action: GotoDivineDomain|||ImdvdG9fcGxhbmV0KFtcIkRpdmluZSBEb21haW5cIl0pIg==
07/27/24 22:53:38: Saving action: GotoTheEndonda|||ImdvdG9fcGxhbmV0KFtcIlRoZSBFbmRvbmRhXCJdKSI=
07/27/24 22:53:38: Saving action: GotoUniverseCity|||ImdvdG9fcGxhbmV0KFtcIlVuaXZlcnNlIENpdHlcIl0pIg==
07/27/24 22:53:38: Saving action: GotoLandOfLucy|||ImdvdG9fcGxhbmV0KFtcIkxhbmQgb2YgTHVjeVwiXSki
07/27/24 22:53:38: Saving action: GotoPlaceOfPablo|||ImdvdG9fcGxhbmV0KFtcIlBsYWNlIG9mIFBhYmxvXCJdKSI=
07/27/24 22:53:38: Saving action: GotoTheIcyHeart|||ImdvdG9fcGxhbmV0KFtcIlRoZSBJY3kgSGVhcnRcIl0pIg==
07/27/24 22:53:38: Saving action: GotoGhostTown|||ImdvdG9fcGxhbmV0KFtcIkdob3N0IFRvd25cIl0pIg==
07/27/24 22:53:38: Saving action: MainMenuChoices|||ImNoYXRfYnViYmxlKFtcIldoYXQgd291bGQgeW91IGxpa2UgdG8gZG8/XCIsXCJ5ZWFuY2F0XCIsW1tcIkdvIHRvIEVhcnRoXCIsXCJHb3RvRWFydGhcIl0sW1wiTGV2ZWwgVXBcIixcIkxldmVsVXBPbmNlXCJdLFtcIlNhdmUgIEdhbWVcIixcIlNhdmVHYW1lTm93XCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:53:38: Saving action: LevelUpOnce|||ImxldmVsX3VwKFsxXSki
07/27/24 22:53:38: Saving action: GotoTheGoldMines|||ImdvdG9fcGxhbmV0KFtcIlRoZSBHb2xkIE1pbmVzXCJdKSI=
07/27/24 22:53:38: Saving action: MoreChoices2|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJWdWx0dXJlcyBWYWxsZXlcIixcIkdvdG9WdWx0dXJlc1ZhbGxleVwiXSxbXCJUaGUgRW5kb25kYVwiLFwiR290b1RoZUVuZG9uZGFcIl0sW1wiU3Rvcm15IFNhbmRzXCIsXCJHb3RvU3Rvcm15U2FuZHNcIl0sW1wiTW9yZVwiLFwiTW9yZUNob2ljZXMzXCJdXV0pIg==
07/27/24 22:53:38: Saving action: MoreChoices4|||ImNoYXRfYnViYmxlKFtcIldoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGdvP1wiLFwieWVhbmNhdFwiLFtbXCJUaGUgSWN5IEhlYXJ0XCIsXCJHb3RvVGhlSWN5SGVhcnRcIl0sW1wiVGhlIEdvbGQgIE1pbmVzXCIsXCJHb3RvVGhlR29sZE1pbmVzXCJdLFtcIkNhbmNlbFwiLFwibnVsbFwiXV1dKSI=
07/27/24 22:53:38: Saving action: GotoVulturesValley|||ImdvdG9fcGxhbmV0KFtcIlZ1bHR1cmVzICBWYWxsZXlcIl0pIg==
07/27/24 22:53:38: Saving action: GotoEarth|||ImdvdG9fcGxhbmV0KFtcIkVhcnRoXCJdKSI=
07/27/24 22:53:38: Saving action: GotoStormySands|||ImdvdG9fcGxhbmV0KFtcIlN0b3JteSBTYW5kc1wiXSki
07/27/24 22:53:38: Saving action: GotoFantasia|||ImdvdG9fcGxhbmV0KFtcIkZhbnRhc2lhXCJdKSI=
07/27/24 22:53:38: Saving action: GotoYetopia|||ImdvdG9fcGxhbmV0KFtcIllldG9waWFcIl0pIg==
07/27/24 22:53:38: Actions saved successfully to Actions.txt.
07/27/24 22:54:06: [Jay Arnold] an extra space character is added because of text wrapping in my  debugCommand i believe'
07/27/24 22:54:06: Creating chat bubble:  an extra space character is added because of text wrapping in my  debugCommand i believe', Owner: yeancat, Choices: []
07/27/24 22:54:06: Chat Bubble Created. Following 'yeancat' with text: ' an extra space character is added because of text wrapping in my  debugCommand i believe''. Number of choices: 0
07/27/24 22:54:21: Executing command: execute_action(MainMenuChoices2)
07/27/24 22:54:21: Processed command: execute_action(MainMenuChoices2)
07/27/24 22:54:21: execute_action - Action Name: MainMenuChoices2
07/27/24 22:54:21: Executing action: MainMenuChoices2
07/27/24 22:54:21: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Earth","GotoEarth"],["Universe  City","GotoUniverseCity"],["Fantasia","GotoFantasia"],["More","MoreChoices1"]]])
07/27/24 22:54:21: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Earth","GotoEarth"],["Universe  City","GotoUniverseCity"],["Fantasia","GotoFantasia"],["More","MoreChoices1"]]
07/27/24 22:54:21: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:54:25: Executing command: execute_action(MoreChoices1)
07/27/24 22:54:25: Processed command: execute_action(MoreChoices1)
07/27/24 22:54:25: execute_action - Action Name: MoreChoices1
07/27/24 22:54:25: Executing action: MoreChoices1
07/27/24 22:54:25: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Land of Lucy","GotoLandOfLucy"],["Place of Pablo","GotoPlaceOfPablo"],["Ghost  Town","GotoGhostTown"],["More","MoreChoices2"]]])
07/27/24 22:54:25: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Land of Lucy","GotoLandOfLucy"],["Place of Pablo","GotoPlaceOfPablo"],["Ghost  Town","GotoGhostTown"],["More","MoreChoices2"]]
07/27/24 22:54:25: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:54:27: Executing command: execute_action(GotoPlaceOfPablo)
07/27/24 22:54:27: Processed command: execute_action(GotoPlaceOfPablo)
07/27/24 22:54:28: execute_action - Action Name: GotoPlaceOfPablo
07/27/24 22:54:28: Executing action: GotoPlaceOfPablo
07/27/24 22:54:28: Decoded Command: goto_planet(["Place of Pablo"])
07/27/24 22:54:28: Teleported to Place of Pablo.
07/27/24 22:54:31: Executing command: execute_action(MainMenuChoices2)
07/27/24 22:54:31: Processed command: execute_action(MainMenuChoices2)
07/27/24 22:54:31: execute_action - Action Name: MainMenuChoices2
07/27/24 22:54:31: Executing action: MainMenuChoices2
07/27/24 22:54:31: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Earth","GotoEarth"],["Universe  City","GotoUniverseCity"],["Fantasia","GotoFantasia"],["More","MoreChoices1"]]])
07/27/24 22:54:31: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Earth","GotoEarth"],["Universe  City","GotoUniverseCity"],["Fantasia","GotoFantasia"],["More","MoreChoices1"]]
07/27/24 22:54:31: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:54:33: Executing command: execute_action(MoreChoices1)
07/27/24 22:54:33: Processed command: execute_action(MoreChoices1)
07/27/24 22:54:33: execute_action - Action Name: MoreChoices1
07/27/24 22:54:33: Executing action: MoreChoices1
07/27/24 22:54:33: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Land of Lucy","GotoLandOfLucy"],["Place of Pablo","GotoPlaceOfPablo"],["Ghost  Town","GotoGhostTown"],["More","MoreChoices2"]]])
07/27/24 22:54:33: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Land of Lucy","GotoLandOfLucy"],["Place of Pablo","GotoPlaceOfPablo"],["Ghost  Town","GotoGhostTown"],["More","MoreChoices2"]]
07/27/24 22:54:33: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:54:34: Executing command: execute_action(MoreChoices2)
07/27/24 22:54:34: Processed command: execute_action(MoreChoices2)
07/27/24 22:54:34: execute_action - Action Name: MoreChoices2
07/27/24 22:54:34: Executing action: MoreChoices2
07/27/24 22:54:34: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Vultures Valley","GotoVulturesValley"],["The Endonda","GotoTheEndonda"],["Stormy Sands","GotoStormySands"],["More","MoreChoices3"]]])
07/27/24 22:54:34: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Vultures Valley","GotoVulturesValley"],["The Endonda","GotoTheEndonda"],["Stormy Sands","GotoStormySands"],["More","MoreChoices3"]]
07/27/24 22:54:34: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:54:40: Executing command: execute_action(MoreChoices3)
07/27/24 22:54:40: Processed command: execute_action(MoreChoices3)
07/27/24 22:54:40: execute_action - Action Name: MoreChoices3
07/27/24 22:54:40: Executing action: MoreChoices3
07/27/24 22:54:40: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Divine Domain","GotoDivineDomain"],["Yetopia","GotoYetopia"],["Kings  Kingdom","GotoKingsKingdom"],["More","MoreChoices4"]]])
07/27/24 22:54:40: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Divine Domain","GotoDivineDomain"],["Yetopia","GotoYetopia"],["Kings  Kingdom","GotoKingsKingdom"],["More","MoreChoices4"]]
07/27/24 22:54:40: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:54:42: Executing command: execute_action(GotoDivineDomain)
07/27/24 22:54:42: Processed command: execute_action(GotoDivineDomain)
07/27/24 22:54:42: execute_action - Action Name: GotoDivineDomain
07/27/24 22:54:42: Executing action: GotoDivineDomain
07/27/24 22:54:42: Decoded Command: goto_planet(["Divine Domain"])
07/27/24 22:54:42: Teleported to Divine Domain.
07/27/24 22:54:48: Executing command: execute_action(MainMenuChoices2)
07/27/24 22:54:48: Processed command: execute_action(MainMenuChoices2)
07/27/24 22:54:48: execute_action - Action Name: MainMenuChoices2
07/27/24 22:54:48: Executing action: MainMenuChoices2
07/27/24 22:54:48: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Earth","GotoEarth"],["Universe  City","GotoUniverseCity"],["Fantasia","GotoFantasia"],["More","MoreChoices1"]]])
07/27/24 22:54:48: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Earth","GotoEarth"],["Universe  City","GotoUniverseCity"],["Fantasia","GotoFantasia"],["More","MoreChoices1"]]
07/27/24 22:54:48: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:54:50: Executing command: execute_action(GotoUniverseCity)
07/27/24 22:54:50: Processed command: execute_action(GotoUniverseCity)
07/27/24 22:54:50: execute_action - Action Name: GotoUniverseCity
07/27/24 22:54:50: Executing action: GotoUniverseCity
07/27/24 22:54:50: Decoded Command: goto_planet(["Universe City"])
07/27/24 22:54:50: Teleported to Universe City.
07/27/24 22:54:54: Executing command: execute_action(MainMenuChoices2)
07/27/24 22:54:54: Processed command: execute_action(MainMenuChoices2)
07/27/24 22:54:54: execute_action - Action Name: MainMenuChoices2
07/27/24 22:54:54: Executing action: MainMenuChoices2
07/27/24 22:54:54: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Earth","GotoEarth"],["Universe  City","GotoUniverseCity"],["Fantasia","GotoFantasia"],["More","MoreChoices1"]]])
07/27/24 22:54:54: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Earth","GotoEarth"],["Universe  City","GotoUniverseCity"],["Fantasia","GotoFantasia"],["More","MoreChoices1"]]
07/27/24 22:54:54: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:54:55: Executing command: execute_action(MoreChoices1)
07/27/24 22:54:55: Processed command: execute_action(MoreChoices1)
07/27/24 22:54:55: execute_action - Action Name: MoreChoices1
07/27/24 22:54:55: Executing action: MoreChoices1
07/27/24 22:54:55: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Land of Lucy","GotoLandOfLucy"],["Place of Pablo","GotoPlaceOfPablo"],["Ghost  Town","GotoGhostTown"],["More","MoreChoices2"]]])
07/27/24 22:54:55: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Land of Lucy","GotoLandOfLucy"],["Place of Pablo","GotoPlaceOfPablo"],["Ghost  Town","GotoGhostTown"],["More","MoreChoices2"]]
07/27/24 22:54:55: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:54:55: Executing command: execute_action(MoreChoices2)
07/27/24 22:54:55: Processed command: execute_action(MoreChoices2)
07/27/24 22:54:55: execute_action - Action Name: MoreChoices2
07/27/24 22:54:55: Executing action: MoreChoices2
07/27/24 22:54:56: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Vultures Valley","GotoVulturesValley"],["The Endonda","GotoTheEndonda"],["Stormy Sands","GotoStormySands"],["More","MoreChoices3"]]])
07/27/24 22:54:56: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Vultures Valley","GotoVulturesValley"],["The Endonda","GotoTheEndonda"],["Stormy Sands","GotoStormySands"],["More","MoreChoices3"]]
07/27/24 22:54:56: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:54:57: Executing command: execute_action(MoreChoices3)
07/27/24 22:54:57: Processed command: execute_action(MoreChoices3)
07/27/24 22:54:57: execute_action - Action Name: MoreChoices3
07/27/24 22:54:57: Executing action: MoreChoices3
07/27/24 22:54:57: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Divine Domain","GotoDivineDomain"],["Yetopia","GotoYetopia"],["Kings  Kingdom","GotoKingsKingdom"],["More","MoreChoices4"]]])
07/27/24 22:54:57: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Divine Domain","GotoDivineDomain"],["Yetopia","GotoYetopia"],["Kings  Kingdom","GotoKingsKingdom"],["More","MoreChoices4"]]
07/27/24 22:54:57: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:54:59: Executing command: execute_action(GotoKingsKingdom)
07/27/24 22:54:59: Processed command: execute_action(GotoKingsKingdom)
07/27/24 22:54:59: execute_action - Action Name: GotoKingsKingdom
07/27/24 22:54:59: Executing action: GotoKingsKingdom
07/27/24 22:54:59: Decoded Command: goto_planet(["Kings Kingdom"])
07/27/24 22:54:59: Teleported to Kings Kingdom.
07/27/24 22:55:03: Executing command: execute_action(MainMenuChoices2)
07/27/24 22:55:03: Processed command: execute_action(MainMenuChoices2)
07/27/24 22:55:03: execute_action - Action Name: MainMenuChoices2
07/27/24 22:55:03: Executing action: MainMenuChoices2
07/27/24 22:55:03: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Earth","GotoEarth"],["Universe  City","GotoUniverseCity"],["Fantasia","GotoFantasia"],["More","MoreChoices1"]]])
07/27/24 22:55:03: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Earth","GotoEarth"],["Universe  City","GotoUniverseCity"],["Fantasia","GotoFantasia"],["More","MoreChoices1"]]
07/27/24 22:55:03: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:55:04: Executing command: execute_action(MoreChoices1)
07/27/24 22:55:04: Processed command: execute_action(MoreChoices1)
07/27/24 22:55:04: execute_action - Action Name: MoreChoices1
07/27/24 22:55:04: Executing action: MoreChoices1
07/27/24 22:55:04: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Land of Lucy","GotoLandOfLucy"],["Place of Pablo","GotoPlaceOfPablo"],["Ghost  Town","GotoGhostTown"],["More","MoreChoices2"]]])
07/27/24 22:55:04: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Land of Lucy","GotoLandOfLucy"],["Place of Pablo","GotoPlaceOfPablo"],["Ghost  Town","GotoGhostTown"],["More","MoreChoices2"]]
07/27/24 22:55:04: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:55:06: Executing command: execute_action(MoreChoices2)
07/27/24 22:55:06: Processed command: execute_action(MoreChoices2)
07/27/24 22:55:06: execute_action - Action Name: MoreChoices2
07/27/24 22:55:06: Executing action: MoreChoices2
07/27/24 22:55:06: Decoded Command: chat_bubble(["Where would you like to go?","yeancat",[["Vultures Valley","GotoVulturesValley"],["The Endonda","GotoTheEndonda"],["Stormy Sands","GotoStormySands"],["More","MoreChoices3"]]])
07/27/24 22:55:06: Creating chat bubble: Where would you like to go?, Owner: yeancat, Choices: [["Vultures Valley","GotoVulturesValley"],["The Endonda","GotoTheEndonda"],["Stormy Sands","GotoStormySands"],["More","MoreChoices3"]]
07/27/24 22:55:06: Chat Bubble Created. Following 'yeancat' with text: 'Where would you like to go?'. Number of choices: 4
07/27/24 22:55:08: Executing command: execute_action(GotoVulturesValley)
07/27/24 22:55:08: Processed command: execute_action(GotoVulturesValley)
07/27/24 22:55:08: execute_action - Action Name: GotoVulturesValley
07/27/24 22:55:08: Executing action: GotoVulturesValley
07/27/24 22:55:08: Decoded Command: goto_planet(["Vultures  Valley"])
07/27/24 22:55:08: Invalid Planet Name: Vultures  Valley

