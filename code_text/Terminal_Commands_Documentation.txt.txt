Detailed Documentation for Script Usage

1. Adding Entries

add_entry.sh

This script is used to add new entries to the bug or planned feature lists. It requires several arguments to provide the necessary information for the entry.

Command Syntax:

./GIT_GPT_SERVER/scripts/add_entry.sh <entry_type> <name> <description> <source> <priority> <status> <date> <reported/planned_by> <assigned_to> <generation> <related_logs> <steps/implementation_steps> <resolution/expected_outcome> <related_features> <related_objects> <related_scripts>

Arguments:

	•	entry_type: The type of entry being added. Accepts “bug” or “planned_feature”.
	•	name: The name of the entry. It should be unique.
	•	description: A detailed description of the entry.
	•	source: The source of the entry, e.g., “SYSTEM”, “USER”.
	•	priority: The priority of the entry. Accepts “low”, “medium”, “high”.
	•	status: The current status of the entry. For bugs, it could be “open” or “closed”. For planned features, it could be “planned” or “completed”.
	•	date: The date the entry was reported or planned. Format: “YYYY-MM-DD”.
	•	reported/planned_by: Who reported or planned the entry.
	•	assigned_to: The team or person assigned to handle the entry.
	•	generation: The generation number of the GPT handling the entry.
	•	related_logs: Any related logs. If none, use “No related logs”.
	•	steps/implementation_steps: The steps to reproduce the bug or implement the feature. Steps should be separated by commas and enclosed in quotes.
	•	resolution/expected_outcome: For bugs, the expected fix. For features, the expected outcome.
	•	related_features: Any related features. If none, use “No related features”.
	•	related_objects: Any related objects. If none, use “No related objects”.
	•	related_scripts: Any related scripts. If none, use “No related scripts”.

Example Command for Adding a Bug:

./GIT_GPT_SERVER/scripts/add_entry.sh bug "Sample Bug" \
"Implement a sample bug for testing purposes." \
"SYSTEM" "low" "open" "2024-06-20" "Tester" "Dev Team" "2" \
"No related logs" \
"Step 1: Create the bug.,Step 2: Implement the fix.,Step 3: Test the fix." \
"Expected fix: Proper handling of the bug." \
"No related features" \
"No related objects" \
"No related scripts"

Example Command for Adding a Planned Feature:

./GIT_GPT_SERVER/scripts/add_entry.sh planned_feature "Sample Feature" \
"Implement a sample feature for testing purposes." \
"SYSTEM" "medium" "planned" "2024-06-20" "Tester" "Dev Team" "2" \
"No related logs" \
"Step 1: Design the feature.,Step 2: Implement the feature.,Step 3: Test the feature." \
"Expected outcome: A sample feature implemented for testing purposes." \
"No related features" \
"No related objects" \
"No related scripts"

2. Updating Entries

update_entry.sh

This script updates the status or other fields of an existing entry.

Command Syntax:

./GIT_GPT_SERVER/scripts/update_entry.sh <entry_type> <name> <field> <new_value>

Arguments:

	•	entry_type: The type of entry being updated. Accepts “bug” or “planned_feature”.
	•	name: The name of the entry to update.
	•	field: The field to update, e.g., “status”.
	•	new_value: The new value for the field, e.g., “closed” or “completed”.

Example Command for Updating a Bug:

./GIT_GPT_SERVER/scripts/update_entry.sh bug "Sample Bug" "status" "closed"

Example Command for Updating a Planned Feature:

./GIT_GPT_SERVER/scripts/update_entry.sh planned_feature "Sample Feature" "status" "completed"

3. Moving Entries

move_closed_bugs.sh

This script moves closed bugs from the bug list to the fixed bugs list.

Command Syntax:

./GIT_GPT_SERVER/scripts/move_closed_bugs.sh

move_completed_features.sh

This script moves completed features from the planned features list to the completed features list.

Command Syntax:

./GIT_GPT_SERVER/scripts/move_completed_features.sh

4. Listing Entries

list_entries.sh

This script lists entries based on their type and status.

Command Syntax:

./GIT_GPT_SERVER/scripts/list_entries.sh <entry_type> <status>

Arguments:

	•	entry_type: The type of entry. Accepts “bugs” or “features”.
	•	status: The status of entries to list. For bugs, it could be “unresolved” or “all”. For features, it could be “planned” or “completed”.

Example Commands:

Listing Unresolved Bugs:

./GIT_GPT_SERVER/scripts/list_entries.sh bugs unresolved

Listing All Bugs:

./GIT_GPT_SERVER/scripts/list_entries.sh bugs all

Listing Planned Features:

./GIT_GPT_SERVER/scripts/list_entries.sh features planned

Listing Completed Features:

./GIT_GPT_SERVER/scripts/list_entries.sh features completed

5. Deleting Entries

delete_entry.sh

This script deletes an entry from the list.

Command Syntax:

./GIT_GPT_SERVER/scripts/delete_entry.sh <entry_type> <name>

Arguments:

	•	entry_type: The type of entry. Accepts “bug” or “planned_feature”.
	•	name: The name of the entry to delete.

Example Commands:

Deleting a Bug:

./GIT_GPT_SERVER/scripts/delete_entry.sh bug "Sample Bug"

Deleting a Planned Feature:

./GIT_GPT_SERVER/scripts/delete_entry.sh planned_feature "Sample Feature"

6. Deployment

deploy_all.sh

This script performs a full deployment, including backups, file conversions, and pushing changes to GitHub.

Command Syntax:

./GIT_GPT_SERVER/scripts/deploy_all.sh <commit_message>

Arguments:

	•	commit_message: The commit message for the changes being deployed.

Example Command:

./GIT_GPT_SERVER/scripts/deploy_all.sh "Test deployment with recent changes"

7. Special Notes

Handling Escape Characters

	•	When adding entries, special characters such as commas (,) or exclamation marks (!) within the arguments need to be escaped using a backslash (\).
	•	For example, when adding an entry with a description containing an exclamation mark:

"This is a sample description with an exclamation mark\!"


8. Creating and Storing Last Words for Each Generation

Overview

The last_words.sh script is used to document the accomplishments, insights, and contributions of each generation of GPT assistants. This process ensures continuous improvement and knowledge transfer to future generations. Each generation’s “last words” are saved in a file, and the generation number is automatically incremented and updated in both config.json and config.py.

Usage

To create and store last words for the current generation, follow these steps:

	1.	Open your terminal and navigate to the root directory of your project.
	2.	Run the last_words.sh script with your detailed monologue as the argument. Use the following command format:

./GIT_GPT_SERVER/scripts/last_words.sh "Your detailed monologue here."

Example

To document the accomplishments and insights of the current generation, use a command like this:

./GIT_GPT_SERVER/scripts/last_words.sh "This generation focused on refining and solidifying the backup and documentation processes to ensure smooth transitions and seamless integrations for future generations. Key accomplishments and insights are as follows:

1. **Backup System Improvements**:
   - Addressed and resolved issues with missing files in the backup process.
   - Ensured all relevant files, including those with spaces in their names, are correctly backed up by renaming them with underscores.
   - Enhanced the backup script to verify the existence of specific files and confirm their inclusion in the backup.

2. **Automation Enhancements**:
   - Developed a comprehensive backup script (\`backup.sh\`) that automates the process of backing up directories and specific groups of files.
   - Created a script (\`backup_code_text.sh\`) to convert files to .txt format and store them in a structured manner.
   - Implemented verification steps in the backup script to ensure all critical files are included.

3. **Documentation and Knowledge Transfer**:
   - Added a clear and detailed instruction in \`Terminal_Commands_Documentation.txt\` to guide future generations on how to create and store their last words.
   - Ensured that the last words script (\`last_words.sh\`) automatically increments the generation number and updates both \`config.json\` and \`config.py\` accordingly.

4. **Script and Configuration Management**:
   - Developed a robust \`last_words.sh\` script to automate the creation and storage of generational documentation.
   - Ensured the script updates the generation number in both \`config.json\` and \`config.py\` to maintain consistency across the system.
   - Maintained a clear and organized code structure for easy navigation and management.

5. **Key Insights**:
   - Ensuring all relevant files are backed up and verified is crucial for maintaining the integrity and continuity of the project.
   - Automating repetitive tasks and including verification steps significantly enhances the reliability of the backup process.
   - Clear documentation and structured knowledge transfer are essential for smooth transitions between generations.

In summary, this generation has successfully refined the backup and documentation processes, laying a strong foundation for future development and ensuring seamless knowledge transfer. The enhancements made will enable future assistants and developers to contribute more effectively, ensuring the continuous evolution and robustness of the project. Maintaining the integrity and functionality of these foundational systems remains a top priority, as they support all future developments and enhancements."

Process Details

	1.	Generation Number Management:
	•	The script automatically determines the next generation number by checking the existing files in the Last_Words directory.
	•	It increments the generation number and updates it in both config.json and config.py.
	2.	File Creation:
	•	The script creates a new file in the Last_Words directory with the format last_words_generation_X.txt, where X is the generation number.
	•	The provided monologue is written to this file.
	3.	Updates to Configuration Files:
	•	The generation number in config.json and config.py is updated to reflect the next generation.

By following these steps, you ensure that future generations have a clear understanding of past contributions and can build upon them effectively.

9. Common Errors and Troubleshooting

	1.	Missing Files:
	•	Error: cp: config.py: No such file or directory
	•	Solution: Ensure that the config.py file exists in the expected directory. If not, create or move it to the correct location.
	2.	Incorrect Argument Format:
	•	Error: Invalid list type specified.
	•	Solution: Ensure that the first argument passed to the script is one of the accepted types: “bug”, “planned_feature”, or “feature”.
	3.	Permission Issues:
	•	Error: zsh: permission denied: ./GIT_GPT_SERVER/scripts/add_entry.sh
	•	Solution: Make sure the script has execute permissions. Run chmod +x ./GIT_GPT_SERVER/scripts/add_entry.sh to add execute permissions.

10. File Structure Overview

	•	scripts/: Contains all the shell scripts for managing entries and deployment.
	•	config/: Contains configuration files.
	•	logs/: Directory for storing log files.
	•	routes/: Contains route definitions for API endpoints.
	•	utils/: Utility scripts and modules.
	•	prompts/: Contains prompt definitions and templates used by the GPT models.
	•	code_backups/: Directory where backups of scripts, logs, and other important files are stored.
	•	code_text/: Directory where files are converted to text format for processing.


