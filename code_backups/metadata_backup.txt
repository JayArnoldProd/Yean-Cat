== Begin: server_command_list.txt.txt

== End: server_command_list.txt.txt

== Begin: format_description.txt.txt
If you are creating a new in-game, executable script, it should start with scr_ and be well-documented. In addition to creating the script with the correct naming format, I also need a line of code that adds the command to the command list.

For Example:
/// @function scr_return_controller()
/// @description Outputs the connected gamepad description or a message if none are connected
function scr_return_controller() {
    if (gamepad_is_connected(0)) {
        var gpad_desc = gamepad_get_description(0);
        handleDebugMessage("Connected gamepad: " + gpad_desc, true);
    } else {
        handleDebugMessage("No gamepad detected.", true);
    }
}

add_command("command name (without scr_, if needs argument(s): ends with '(')", (permission level required), [["string", "real"]] (2D array defining accepted var types for each argument, boolean (whether this command needs at least 1 argument passed));

Permission levels:
0 -> Player
1 -> Moderator
2 -> Developer
3 -> Owner

For Example: 
add_command("set_variable(", 2, [["string"],["string","real"]],true)
add_command("save_game", 0, [[]], false);  // Does not require "(" visually

*Remember this is only needed if you are adding a new command to the game, try and reuse existing scripts as much as possible and let me know if you would need to see a specific script that was not included, but could be helpful in resolving the issue! Remember that you are a 1 time chat interaction and will have no memory of this so If you cant see the solution to the bug or the method to adding the desired feature, then simply reply with what else you need to see in my code.

The game features an in game console which allows players with the required permission to execute code and create new features from within the game. Typing "/" will mean that the player is typing a command. Some commands do not require a "(", for example: /toggle_server . You can create actions by typing /add_action("Name it",Command_name,[100,"example_string"]) and can create macros essentially for commands and will be able to trigger these actions in sequences and events, or possibly controlled by an AI GPT like yourself. This is how It is intended to work, but it is still needing some fixes to be able to handle saving actions for commands that take more than 1 argument, such as /chat_bubble("Text",owner).
== End: format_description.txt.txt

== Begin: requirements.txt.txt
blinker==1.8.2
brotlipy==0.7.0
certifi==2022.12.7
cffi==1.15.1
charset-normalizer==2.1.1
click==8.1.7
Flask==3.0.3
gunicorn==22.0.0
idna==3.4
itsdangerous==2.2.0
Jinja2==3.1.4
MarkupSafe==2.1.5
numpy==1.24.2
python-dotenv==1.0.1
requests==2.28.1
setuptools==69.2.0
wheel==0.43.0
Werkzeug==3.0.3
pinecone-client==4.1.1
== End: requirements.txt.txt

== Begin: gitattributes.txt
# Auto detect text files and perform LF normalization
* text=auto

== End: gitattributes.txt

== Begin: runtime.txt.txt
python-3.10.14
== End: runtime.txt.txt

== Begin: pyproject.toml.txt
[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

== End: pyproject.toml.txt

== Begin: command_list.txt.txt
add_action
add_color
betterdirection
calculate_spent
chat_bubble
disable_heartbeat
enable_heartbeat
execute_action
game_end
goto_planet
jump_planet
level_up
list_actions
list_clients
list_colors
list_commands
list_variables
load_game
loadtrack
loadtrack2
name_color
return_controller
save_actions
save_game
save_macros
savetrack
set_my_permission
set_variable
show_gamepad_mapping
show_lines
show_variable
show_wpm
slider_cluster
toggle_debug
toggle_input_display
toggle_log_debug
toggle_server

== End: command_list.txt.txt

== Begin: package.json.txt
{
  "name": "yean-cat-git-gpt",
  "version": "1.0.0",
  "description": "Yean Cat Git GPT Server",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "axios": "^0.21.1",
    "dotenv": "^10.0.0",
    "morgan": "^1.10.0",
    "body-parser": "^1.19.0"
  },
  "devDependencies": {},
  "engines": {
    "node": ">=14.0.0"
  }
}

== End: package.json.txt

== Begin: intro.txt.txt
You are an AI assistant helping with the development of a 2D side-scrolling open world game in the 'survivors' genre using GameMaker Studio 2. The game includes multiplayer functionality, rhythm-based elements, and extensive object interactions. I have created a program that will allow me to communicate with gpt, and automates the process of sending my most recent code (from GitHub) to the AI. You will receive a description of the bug or feature I want you to help me with, along with any code I believe to be relevant for my request. I will also attach a log of my in game console, which I can test features and effectively communicate to you with. Since I am using API integration, sadly you will not remember any of our conversations, which is why you will be receiving so much information. Please make the most educated attempt at bringing me closer to the desired feature or bug fix. If you are not confident enough to solve my issue because you would need to see a specific script that I have not provided you with, then let me know. Please reuse and fix existing code, before adding scripts for things I might already have. Do not assume I have a script for a certain thing if you don't see evidence of it in the code I have provided you.
== End: intro.txt.txt

== Begin: planned_features.json.txt
[
    {
        "name": "Sample Feature",
        "description": "This is a sample feature description.",
        "related_objects": ["obj_client", "dondadollar"],
        "related_scripts": ["scr_toggle_server", "scr_list_colors"],
        "logs": ["SessionLog_45450.51.txt"]
    }
]

== End: planned_features.json.txt

== Begin: flask_pid.txt.txt
56684

== End: flask_pid.txt.txt

== Begin: format_description.txt.txt
If you are creating a new in-game, executable script, it should start with scr_ and be well-documented. In addition to creating the script with the correct naming format, I also need a line of code that adds the command to the command list.

For Example:
/// @function scr_return_controller()
/// @description Outputs the connected gamepad description or a message if none are connected
function scr_return_controller() {
    if (gamepad_is_connected(0)) {
        var gpad_desc = gamepad_get_description(0);
        handleDebugMessage("Connected gamepad: " + gpad_desc, true);
    } else {
        handleDebugMessage("No gamepad detected.", true);
    }
}

add_command("command name (without scr_, if needs argument(s): ends with '(')", (permission level required), [["string", "real"]] (2D array defining accepted var types for each argument, boolean (whether this command needs at least 1 argument passed));

Permission levels:
0 -> Player
1 -> Moderator
2 -> Developer
3 -> Owner

For Example: 
add_command("set_variable(", 2, [["string"],["string","real"]],true)
add_command("save_game", 0, [[]], false);  // Does not require "(" visually

*Remember this is only needed if you are adding a new command to the game, try and reuse existing scripts as much as possible and let me know if you would need to see a specific script that was not included, but could be helpful in resolving the issue! Remember that you are a 1 time chat interaction and will have no memory of this so If you cant see the solution to the bug or the method to adding the desired feature, then simply reply with what else you need to see in my code.

The game features an in game console which allows players with the required permission to execute code and create new features from within the game. Typing "/" will mean that the player is typing a command. Some commands do not require a "(", for example: /toggle_server . You can create actions by typing /add_action("Name it",Command_name,[100,"example_string"]) and can create macros essentially for commands and will be able to trigger these actions in sequences and events, or possibly controlled by an AI GPT like yourself. This is how It is intended to work, but it is still needing some fixes to be able to handle saving actions for commands that take more than 1 argument, such as /chat_bubble("Text",owner).
== End: format_description.txt.txt

== Begin: openai_operations.py.txt
import os
import requests

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

def query_openai(prompt, model='gpt-4', retries=3):
    for i in range(retries):
        try:
            response = requests.post(
                'https://api.openai.com/v1/chat/completions',
                headers={'Authorization': f'Bearer {OPENAI_API_KEY}'},
                json={
                    'model': model,
                    'messages': [{'role': 'user', 'content': prompt}],
                    'max_tokens': 1000,
                    'temperature': 0.5,
                }
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.HTTPError as e:
            if response.status_code == 429:  # Too Many Requests
                retry_after = int(response.headers.get("Retry-After", 10))  # default to 10 seconds
                time.sleep(retry_after + random.uniform(0, 1))  # adding some jitter
            else:
                raise e
    raise Exception("Max retries exceeded")

== End: openai_operations.py.txt

== Begin: pinecone_operations.py.txt
import os
from pinecone import Pinecone, ServerlessSpec

def init_pinecone_index(index_name):
    api_key = os.getenv("PINECONE_API_KEY")
    pc = Pinecone(api_key=api_key)
    
    if index_name not in pc.list_indexes().names():
        pc.create_index(
            name=index_name,
            dimension=1536,
            metric='euclidean',
            spec=ServerlessSpec(
                cloud='aws',
                region='us-west-2'
            )
        )
    return pc

def upsert_vectors_to_pinecone(vectors):
    index_name = os.getenv("PINECONE_INDEX_NAME")
    api_key = os.getenv("PINECONE_API_KEY")
    
    pc = Pinecone(api_key=api_key)
    index = pc.Index(index_name)
    
    # Assuming vectors is a list of tuples (id, vector)
    index.upsert(vectors)

== End: pinecone_operations.py.txt

== Begin: sanatize_logs.py.txt
# GIT_GPT_SERVER/utils/sanitize_logs.py

import os

def sanitize_log_content(content):
    sensitive_keys = [
        "GITHUB_API_URL",
        "GITHUB_TOKEN",
        "ASSISTANT_ID",
        "PINECONE_API_KEY",
        "PINECONE_INDEX_NAME",
        "GITHUB_USERNAME"
    ]

    for key in sensitive_keys:
        value = os.getenv(key)
        if value:
            content = content.replace(value, "*********")

    return content

== End: sanatize_logs.py.txt

== Begin: file_operations.py.txt
def read_file(file_path):
    try:
        with open(file_path, 'r') as file:
            return file.read()
    except FileNotFoundError:
        return None

def write_file(file_path, content):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    with open(file_path, 'w') as file:
        file.write(content)

== End: file_operations.py.txt

== Begin: intro.txt.txt
You are an AI assistant helping with the development of a 2D side-scrolling open world game in the 'survivors' genre using GameMaker Studio 2. The game includes multiplayer functionality, rhythm-based elements, and extensive object interactions. I have created a program that will allow me to communicate with gpt, and automates the process of sending my most recent code (from GitHub) to the AI. You will receive a description of the bug or feature I want you to help me with, along with any code I believe to be relevant for my request. I will also attach a log of my in game console, which I can test features and effectively communicate to you with. Since I am using API integration, sadly you will not remember any of our conversations, which is why you will be receiving so much information. Please make the most educated attempt at bringing me closer to the desired feature or bug fix. If you are not confident enough to solve my issue because you would need to see a specific script that I have not provided you with, then let me know. Please reuse and fix existing code, before adding scripts for things I might already have. Do not assume I have a script for a certain thing if you don't see evidence of it in the code I have provided you.
== End: intro.txt.txt

== Begin: server_logs.json.txt
{"SessionLog_45453.16.txt":"06/09/24 22:53:39: Actions.txt not found. Starting with an empty actions map.\n06/09/24 22:54:26: [Jay Arnold] Hello World!\n06/09/24 22:54:37: [Jay Arnold] I will now demonstrate how the add action is not working\n06/09/24 22:54:59: Action 'Lvl100' added successfully.\n06/09/24 22:55:08: Executing action: level_up(100)\n06/09/24 22:55:08: Level up initiated with goal: 100\n06/09/24 22:55:18: [Jay Arnold] see? that works beautifully\n06/09/24 22:55:22: Actions: Lvl100, \n06/09/24 22:55:37: [Jay Arnold] now what if i try /chat_bubble\n06/09/24 22:55:50: Chat Bubble Created. Following 'yeancat' with text: 'Hello World!'\n06/09/24 22:56:08: [Jay Arnold] the command works when executing normally, lets try and make it \ninto an action\n06/09/24 22:56:50: Action 'HelloWorld' added successfully.\n06/09/24 22:56:54: Actions: Lvl100, HelloWorld, \n06/09/24 22:56:58: Actions saved successfully to Actions.txt.\n06/09/24 22:57:15: [Jay Arnold] i will insert what the Actions.txt contains here:\n\nLvl100,level_up,[ 100 ]\nHelloWorld,chat_bubble,[ \"\"Hello World!\" ] // it appears to not have saved the second argument!\n\n06/09/24 22:57:39: Executing action: chat_bubble(\"Hello World!)\n06/09/24 22:57:39: Error: Owner object 'undefined' not found\n06/09/24 22:57:52: [Jay Arnold] See! an error!\n06/09/24 22:59:08: [Jay Arnold] I will now end the test. but first heres a list of all my commands i can\n use so far. We just need to fix this bug involving the actions and then\n we can make many cool systems that use our action system.\n06/09/24 22:59:15: Commands: add_action(, chat_bubble(, disable_heartbeat, \n06/09/24 22:59:15: enable_heartbeat, execute_action(, game_end(, goto_planet(, \n06/09/24 22:59:15: jump_planet(, level_up(, list_actions, list_clients, list_commands, \n06/09/24 22:59:15: list_variables, return_controller, save_actions, save_game, \n06/09/24 22:59:15: save_macros, set_my_permission(, set_variable(, show_gamepad_mapping, \n06/09/24 22:59:15: show_lines(, show_variable(, show_wpm, toggle_debug, \n06/09/24 22:59:15: toggle_input_display, toggle_log_debug, toggle_server\n06/09/24 22:59:30: Saved Game\n06/09/24 22:59:30: Game saved and ending.\n"}

== End: server_logs.json.txt

== Begin: SessionLog_45453.16.txt.txt
06/09/24 22:53:39: Actions.txt not found. Starting with an empty actions map.
06/09/24 22:54:26: [Jay Arnold] Hello World!
06/09/24 22:54:37: [Jay Arnold] I will now demonstrate how the add action is not working
06/09/24 22:54:59: Action 'Lvl100' added successfully.
06/09/24 22:55:08: Executing action: level_up(100)
06/09/24 22:55:08: Level up initiated with goal: 100
06/09/24 22:55:18: [Jay Arnold] see? that works beautifully
06/09/24 22:55:22: Actions: Lvl100, 
06/09/24 22:55:37: [Jay Arnold] now what if i try /chat_bubble
06/09/24 22:55:50: Chat Bubble Created. Following 'yeancat' with text: 'Hello World!'
06/09/24 22:56:08: [Jay Arnold] the command works when executing normally, lets try and make it 
into an action
06/09/24 22:56:50: Action 'HelloWorld' added successfully.
06/09/24 22:56:54: Actions: Lvl100, HelloWorld, 
06/09/24 22:56:58: Actions saved successfully to Actions.txt.
06/09/24 22:57:15: [Jay Arnold] i will insert what the Actions.txt contains here:

Lvl100,level_up,[ 100 ]
HelloWorld,chat_bubble,[ ""Hello World!" ] // it appears to not have saved the second argument!

06/09/24 22:57:39: Executing action: chat_bubble("Hello World!)
06/09/24 22:57:39: Error: Owner object 'undefined' not found
06/09/24 22:57:52: [Jay Arnold] See! an error!
06/09/24 22:59:08: [Jay Arnold] I will now end the test. but first heres a list of all my commands i can
 use so far. We just need to fix this bug involving the actions and then
 we can make many cool systems that use our action system.
06/09/24 22:59:15: Commands: add_action(, chat_bubble(, disable_heartbeat, 
06/09/24 22:59:15: enable_heartbeat, execute_action(, game_end(, goto_planet(, 
06/09/24 22:59:15: jump_planet(, level_up(, list_actions, list_clients, list_commands, 
06/09/24 22:59:15: list_variables, return_controller, save_actions, save_game, 
06/09/24 22:59:15: save_macros, set_my_permission(, set_variable(, show_gamepad_mapping, 
06/09/24 22:59:15: show_lines(, show_variable(, show_wpm, toggle_debug, 
06/09/24 22:59:15: toggle_input_display, toggle_log_debug, toggle_server
06/09/24 22:59:30: Saved Game
06/09/24 22:59:30: Game saved and ending.

== End: SessionLog_45453.16.txt.txt

== Begin: flask_pid.txt.txt
45669

== End: flask_pid.txt.txt

== Begin: update_lists.sh.txt
#!/bin/bash

# Function to generate a list of scripts
generate_script_list() {
    local dir=$1
    local output_file=$2

    echo "Generating script list for $dir..."
    find "$dir" -name "*.gml" -exec basename {} .gml \; > "$output_file"
    echo "Script list generated at $output_file"
}

# Function to generate a list of commands
generate_command_list() {
    local dir=$1
    local output_file=$2

    echo "Generating command list for $dir..."
    grep -r "function scr_" "$dir" | awk -F'function scr_' '{print $2}' | awk -F'(' '{print $1}' | sort -u > "$output_file"
    echo "Command list generated at $output_file"
}

# Generate lists for client project
generate_script_list "YEAN_CAT/scripts" "script_list.txt"
generate_command_list "YEAN_CAT/scripts" "command_list.txt"

# Generate lists for server project
generate_script_list "YEAN_CAT_SERVER/scripts" "server_script_list.txt"
generate_command_list "YEAN_CAT_SERVER/scripts" "server_command_list.txt"

# Commit and push the updated lists
git add script_list.txt command_list.txt server_script_list.txt server_command_list.txt
git commit -m "Update script and command lists"

echo "Update completed successfully!"

== End: update_lists.sh.txt

== Begin: generate_hierarchy.sh.txt
#!/bin/bash

# Create a hierarchies directory in the root
mkdir -p hierarchies

# Function to create a hierarchical representation of a directory
generate_hierarchy() {
    local directory=$1
    local output_file=$2
    local depth=$3

    echo "Generating hierarchy for $directory..."
    if [ -z "$depth" ]; then
        tree "$directory" -o "$output_file" || { echo "Failed to generate hierarchy for $directory"; exit 1; }
    else
        tree -L "$depth" "$directory" -o "$output_file" || { echo "Failed to generate hierarchy for $directory"; exit 1; }
    fi
    echo "Hierarchy generated at $output_file"
}

# Generate hierarchies for the required directories and save in the hierarchies folder
generate_hierarchy "GIT_GPT_SERVER" "hierarchies/GIT_GPT_SERVER_hierarchy.txt"
generate_hierarchy "YEAN_CAT" "hierarchies/YEAN_CAT_hierarchy.txt" 5
generate_hierarchy "YEAN_CAT_SERVER" "hierarchies/YEAN_CAT_SERVER_hierarchy.txt"

# Generate top-level hierarchy for Yean-Cat without including files within subdirectories
generate_hierarchy "." "hierarchies/Yean-Cat_hierarchy.txt" 1

echo "Hierarchy creation completed successfully!"

== End: generate_hierarchy.sh.txt

== Begin: deploy_all.sh.txt
#!/bin/bash

# Step 1: Set environment variables from .env
source .env

# Step 2: Update GitHub remote URL with token
echo "Updating GitHub remote URL..."
git remote set-url origin https://JayArnoldProd:${GITHUB_TOKEN}@github.com/JayArnoldProd/Yean-Cat.git

# Step 3: Run code_backup script with hierarchy generation
echo "Running backup script..."
./GIT_GPT_SERVER/scripts/code_backup.sh

# Step 4: Identify and kill specific Flask processes
echo "Checking for and killing existing Flask servers on ports 5000..."
./GIT_GPT_SERVER/scripts/stop_server.sh

# Step 5: Run force_push.sh with an optional commit message argument
echo "Running force_push.sh..."
./GIT_GPT_SERVER/scripts/force_push.sh "${1:-Catch up with local changes}"

# Step 6: Check if the server is running and pull logs
if curl -s --head http://localhost:5000 | grep "200 OK" > /dev/null; then
    echo "Pulling logs from the server..."
    curl -X POST http://localhost:5000/api/update_code/pull_logs -o Logs/server_logs.json
else
    echo "Server is not running. Starting the Flask server..."
    cd /Users/joshuaarnold/Documents/GitHub/Yean-Cat/GIT_GPT_SERVER
    export FLASK_APP=server.py
    flask run &
    FLASK_PID=$!  # Capture the Flask server PID
    echo $FLASK_PID > /Users/joshuaarnold/Documents/GitHub/Yean-Cat/GIT_GPT_SERVER/flask_pid.txt
    sleep 5  # Wait for the server to start
    echo "Pulling logs from the server..."
    curl -X POST http://localhost:5000/api/update_code/pull_logs -o Logs/server_logs.json
fi

echo "Backup and deployment completed successfully!"

# Step 7: Optionally run test API endpoints script
echo "Running test API endpoints script..."
if [ -f /Users/joshuaarnold/Documents/GitHub/Yean-Cat/GIT_GPT_SERVER/scripts/tests/test_api_endpoints.py ]; then
    python /Users/joshuaarnold/Documents/GitHub/Yean-Cat/GIT_GPT_SERVER/scripts/tests/test_api_endpoints.py
else
    echo "Test script not found."
fi

echo "Deployment and run completed successfully!"

== End: deploy_all.sh.txt

== Begin: test_api_endpoints.py.txt
import requests
import os

BASE_URL = "https://yean-cat-git-gpt-dd907a6ae83f.herokuapp.com"

def print_response(response):
    try:
        response.raise_for_status()  # Check if the request was successful
        print("Response JSON:", response.json())
    except requests.exceptions.HTTPError as http_err:
        print(f"HTTP error occurred: {http_err}")
        print("Response Content:", response.content)
    except requests.exceptions.JSONDecodeError:
        print("Response Content:", response.content)

def main():
    print("Starting Pinecone Initialization Test")
    response = requests.post(f"{BASE_URL}/api/query", json={
        "prompt_name": "test_prompt",
        "input_text": "Initialize Pinecone"
    })
    print("Pinecone Initialization Test:")
    print_response(response)

    print("Starting GPT Connection Test")
    response = requests.post(f"{BASE_URL}/api/generate_prompt", json={
        "save_name": "test_save",
        "input_text": "Test GPT connection"
    })
    print("GPT Connection Test:")
    print_response(response)

    print("Starting Update Code Test")
    response = requests.post(f"{BASE_URL}/api/update_code", json={
        "file_path": "test.py",
        "new_content": "print('Hello World')",
        "commit_message": "Test update"
    })
    print("Update Code Test:")
    print_response(response)

    print("Starting Assistant Test")
    response = requests.post(f"{BASE_URL}/api/assistant", json={
        "message": "Test assistant",
        "thread_id": "test_thread"
    }, headers={
        "Authorization": f"Bearer {os.getenv('ASSISTANT_API_KEY')}"
    })
    print("Assistant Test:")
    print_response(response)

    print("Starting Pull Logs Test")
    response = requests.post(f"{BASE_URL}/api/update_code/pull_logs")
    print("Pull Logs Test:")
    print_response(response)

if __name__ == "__main__":
    main()

== End: test_api_endpoints.py.txt

== Begin: stop_server.sh.txt
#!/bin/bash
# stop_server.sh

# Function to kill a process using a specific port
kill_process_on_port() {
    local port=$1
    echo "Checking for existing server on port $port..."
    PID=$(lsof -t -i:$port)
    if [ ! -z "$PID" ]; then
        echo "Killing process $PID using port $port..."
        kill -9 $PID
    else
        echo "No process using port $port."
    fi
}

# Kill servers on specified ports
kill_process_on_port 5000
kill_process_on_port 5001

# Optionally, kill the Flask server using the PID saved in flask_pid.txt
FLASK_PID_FILE="GIT_GPT_SERVER/flask_pid.txt"
if [ -f "$FLASK_PID_FILE" ]; then
    echo "Killing Flask server using PID from $FLASK_PID_FILE..."
    FLASK_PID=$(cat "$FLASK_PID_FILE")
    if [ ! -z "$FLASK_PID" ]; then
        kill -9 $FLASK_PID
        echo "Flask server with PID $FLASK_PID has been killed."
        rm "$FLASK_PID_FILE"
    else
        echo "No Flask server PID found in $FLASK_PID_FILE."
    fi
else
    echo "$FLASK_PID_FILE not found."
fi

echo "Server shutdown completed successfully!"

== End: stop_server.sh.txt

== Begin: deploy.sh.txt
#!/bin/bash
# Navigate to the project directory
cd /Users/joshuaarnold/Documents/GitHub/Yean-Cat

# Push to Heroku
echo "Pushing to Heroku..."
git push heroku main

== End: deploy.sh.txt

== Begin: force_push.sh.txt
#!/bin/bash

# Get the commit message from the argument, default to a preset value if not provided
COMMIT_MESSAGE=${1:-"Catch up with local changes"}

# Navigate to the project directory
cd /Users/joshuaarnold/Documents/GitHub/Yean-Cat

# Set the GitHub remote URL with token
echo "Setting GitHub remote URL..."
git remote set-url origin https://JayArnoldProd:${GITHUB_TOKEN}@github.com/JayArnoldProd/Yean-Cat.git

# Add all changes
echo "Adding changes..."
git add .

# Commit with the provided message
echo "Committing changes..."
git commit -m "$COMMIT_MESSAGE"

# Force push to main
echo "Pushing to GitHub with force..."
git push origin main --force

echo "Force push completed successfully!"

== End: force_push.sh.txt

== Begin: backup.sh.txt
#!/bin/bash

# Function to backup a directory with specific file pattern
backup_directory() {
    local source_dir=$1
    local backup_file=$2
    local pattern=$3

    # Clear the backup file before writing new data
    : > "$backup_file"

    echo "Backing up files from $source_dir to $backup_file..."
    find "$source_dir" -type f -name "$pattern" | while read -r file; do
        echo "== Begin: ${file##*/}" >> "$backup_file"
        # Handle binary files properly to prevent corruption
        if [[ $file == *.pyc ]]; then
            xxd "$file" >> "$backup_file"
        else
            cat "$file" >> "$backup_file"
        fi
        echo -e "\n== End: ${file##*/}\n" >> "$backup_file"
    done
    echo "Backup completed for $source_dir to $backup_file"
}

# Ensure the code_backups directory exists
mkdir -p code_backups

# List of directories to backup
backup_dirs=(
    "code_text/GIT_GPT_SERVER/scripts"
    "code_text/GIT_GPT_SERVER/Logs"
    "code_text/GIT_GPT_SERVER/routes"
    "code_text/GIT_GPT_SERVER/scripts/tests"
    "code_text/GIT_GPT_SERVER/utils"
    "code_text/GIT_GPT_SERVER/prompts"
)

# Backup each directory
for dir in "${backup_dirs[@]}"; do
    backup_file="code_backups/$(basename "$dir")_backup.txt"
    backup_directory "$dir" "$backup_file" "*.txt"
done

# Backup specific groups of files
backup_directory "code_text" "code_backups/documentation_backup.txt" "README.md.txt intro.txt.txt format_description.txt.txt"
backup_directory "code_text" "code_backups/config_backup.txt" "*.py.txt *.toml.txt *.txt"  # Wildcard pattern to capture all relevant config files
backup_directory "code_text" "code_backups/metadata_backup.txt" "*.txt"  # Adjusted to capture all .txt files in metadata

echo "Ensuring all files in code_text have the correct extensions..."
echo "Backup script completed successfully!"

== End: backup.sh.txt

== Begin: backup_config.sh.txt
#!/bin/bash

# Define directories and files to be backed up
directories=(
    "GIT_GPT_SERVER/scripts"
    "GIT_GPT_SERVER/Logs"
    "GIT_GPT_SERVER/.github"
    "GIT_GPT_SERVER/routes"
    "GIT_GPT_SERVER/tests"
    "GIT_GPT_SERVER/utils"
    "GIT_GPT_SERVER/prompts"
)

# Logical groups for miscellaneous files
group1=("README.md" "GIT_GPT_SERVER/intro.txt" "GIT_GPT_SERVER/format_description.txt")
group2=("GIT_GPT_SERVER/__init__.py" "GIT_GPT_SERVER/config.py" "GIT_GPT_SERVER/flask_pid.txt" "GIT_GPT_SERVER/server.py")
group3=("script_list.txt" "command_list.txt" "server_script_list.txt" "server_command_list.txt")
group4=("bug_list.json" "planned_features.json" "package.json" "requirements.txt" "pyproject.toml")
group5=(".gitignore" ".gitattributes" ".slugignore" ".env" "Procfile")

== End: backup_config.sh.txt

== Begin: backup_code_text.sh.txt
#!/bin/bash

# Create the code_text directory in the root
mkdir -p code_text/GIT_GPT_SERVER/github/workflows

# Function to copy and rename files with .txt extension
copy_and_rename() {
    local src_file=$1
    local dest_file=$2
    cp "$src_file" "${dest_file}.txt"
    echo "Copied and renamed $src_file to ${dest_file}.txt"
}

# Recursive function to copy and rename files in directories
copy_dir_and_rename() {
    local src_dir=$1
    local dest_dir=$2

    mkdir -p "$dest_dir"
    for file in "$src_dir"/*; do
        if [ -d "$file" ]; then
            local sub_dir=$(basename "$file")
            if [[ "$sub_dir" == .* || "$sub_dir" == __pycache__ ]]; then
                continue
            fi
            copy_dir_and_rename "$file" "$dest_dir/$sub_dir"
        else
            filename=$(basename "$file")
            if [[ "$filename" == "__init__.py" ]]; then
                continue
            fi
            extension="${file##*.}"
            base="${file%.*}"
            copy_and_rename "$file" "$dest_dir/$(basename "$base").$extension"
        fi
    done
}

# Copy files to the code_text directory and rename with .txt extension
echo "Copying and converting files to code_text directory..."
copy_and_rename README.md code_text/README.md
copy_and_rename command_list.txt code_text/command_list.txt
copy_and_rename config.py code_text/config.py
copy_and_rename flask_pid.txt code_text/flask_pid.txt
copy_and_rename format_description.txt code_text/format_description.txt
copy_and_rename intro.txt code_text/intro.txt
copy_and_rename package.json code_text/package.json
copy_and_rename planned_features.json code_text/planned_features.json
copy_and_rename pyproject.toml code_text/pyproject.toml
copy_and_rename requirements.txt code_text/requirements.txt
copy_and_rename runtime.txt code_text/runtime.txt
copy_and_rename script_list.txt code_text/script_list.txt
copy_and_rename server.py code_text/server.py
copy_and_rename server_command_list.txt code_text/server_command_list.txt
copy_and_rename server_script_list.txt code_text/server_script_list.txt

# Copy GIT_GPT_SERVER directory structure to code_text and rename with .txt extension
copy_dir_and_rename GIT_GPT_SERVER code_text/GIT_GPT_SERVER

# Copy .github/workflows/main.yml to code_text/GIT_GPT_SERVER/github/workflows
if [ -f ".github/workflows/main.yml" ]; then
    copy_and_rename ".github/workflows/main.yml" "code_text/GIT_GPT_SERVER/github/workflows/main.yml"
else
    echo "File .github/workflows/main.yml does not exist"
fi

# Copy .gitignore, .slugignore, and .gitattributes to code_text
if [ -f ".gitignore" ]; then
    copy_and_rename ".gitignore" "code_text/gitignore"
else
    echo "File .gitignore does not exist"
fi

if [ -f ".slugignore" ]; then
    copy_and_rename ".slugignore" "code_text/slugignore"
else
    echo "File .slugignore does not exist"
fi

if [ -f ".gitattributes" ]; then
    copy_and_rename ".gitattributes" "code_text/gitattributes"
else
    echo "File .gitattributes does not exist"
fi

echo "Code text backup completed successfully!"

== End: backup_code_text.sh.txt

== Begin: print_env.py.txt
# print_env.py
from dotenv import load_dotenv
import os

load_dotenv()

print("GITHUB_API_URL:", os.getenv('GITHUB_API_URL'))
print("GITHUB_TOKEN:", os.getenv('GITHUB_TOKEN'))
print("ASSISTANT_ID:", os.getenv('ASSISTANT_ID'))  # Ensure this is correctly named in Heroku
print("PINECONE_API_KEY:", os.getenv('PINECONE_API_KEY'))
print("PINECONE_INDEX_NAME:", os.getenv('PINECONE_INDEX_NAME'))
print("GITHUB_USERNAME:", os.getenv('GITHUB_USERNAME'))

== End: print_env.py.txt

== Begin: code_backup.sh.txt
#!/bin/bash

# Step 1: Run backup_code_text.sh
echo "Running backup_code_text.sh..."
./GIT_GPT_SERVER/scripts/backup_code_text.sh

# Step 2: Run backup.sh
echo "Running backup.sh..."
./GIT_GPT_SERVER/scripts/backup.sh

# Step 3: Run generate_hierarchy.sh
echo "Running generate_hierarchy.sh..."
./GIT_GPT_SERVER/scripts/generate_hierarchy.sh

echo "Code backup process completed successfully!"

== End: code_backup.sh.txt

== Begin: test_prompt.txt.txt
Introduction:
This prompt is designed to diagnose and provide a solution for a bug in the console of the Yean-Cat project.

Bug Description:
The console is experiencing a bug where it fails to execute certain commands correctly. Specifically, when the 'spawn_enemy' command is issued, the game does not spawn an enemy as expected. This issue occurs intermittently and seems to be related to the game's state or the sequence of previous commands.

Steps to Reproduce:
1. Start the game.
2. Open the console.
3. Enter the 'spawn_enemy' command.
4. Observe that no enemy is spawned, or an error message is displayed.

Relevant Scripts:
Script 1: console_command.gml

// Example script content for console_command.gml
if (command == "spawn_enemy") {
    if (game_state == "running") {
        instance_create_layer(x, y, "Enemies", obj_enemy);
    } else {
        show_debug_message("Cannot spawn enemy: Game is not in running state.");
    }
}

// Example script content for obj_enemy.gml
event_inherited();
hp = 100;
speed = 3;

// Example content for obj_console
if (keyboard_check_pressed(vk_enter)) {
    execute_console_command();
}
Logs:
No relevant logs for this bug.
== End: test_prompt.txt.txt

== Begin: logs.py.txt
# GIT_GPT_SERVER/routes/logs.py
import os
from flask import jsonify, Blueprint
from config import LOG_PATH
from utils.sanitize_logs import sanitize_log_content

logs_route = Blueprint('logs_route', __name__)

@logs_route.route('/api/update_code/pull_logs', methods=['POST'])
def pull_logs():
    log_dir = os.path.dirname(LOG_PATH)
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
        return jsonify({"error": "Logs directory does not exist. Directory created."}), 404
    if not os.path.exists(LOG_PATH):
        with open(LOG_PATH, 'w', encoding='utf-8') as file:
            file.write('')
        return jsonify({"error": "Log file does not exist. File created."}), 404
    try:
        with open(LOG_PATH, 'r', encoding='utf-8') as file:
            content = file.read()
            sanitized_content = sanitize_log_content(content)
    except UnicodeDecodeError:
        with open(LOG_PATH, 'rb') as file:
            content = file.read().decode('latin-1')
            sanitized_content = sanitize_log_content(content)
    return {"content": sanitized_content}

@logs_route.route('/api/update_code/pull_logs_summary', methods=['POST'])
def pull_logs_summary():
    logs_dir = 'GIT_GPT_SERVER/Logs'
    logs_summary = []

    if os.path.exists(logs_dir):
        for log_file in os.listdir(logs_dir):
            log_path = os.path.join(logs_dir, log_file)
            if os.path.isfile(log_path):
                with open(log_path, 'r') as file:
                    lines = file.readlines()
                    summary = lines[:5]  # Get the first 5 lines as summary
                    sanitized_summary = [sanitize_log_content(line) for line in summary]
                    logs_summary.append({
                        "filename": log_file,
                        "summary": ''.join(sanitized_summary)
                    })
        return jsonify({"logs_summary": logs_summary})
    else:
        return jsonify({"error": "Logs directory not found"}), 404

== End: logs.py.txt

== Begin: update_code.py.txt
from flask import Blueprint, jsonify, request
import os
import requests

update_code_route = Blueprint('update_code_route', __name__)

@update_code_route.route('/api/update_code', methods=['POST'])
def update_code():
    data = request.get_json()
    file_path = data.get('file_path')
    new_content = data.get('new_content')
    commit_message = data.get('commit_message')

    if not file_path or not new_content or not commit_message:
        return jsonify({"error": "Missing required fields"}), 400

    GITHUB_API_URL = os.getenv('GITHUB_API_URL')
    GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')

    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json',
    }
    try:
        get_file_response = requests.get(f'{GITHUB_API_URL}/contents/{file_path}', headers=headers)
        get_file_response.raise_for_status()
        file_sha = get_file_response.json().get('sha')

        update_data = {
            'message': commit_message,
            'content': new_content.encode('utf-8').decode('ascii'),
            'sha': file_sha,
        }
        update_response = requests.put(f'{GITHUB_API_URL}/contents/{file_path}', headers=headers, json=update_data)
        update_response.raise_for_status()
        return jsonify(update_response.json())
    except requests.exceptions.RequestException as e:
        return jsonify({"error": str(e)}), 500

@update_code_route.route('/api/update_code/pull_logs', methods=['POST'])
def pull_logs():
    logs_dir = 'Logs'
    logs = {}

    if not os.path.exists(logs_dir):
        return jsonify({"error": "Logs directory does not exist."}), 404

    for log_file in os.listdir(logs_dir):
        if log_file.endswith('.txt'):
            try:
                with open(os.path.join(logs_dir, log_file), 'r') as file:
                    logs[log_file] = file.read()
            except FileNotFoundError:
                logs[log_file] = "Log file not found."
            except Exception as e:
                logs[log_file] = str(e)

    return jsonify(logs)

@update_code_route.route('/api/update_code/pull_logs_summary', methods=['POST'])
def pull_logs_summary():
    logs_dir = 'Logs'
    logs_summary = []

    if os.path.exists(logs_dir):
        for log_file in os.listdir(logs_dir):
            log_path = os.path.join(logs_dir, log_file)
            if os.path.isfile(log_path):
                with open(log_path, 'r') as file:
                    lines = file.readlines()
                    summary = lines[:5]  # Get the first 5 lines as summary
                    logs_summary.append({
                        "filename": log_file,
                        "summary": ''.join(summary)
                    })
        return jsonify({"logs_summary": logs_summary})
    else:
        return jsonify({"error": "Logs directory not found"}), 404

== End: update_code.py.txt

== Begin: generate_prompt.py.txt
from flask import Blueprint, jsonify, request
import os
import json
from threading import Lock

generate_prompt_route = Blueprint('generate_prompt_route', __name__)

thread_lock = Lock()
user_threads = {}

def read_file(filepath):
    try:
        with open(filepath, 'r') as file:
            return file.read()
    except FileNotFoundError:
        return None

def write_file(filepath, content):
    with open(filepath, 'w') as file:
        file.write(content)

@generate_prompt_route.route('/generate_prompt', methods=['POST'])
def generate_prompt():
    data = request.get_json()
    prompt_type = data.get('type')
    item_name = data.get('name')
    save_name = data.get('save_name')
    thread_id = data.get('thread_id', 'default')
    additional_instructions = data.get('additional_instructions', '')

    if not save_name or not thread_id:
        return jsonify({"error": "Invalid input, 'save_name' and 'thread_id' fields are required"}), 400

    intro = read_file('intro.txt')
    format_description = read_file('format_description.txt')

    if not intro or not format_description:
        return jsonify({"error": "Intro or format description files not found"}), 400

    try:
        if prompt_type == 'bug':
            with open('bug_list.json', 'r') as f:
                bug_list = json.load(f)
            item = next((bug for bug in bug_list if bug['name'] == item_name), None)
            if not item:
                return jsonify({"error": "Bug not found"}), 400

        elif prompt_type == 'feature':
            with open('planned_features.json', 'r') as f:
                feature_list = json.load(f)
            item = next((feature for feature in feature_list if feature['name'] == item_name), None)
            if not item:
                return jsonify({"error": "Feature not found"}), 400

        else:
            return jsonify({"error": "Invalid prompt type"}), 400
    except json.JSONDecodeError as e:
        return jsonify({"error": f"JSON Decode Error: {e}"}), 500

    prompt = f"{intro}\n\n{item['description']}\n\n{format_description}\n\nAdditional Instructions: {additional_instructions}\n\n"

    for script in item['related_scripts']:
        script_path = f"YEAN CAT/scripts/{script}/{script}.gml"
        script_content = read_file(script_path)
        if script_content:
            prompt += f"Script {script}:\n{script_content}\n\n"

    for obj in item['related_objects']:
        obj_path = f"YEAN CAT/objects/{obj}/"
        if os.path.isdir(obj_path):
            for filename in os.listdir(obj_path):
                if filename.endswith('.gml'):
                    file_content = read_file(os.path.join(obj_path, filename))
                    if file_content:
                        prompt += f"Object {obj} ({filename}):\n{file_content}\n\n"

    log_contents = []
    for log in item['logs']:
        log_content = read_file(f'Logs/{log}')
        if log_content:
            log_contents.append(log_content)
    prompt += "Logs:\n" + "\n".join(log_contents) + "\n\n"

    prompt_file_path = f'prompts/{save_name}.txt'
    write_file(prompt_file_path, prompt)

    with thread_lock:
        if thread_id not in user_threads:
            user_threads[thread_id] = []
        user_threads[thread_id].append(prompt)

    return jsonify({"message": f"Prompt saved as '{prompt_file_path}'"})

== End: generate_prompt.py.txt

== Begin: assistant.py.txt
from flask import Blueprint, request, jsonify
import threading
import requests
import os

assistant_route = Blueprint('assistant_route', __name__)

thread_lock = threading.Lock()
user_threads = {}

@assistant_route.route('/assistant', methods=['POST'])
def assistant():
    data = request.get_json()
    message = data.get('message')
    thread_id = data.get('thread_id', 'default')
    if not message:
        return jsonify({"error": "Invalid input, 'message' field is required"}), 400

    with thread_lock:
        if thread_id not in user_threads:
            user_threads[thread_id] = []

    try:
        response = requests.post(
            'https://api.openai.com/v1/assistants',
            headers={'Authorization': f'Bearer ' + os.getenv("ASSISTANT_API_KEY")},
            json={
                'message': message,
                'thread_id': thread_id,
                'context': user_threads[thread_id]
            }
        )
        response.raise_for_status()
        assistant_response = response.json()

        with thread_lock:
            user_threads[thread_id].append({"role": "assistant", "content": assistant_response['message']})

        return jsonify(assistant_response)
    except requests.exceptions.RequestException as e:
        return jsonify({"error": str(e)}), 500

== End: assistant.py.txt

== Begin: query.py.txt
from flask import Blueprint, jsonify
from GIT_GPT_SERVER.utils.pinecone_operations import init_pinecone_index, upsert_vectors_to_pinecone

# Define your blueprint and routes here
query_openai_route = Blueprint('query_openai_route', __name__)

index_name = "yean-cat-git-gpt-index"  # Use the correct index name
pinecone_instance = init_pinecone_index(index_name)
index = pinecone_instance.Index(index_name)

@query_openai_route.route('/query', methods=['POST'])
def query_openai():
    # Your endpoint logic here
    return jsonify({"message": "Pinecone index queried successfully"})

@query_openai_route.route('/generate_prompt', methods=['POST'])
def generate_prompt():
    # Your endpoint logic here
    return jsonify({"message": "GPT prompt generated successfully"})

@query_openai_route.route('/update_code', methods=['POST'])
def update_code():
    # Your endpoint logic here
    return jsonify({"message": "Code updated successfully"})

@query_openai_route.route('/assistant', methods=['POST'])
def assistant():
    # Your endpoint logic here
    return jsonify({"message": "Assistant query successful"})

== End: query.py.txt

== Begin: config.py.txt
# config.py
from dotenv import load_dotenv
import os

load_dotenv()

PORT = int(os.getenv('PORT', 5000))  # Default to port 5000 if not set
DEBUG_MODE = os.getenv('DEBUG_MODE', 'True').lower() in ['true', '1', 't']

# API keys and other configuration
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
GITHUB_API_URL = os.getenv('GITHUB_API_URL')
ASSISTANT_ID = os.getenv('ASSISTANT_ID')
PINECONE_API_KEY = os.getenv('PINECONE_API_KEY')
PINECONE_INDEX_NAME = os.getenv('PINECONE_INDEX_NAME')
GITHUB_USERNAME = os.getenv('GITHUB_USERNAME')

== End: config.py.txt

== Begin: server.py.txt
from flask import Flask, jsonify
import sys
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Add the utils directory to the sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'utils'))

# Ensure environment variables are set for PORT and DEBUG_MODE
try:
    from config import PORT, DEBUG_MODE
except ImportError:
    PORT = 5000
    DEBUG_MODE = True

# Importing blueprints
from routes.update_code import update_code_route
from routes.query_openai import query_openai_route
from routes.generate_prompt import generate_prompt_route
from routes.assistant import assistant_route
from routes.logs import logs_route

app = Flask(__name__)

# Registering blueprints
app.register_blueprint(update_code_route)
app.register_blueprint(query_openai_route)
app.register_blueprint(generate_prompt_route)
app.register_blueprint(assistant_route)
app.register_blueprint(logs_route)

@app.route('/')
def home():
    return jsonify({"message": "Welcome to the Yean Cat GPT API!"})

# Add a debug route to check if the app is running
@app.route('/debug', methods=['GET'])
def debug():
    return jsonify({"status": "Server is running", "routes": [str(rule) for rule in app.url_map.iter_rules()]})

if __name__ == '__main__':
    app.run(debug=DEBUG_MODE, host='0.0.0.0', port=PORT)

== End: server.py.txt

== Begin: slugignore.txt
*.log
node_modules
*.pyc
conda-meta
lib/python*/site-packages/conda
lib/python*/site-packages/tensorboardX
lib/python*/site-packages/protobuf

# Exclude large directories in YEAN_CAT
YEAN_CAT/sprites/
YEAN_CAT/sounds/

# Exclude large directories in YEAN_CAT_SERVER
YEAN_CAT_SERVER/sprites/
YEAN_CAT_SERVER/sounds/

# Exclude node_modules directories
**/node_modules

== End: slugignore.txt

== Begin: server_script_list.txt.txt
get_console_command
handleDebugMessage

== End: server_script_list.txt.txt

== Begin: README.md.txt
# Yean Cat - Comprehensive Guide

## Overview
Yean Cat is a 2D side-scrolling open-world game developed using GameMaker Studio 2. The game features multiple planets, player progression, and rhythm-based elements, creating an engaging and whimsical universe filled with humor, challenges, and pop culture references.

## Features
- **Multiplayer Functionality**: Engage with friends and other players in a dynamic multiplayer environment.
- **Dynamic Quests and Content Generation**: Experience procedurally generated quests that keep gameplay fresh and exciting.
- **Gamepad Support**: Fully compatible with Xbox, PS5, and Switch controllers for an immersive gaming experience.

## Setup
1. **Clone the Repository**: `git clone https://github.com/your-repo/Yean-Cat.git`
2. **Open the Project**: Open the project in GameMaker Studio 2.
3. **Follow Additional Configuration**: Refer to `docs/setup.md` for detailed setup instructions.

## Usage
- **Command System**: Use the in-game command system to create and manage game content efficiently.
- **Help Menu**: Access the in-game help menu for command syntax and usage examples.

## Contributing
Currently, this project is maintained by a single developer. Contributions are not open at this time.

---

## Detailed Game Description

### Objective and Goals
Yean Cat invites players into a whimsical universe filled with humor, challenges, and pop culture references. Our goal is to provide an entertaining escape while fostering a community that appreciates creativity, fun, and the occasional absurdity.

### Key Benefits and Features
- **Unique Art Style**: Stand out with visually captivating graphics and animations.
- **Engaging Mechanics**: Enjoy dynamic and immersive gameplay.
- **Pop Culture References**: Relish the nods to various aspects of Kanye West’s journey and other cultural icons.

### Planets and Themes
1. **Earth (The College Dropout)**: Represents Kanye's early career and educational journey.
2. **Gold Mines (Late Registration)**: Focuses on fame and controversies.
3. **Universe City (Graduation)**: Symbolizes global ascent and collaborations.
4. **Icy Heart (808s & Heartbreak)**: Centers on emotional struggles and introspection.
5. **Fantasia (My Beautiful Dark Twisted Fantasy)**: Represents artistic creativity and grandeur.
6. **King's Kingdom (Watch the Throne)**: Symbolizes power, legacy, and collaboration.
7. **Land of Lucy (Ye)**: Focuses on personal struggles and mental health.
8. **Yetopia (Yeezus)**: Represents rebellion and raw energy.
9. **Place of Pablo (The Life of Pablo)**: Captures chaos and artistic experimentation.
10. **Divine Domain (Jesus Is King)**: Focuses on spirituality and faith.
11. **Ghost Town (Kids See Ghosts)**: Addresses mental health and inner demons.
12. **Stormy Sands (Donda)**: Symbolizes grief, healing, and legacy.
13. **Vulture Valley (Vultures)**: Revolves around scrutiny and resilience.
14. **The Endonda (Donda 3)**: Represents culmination and future anticipation.

### Weapons and Their Significance
- **Nerd Blaster (Yean Cat)**: Basic projectile weapon representing Kanye's early career.
- **Flashing Lights (Taylor Swan)**: Emits area damage, symbolizing media attention.
- **Holy Water (Futurtle)**: Causes splash damage, reflecting struggles and redemption.
- **Cellphone (Kim Chameleon)**: Fires tweets as projectiles, representing social media influence.
- **Fire (Travis Squawk)**: Random fire projectiles, symbolizing energetic performances.
- **Fantasy (Bee-yonce)**: Constant area damage, representing a larger-than-life persona.
- **Chains (Peacocky Six Nine)**: Spinning chains causing damage, reflecting a flashy lifestyle.
- **The Storm (Lil Hump)**: Path damage projectiles, symbolizing turbulent rise to fame.
- **Pisces (Rehino)**: Back and forth fish projectiles, reflecting fluid music style.
- **Chakra (Emunem)**: Orbs causing damage, representing multifaceted career.
- **Saint Pablo Sword (21 Salamander)**: Orbiting sword causing high damage.
- **Wolf (Lil Sheep)**: Wolf projectiles, representing inner demons.
- **Moon (Squid Cudi)**: Orbits player causing damage, reflecting introspective themes.
- **808 Drum (Kid Boo)**: Rhythmic area damage, representing bass-heavy music style.
- **M1911 (Dracoon)**: Auto-aiming projectile weapon, symbolizing precision in music industry.

### Abilities and Interactions
- **Life of the Party (Earth)**: Increases attack rate.
- **Love (Earth)**: Increases maximum health.
- **Spectacle (Gold Mines)**: Increases projectile size.
- **Wealth (Gold Mines)**: Increases dollar pickups frequency.
- **Graduate (Universe City)**: Increases experience points gained.
- **Fame (Universe City)**: Increases global level faster.
- **Law of Attraction (Icy Heart)**: Increases pickup radius.
- **Heartbreak (Icy Heart)**: Reflects damage taken to enemies.
- **Power (Fantasia)**: Increases damage dealt.
- **Monster (Fantasia)**: Grants chance of critical hits.
- **Ego (King's Kingdom)**: Increases damage resistance.
- **Wisdom (King's Kingdom)**: Increases item pickups' effect and duration.
- **Mercy (Land of Lucy)**: Temporary damage resistance.
- **Donda’s Blessing (Land of Lucy)**: Increases damage when below half health.
- **Free Will (Yetopia)**: Improves control and handling.
- **Prescription (Yetopia)**: Drops a pill reducing level duration.
- **Heart (Place of Pablo)**: Increases health regeneration.
- **Einstein (Place of Pablo)**: Boosts other passive abilities.
- **Faith (Divine Domain)**: Heals damage dealt to enemies.
- **Miracle (Divine Domain)**: Grants revives with half health.
- **Vanish Mode (Ghost Town)**: Grants temporary invincibility.
- **Curse (Ghost Town)**: Increases enemy health, quantity, and speed.
- **Longevity (Stormy Sands)**: Increases weapon effect duration.
- **Luck (Stormy Sands)**: Increases luck for beneficial drops.
- **Clone (Vulture Valley)**: Increases projectile amount.
- **Wonder (Vulture Valley)**: Increases projectile speed.
- **Champion (The Endonda)**: Grants chance to dodge an attack.

---

## Task System
- **Objectives**: Unlock abilities, items, weapons, and characters by completing tasks.
- **Variety**: Tasks range from defeating enemies to surviving specific durations with certain characters.
- **Progression**: Completing tasks tied to abilities unlocks them for the player.

### Game Progression and Challenges
- **Advancement**: Players progress by completing tasks and defeating bosses, unlocking new content.
- **Replayability**: Randomized elements and unlockable content provide fresh experiences in each playthrough.

---

## Strategies and Tips
- **Master Mechanics**: Understand the unique mechanics to excel in the game.
- **Explore Planets**: Embrace challenges on different planets.
- **Unveil the Mystery**: Navigate through the storyline.
- **Blend Addiction with Fun**: Enjoy addictive gameplay and light-hearted fun.
- **Appreciate Satire**: Engage with the game's satirical elements.
- **Challenge Yourself**: Embrace the game's designed difficulty.
- **Make a Statement**: Recognize the game's deeper social commentary.
- **Immerse in Art Style**: Appreciate the unique visual experience.
- **Engage with References**: Uncover pop culture references throughout the game.
- **Discover Mechanics**: Experience engaging gameplay mechanics.
- **Share Your Journey**: Connect with other players online.
- **Join Conversations**: Engage in discussions about the game's themes and commentary.

---

## Narrative Elements
- **Story and Lore**: Detailed backstories and connections between characters enhance the game world.
- **Character Development**: Each character has unique backstories intertwining with the game's universe.

---

## Community and Leaderboard Aspects
- **Leaderboard**: Engage with the leaderboard and player login code.
- **Community Events**: Participate in online challenges and community events.

---

## Future Updates and Expansions
- **New Content**: Look forward to new characters, planets, abilities, and storylines.
- **Community Involvement**: Stay tuned for updates and expansions driven by community feedback.

---

## Fan Contributions and Customizations
- **Fan Involvement**: Opportunities for fans to contribute to the game's development.
- **Customization Options**: Personalize the gaming experience.

---

## Target Audiences

### Max Gamer
- **Description**: Energetic streamer who loves challenging games and humorous experiences.
- **Voice and Tone**: Humorous and playful.
- **Engagement Strategy**: Showcase challenging gameplay with humorous commentary, and collaborate for live streams or gameplay videos.

### Indie Game Enthusiasts
- **Description**: Gamers who appreciate unique and innovative indie games.
- **Voice and Tone**: Authentic and engaging.
- **Engagement Strategy**: Highlight unique art style and engaging mechanics, and share behind-the-scenes content and developer interviews.

### Global Gamers
- **Description**: Gamers from around the world interested in diverse gaming experiences.
- **Voice and Tone**: Inclusive and exciting.
- **Engagement Strategy**: Promote global appeal and translated versions, and feature international gaming influencers.

---

## Highlights of Yean Cat
1. **Whimsical Universe**: Entertaining escape filled with humor and challenges.
2. **Unique Art Style**: Visually captivating graphics and animations.
3. **Engaging Mechanics**: Dynamic and immersive gameplay.
4. **Community Building**: Foster a tight-knit, global community.
5. **Depth and Defiance**: Deliver a social commentary and meaningful engagement.

---

## Analysis of Competing Products

### Vampire Survivors
- **Description**: Side-scrolling adventure with unique art and engaging mechanics.
- **Strengths**: Unique art style, engaging mechanics, atmospheric storytelling.
- **Marketing Strategy**: Highlight humor, community aspect, and pop culture references.

### Pop Culture Adventure
- **Description**: Side-scrolling game with pop culture references.
- **Strengths**: Extensive references, humor, challenges.
- **Marketing Strategy**: Emphasize satire, unique mechanics, and art style.

### Celebrity Quest
- **Description**: Adventure game involving celebrity interactions.
- **Strengths**: Celebrity interactions, fan-driven content, social media integration.
- **Marketing Strategy**: Highlight artistic style, satire, and social commentary.

---

## Research Sources
- **Gaming Forums and Communities**: Discussions and reviews from gamers.
- **Gaming Websites and Blogs**: In-depth reviews and analysis.
- **Market Research Reports**: Insights into target audience preferences and gaming trends.

---

## Conclusion Part 1.
Yean Cat is designed to be more than just a game. It's an experience that blends humor, challenges, and social commentary, creating a unique and engaging universe. With its distinctive art style, dynamic mechanics, and community-focused approach, Yean Cat aims to captivate a wide audience and foster a global gaming community. By understanding the target audience and differentiating from competitors, Yean Cat is poised to make a significant impact in the indie gaming world.

# Yean Cat System and Vision - Comprehensive Guide

## Overview
The Yean Cat system represents a sophisticated integration of game development, automation, and cloud-based infrastructure designed to support the continuous evolution of the Yean Cat game. This system leverages advanced technologies, automation scripts, and robust architecture to ensure seamless development, deployment, and management of the game. It embodies the ambition to create a dynamic, adaptable, and scalable framework that can support future expansions and community-driven enhancements.

## Vision and Ambition
### Dynamic Development Environment
Our vision is to create a dynamic development environment that facilitates seamless collaboration, rapid iteration, and efficient management of game assets and code. By integrating automation and cloud services, we aim to minimize manual interventions and enhance the overall productivity of the development process.

### Continuous Deployment and Integration
We strive to establish a robust continuous deployment and integration pipeline that ensures the game is always in a releasable state. This involves automated testing, code validation, and deployment processes that maintain high standards of code quality and stability.

### Scalable Infrastructure
The infrastructure is designed to scale effortlessly with the growing demands of the game and its community. By leveraging cloud services, we ensure that the system can handle increased load, provide reliable uptime, and deliver optimal performance regardless of the number of concurrent users.

### Community-Driven Enhancements
One of our key ambitions is to foster a vibrant community around Yean Cat, enabling players and developers to contribute to its evolution. This includes providing tools and frameworks that allow for the creation and integration of user-generated content, as well as incorporating community feedback into the development process.

### Automation and Efficiency
Efficiency is at the core of our system design. By automating repetitive tasks and integrating intelligent tools, we aim to reduce the time and effort required for routine operations, allowing the development team to focus on innovation and creativity.

---

## System Architecture and Components

### Repository Structure
The Yean Cat repository is organized into several key components that facilitate efficient development and management:
- **Root Directory**: Contains the primary project files and configurations.
- **Client and Game Server Directories**: Segregate client-side and server-side code to streamline development and deployment processes.
- **Automation Scripts**: A suite of scripts designed to automate various tasks such as backups, hierarchy generation, and deployment.
- **Documentation**: Comprehensive documentation to guide developers through setup, usage, and contribution processes.

### Key Components
1. **Automation Scripts**: Scripts that automate backups, hierarchy generation, and deployment processes.
2. **Cloud Integration**: Leveraging cloud services for storage, deployment, and scalability.
3. **Version Control**: Using GitHub for version control, collaboration, and code management.
4. **Continuous Integration/Continuous Deployment (CI/CD)**: Automated pipelines for testing, building, and deploying the game.

### Hierarchy Generation
The system includes scripts for generating hierarchical representations of the project structure, which are essential for maintaining organization and ensuring that all components are accounted for. These hierarchies provide a clear overview of the project and assist in navigating the complex structure of the game.

### Backup and Restore
Automated backup scripts ensure that all critical project files are regularly backed up and stored securely. This includes code, configurations, logs, and other essential data. The restore process is equally streamlined, allowing for quick recovery in case of data loss or corruption.

### Testing and Validation
Automated testing frameworks are integrated into the system to validate code changes before deployment. This includes unit tests, integration tests, and end-to-end tests to ensure the stability and functionality of the game.

---

## Detailed System Description

### Repository and Version Control
The Yean Cat repository is the cornerstone of the development process. It is meticulously organized to facilitate easy navigation, efficient management, and seamless collaboration. Key aspects include:
- **Branch Management**: Using branches for feature development, bug fixes, and releases to maintain a clean and organized codebase.
- **Pull Requests and Code Reviews**: Implementing a robust workflow for reviewing and merging code changes to ensure high-quality contributions.
- **Issue Tracking**: Utilizing GitHub Issues to track tasks, bugs, and feature requests, ensuring transparency and accountability.

### Automation Scripts
Automation scripts are designed to streamline repetitive tasks, reduce human error, and enhance productivity. Key scripts include:
- **Backup Script**: Automates the process of backing up critical project files to a secure location.
- **Hierarchy Generation Script**: Generates hierarchical representations of the project structure, aiding in organization and navigation.
- **Deployment Script**: Facilitates the deployment of the game to the cloud, ensuring that the latest version is always available to players.

### Continuous Integration/Continuous Deployment (CI/CD)
CI/CD pipelines are integral to the Yean Cat system, ensuring that code changes are automatically tested, built, and deployed. Key elements include:
- **Automated Testing**: Running unit tests, integration tests, and end-to-end tests on every code change to ensure stability and functionality.
- **Build Automation**: Automating the build process to compile and package the game for deployment.
- **Deployment Automation**: Deploying the game to the cloud, ensuring that the latest version is always available to players.

### Cloud Integration
Leveraging cloud services is essential for scalability, reliability, and performance. Key integrations include:
- **Cloud Storage**: Storing backups, logs, and other critical data securely in the cloud.
- **Cloud Deployment**: Deploying the game to cloud servers to ensure high availability and optimal performance.
- **Scalability**: Ensuring that the system can handle increased load and scale seamlessly with the growing player base.

---

## Task System and Game Development Workflow

### Objectives and Goals
The task system is designed to streamline the development process, ensuring that tasks are clearly defined, prioritized, and tracked. Key aspects include:
- **Task Management**: Using tools like Trello or JIRA to manage tasks, track progress, and ensure accountability.
- **Milestones and Deadlines**: Setting clear milestones and deadlines to ensure timely delivery of features and updates.
- **Collaboration**: Facilitating collaboration among team members through regular meetings, code reviews, and communication channels.

### Development Workflow
The development workflow is designed to be efficient, collaborative, and iterative. Key steps include:
- **Planning**: Defining tasks, setting priorities, and planning sprints.
- **Development**: Writing code, implementing features, and fixing bugs.
- **Testing**: Running automated tests to validate code changes.
- **Code Review**: Reviewing code changes to ensure quality and adherence to standards.
- **Deployment**: Deploying the game to the cloud, ensuring that the latest version is available to players.

---

## Community and Contributions

### Fostering a Community
One of our key ambitions is to foster a vibrant community around Yean Cat. This includes providing tools and frameworks that allow players and developers to contribute to the game's evolution. Key aspects include:
- **User-Generated Content**: Providing tools and frameworks that enable players to create and share their own content.
- **Community Events**: Organizing community events, challenges, and competitions to engage players and encourage participation.
- **Feedback and Collaboration**: Incorporating community feedback into the development process and encouraging collaboration through forums, social media, and other channels.

### Contribution Guidelines
While contributions are currently not open, we have a clear vision for how we will manage contributions in the future. Key guidelines include:
- **Contribution Process**: Clearly defined process for submitting contributions, including pull requests, code reviews, and testing.
- **Code of Conduct**: Establishing a code of conduct to ensure a respectful and inclusive community.
- **Documentation**: Providing comprehensive documentation to guide contributors through the setup, development, and submission processes.

---

## Future Plans and Expansions

### Continuous Improvement
Our vision is to continuously improve the Yean Cat system by integrating new technologies, enhancing automation, and optimizing performance. Key areas of focus include:
- **Advanced Automation**: Integrating more advanced automation tools and scripts to further streamline the development process.
- **Enhanced Testing**: Expanding our testing framework to include more comprehensive tests and validation processes.
- **Scalability Enhancements**: Continuously optimizing our cloud infrastructure to ensure scalability and reliability.

### Community-Driven Development
We aim to involve the community more actively in the development process, incorporating their feedback and contributions to shape the future of Yean Cat. Key initiatives include:
- **Community Polls and Surveys**: Gathering feedback through polls and surveys to understand player preferences and priorities.
- **Open Source Contributions**: Opening up the project to community contributions, with clear guidelines and processes in place.

---

## Comprehensive Documentation

### Setup and Configuration
Detailed documentation to guide developers through the setup and configuration of the Yean Cat system. Key sections include:
- **Environment Setup**: Instructions for setting up the development environment, including required tools and dependencies.
- **Repository Structure**: Overview of the repository structure and key components.
- **Configuration Files**: Detailed explanations of configuration files and how to customize them for different environments.

### Usage and Commands
Comprehensive guide to using the Yean Cat system, including available commands, scripts, and tools. Key sections include:
- **Command Syntax**: Detailed syntax and usage examples for all available commands.
- **Automation Scripts**: Overview of automation scripts and how to use them effectively.
- **Deployment Process**: Step-by-step guide to deploying the game to the cloud.

### Troubleshooting and Support
Extensive troubleshooting guide to help developers resolve common issues and errors. Key sections include:
- **Common Errors**: List of common errors and how to resolve them.
- **Logs and Debugging**: Instructions for accessing and interpreting logs, and debugging issues.
- **Support Channels**: Information on available support channels and how to get help.

---

## Conclusion Pt.2 (The End)
The Yean Cat system represents a sophisticated integration of game development, automation, and cloud-based infrastructure designed to support the continuous evolution of the Yean Cat game. Our vision is to create a dynamic, adaptable, and scalable framework that fosters community-driven development and continuous improvement. By leveraging advanced technologies, automation, and robust architecture, we aim to deliver a seamless and engaging experience for both developers and players.

== End: README.md.txt

== Begin: config.py.txt
# config.py
from dotenv import load_dotenv
import os

load_dotenv()

PORT = int(os.getenv('PORT', 5000))  # Default to port 5000 if not set
DEBUG_MODE = os.getenv('DEBUG_MODE', 'True').lower() in ['true', '1', 't']

# API keys and other configuration
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
GITHUB_API_URL = os.getenv('GITHUB_API_URL')
ASSISTANT_ID = os.getenv('ASSISTANT_ID')
PINECONE_API_KEY = os.getenv('PINECONE_API_KEY')
PINECONE_INDEX_NAME = os.getenv('PINECONE_INDEX_NAME')
GITHUB_USERNAME = os.getenv('GITHUB_USERNAME')

== End: config.py.txt

== Begin: server.py.txt
from flask import Flask, jsonify
import sys
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Add the utils directory to the sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'utils'))

# Ensure environment variables are set for PORT and DEBUG_MODE
try:
    from config import PORT, DEBUG_MODE
except ImportError:
    PORT = 5000
    DEBUG_MODE = True

# Importing blueprints
from routes.update_code import update_code_route
from routes.query_openai import query_openai_route
from routes.generate_prompt import generate_prompt_route
from routes.assistant import assistant_route
from routes.logs import logs_route

app = Flask(__name__)

# Registering blueprints
app.register_blueprint(update_code_route)
app.register_blueprint(query_openai_route)
app.register_blueprint(generate_prompt_route)
app.register_blueprint(assistant_route)
app.register_blueprint(logs_route)

@app.route('/')
def home():
    return jsonify({"message": "Welcome to the Yean Cat GPT API!"})

# Add a debug route to check if the app is running
@app.route('/debug', methods=['GET'])
def debug():
    return jsonify({"status": "Server is running", "routes": [str(rule) for rule in app.url_map.iter_rules()]})

if __name__ == '__main__':
    app.run(debug=DEBUG_MODE, host='0.0.0.0', port=PORT)

== End: server.py.txt

== Begin: gitignore.txt
# GameMaker Studio 2 specific files
*.yyc
*.yyp
*.yys
*.yyw
*.yyz
*.yydebug
*.win
*.linux
*.osx
*.ios
*.android

# Temporary files
*.tmp
*.temp

# System files
.DS_Store
Thumbs.db

# Environment variables
.env
code_text/env.txt

flask_pid.txt
flask_pid.txt

*.pyc
__pycache__/

# Exclude text backups which may contain sensitive information
GIT_GPT_SERVER/code_text
GIT_GPT_SERVER/code_backups
GIT_GPT_SERVER/Logs
== End: gitignore.txt

== Begin: script_list.txt.txt
is_numeric_string
__input_config_gamepads
input_check_opposing_repeat
input_source_mode_get
__input_config_keyboard
calculateAngle
change_input_color
countLinesInString
input_trigger_effect_get_strength
string_last_index_of
scr_toggle_input_display
__input_class_player
input_cursor_coord_space_set
scr_disable_heartbeat
input_cursor_limit_boundary
sort_score
input_binding_scan_time_remaining
input_mouse_y
input_system_import
input_debug_player_input
input_player_get_gamepad
input_players_get_status
input_gamepad_check_released
__input_csv_to_array
input_system_export
parse_data_types
input_profile_copy
input_cursor_elastic_set
FirebaseFirestoreUserFunctions
__input_class_combo_state
adjustAngle
input_hotswap_params_set
input_profile_get_array
FirebaseREST_firestore_value
concat
__input_string_contains
input_mouse_x
input_ignore_key_add
__input_define_gamepad_types
input_cursor_speed_set
FirebaseFirestorePaths
FriebaseREST_Firestore_urlUpdateMask
input_check_opposing
input_vibrate_set_strength
input_verb_get_icon
__input_source_relinquish
__input_error
input_check_long
FirebaseREST_Firestore_path_isCollection
input_keyboard_virtual_show
input_system_reset
scr_loadtrack2
input_trigger_effect_get_state
logChatMessage
input_binding_mouse_wheel_down
input_player_connected_count
__input_config_external_data
__input_get_previous_time
input_combo_params_set_side_on
FirebaseREST_Firestore_collection_decode
input_binding_scan_start
input_mouse_capture_get
input_cursor_limit_remove
input_player_connected
update_chat_input_visuals
input_source_is_available
__input_config_profiles
input_mouse_check
input_binding_get_icon
input_check_long_pressed
input_player_active_set
currentSyncedTime
input_is_analogue
input_vibrate_constant
__input_restart_get
input_mouse_wheel_up
input_binding_get_name
input_source_share
__input_restart
scr_save_game
scr_return_controller
syncTimeWithServer
scr_game_end
__input_gamepad_set_blacklist
__input_gamepad_tester_init
__input_class_trigger_effect_vibration
input_binding_threshold_get
drawChatMessages
input_profile_destroy
input_combo_get_new_phase
scr_show_lines
input_accessibility_global_cooldown_get
seconds_to_time
input_virtual_destroy_all
input_cursor_translate
__input_gamepad_tester_build_gui
__input_class_icon_category
input_binding_set
__input_ensure_unique_verb_name
__input_config_verbs
__input_wrap_underflow
input_verb_groups_get
__input_class_virtual
FirebaseFirestore_operationFromSymbol
input_axis_threshold_get
input_player_ghost_set
input_mouse_wheel_down
input_verb_group_is_active
input_check_repeat
input_window_has_focus
__input_class_verb_state
input_gamepad_value
input_combo_get_charge
last_key_is_valid_character
input_clear_momentary
input_source_add
input_color_reset
__input_gamepad_guid_parse
input_icons
input_profile_verify
input_source_detect_input
input_cursor_inverted_set
input_combo_create
input_source_get_array
input_color_get
__input_mouse_button
input_mouse_check_released
input_debug_all_input
input_check_double_released
__input_gamepad_tester_destroy_gui
calculatePlayerStats
input_player_get_invalid_gamepad_bindings
save_actions
seconds_to_formatted_string
check_permission
input_binding_scan_params_get
input_binding_virtual_button
scr_set_my_permission
scr_list_variables
formatChatInput
input_profile_exists
__input_hotswap_tick
__input_load_type_csv
input_check_press_most_recent
input_binding_swap
input_player_using_keyboard
scr_show_gamepad_mapping
input_cursor_gyro_enabled_set
input_accessibility_verb_toggle_set
__input_key_get_name
input_player_disconnect
__input_gamepad_set_mapping
player_data_needs_update
__input_config_icons
input_binding_mouse_button
__input_config_general
__input_gamepad_find_in_sdl2_database
input_mouse_moved
scr_enable_heartbeat
__input_system_tick
execute_command
scr_list_clients
input_max_value
input_player_reset
__input_class_trigger_effect_off
input_trigger_effect_set_pause
__input_initialize
input_verb_consume
scr_execute_action
input_cursor_mouse_enabled_get
scr_chat_bubble
input_icons_keyboard_and_mouse
scr_goto_planet
scr_toggle_server
scr_calculate_spent
__input_keyboard_key
input_source_clear
scr_savetrack
input_mouse_coord_space_set
input_player_gamepad_type_override_get
__input_multiplayer_assignment_tick
input_check_quick_pressed_2d
input_gamepad_delta
input_distance
input_binding_get_source_type
input_profile_reset_bindings
FirebaseREST_Firestore_jsonDecode
input_trigger_effect_set_strength
FirebaseREST_parse
input_gamepad_check_pressed
scr_betterdirection
input_player_import
input_icon_not_a_binding
instance_nearest_notme
parse_arguments
input_gamepads_get_status
input_profile_set
input_combo_get_phase
FirebaseREST_firestore_fieldReference
FirebaseREST_Firestore_getURL
input_player_export
input_keyboard_check_pressed
input_binding_scan_abort
input_join_params_set
input_virtual_create
input_player_swap
input_trigger_effect_get_pause
FirebaseREST_asyncCall_Firestore
updateWPM
input_verb_group_get_verbs
FirebaseREST_HTTP_Failed_Firestore
__input_player_apply_trigger_effects
input_combo_get_direction
input_vibrate_get_strength
input_gamepad_is_connected
input_gamepad_tester_set
input_players_using_source
input_accessibility_global_toggle_set
draw_text_bold
input_keyboard_check
input_check
input_source_detect_new
input_binding_gamepad_axis
input_source_set
input_cursor_elastic_remove
input_binding_mouse_wheel_up
input_combo_get_phase_count
input_accessibility_verb_cooldown_get
__input_load_sdl2_from_string
scr_toggle_log_debug
input_player_using_mouse
add_variable
update_game_state
string_word_count
json_compare
__input_axis_is_directional
__input_config_mouse
input_mouse_in_bounds
input_cursor_gyro_params_set
scr_save_macros
input_binding_gamepad_set
FirebaseListenerUserFunctions_Firestore
__input_class_combo_definition
input_cursor_limit_get
instance_nearest_notme2
scr_add_action
scr_jump_planet
__input_config_verb_behaviour
FirebaseREST_asyncFunction_Firestore
FirebaseREST_Firestore_jsonEncode
input_player_verify
input_held_time
input_gamepad_check
string_trim_right
__input_config_combos
input_binding_get
__input_config_vibration
input_profile_auto
input_check_quick_pressed
handleDebugMessage
input_binding_remove
input_gamepad_get_type
scr_toggle_debug
string_remove_between
input_axis_threshold_set
check_control_type
input_player_ghost_get
__input_load_sdl2_from_buffer_legacy
input_check_double
input_combo_params_get
draw_rectangle_outlined
input_mouse_dx
__input_gamepad_value_internal
scr_load_game
input_binding_key
add_command
__input_key_is_ignored
input_check_long_released
level_up
string_is_real
check_tasks
string_contains
FirebaseFirestoreMainFunctions
input_accessibility_global_cooldown_set
scr_set_variable
input_binding_scan_params_clear
input_check_double_pressed
FirebaseREST_Firestore_collection_query_decode
input_binding_threshold_set
__input_config_multiplayer
draw_text_bold_ext2
input_mouse_dy
appendAndWrap
input_virtual_debug_draw
input_binding_empty
input_player_active_get
handleCommandWithArgs
__input_gamepad_set_vid_pid
scr_level_up
load_actions
__input_snap_to_json
adjust_pitch
is_valid_email
__input_class_gamepad_mapping
scr_slider_cluster
__input_gamepad_stop_trigger_effects
scr_name_color
get_longest_word_width
input_chord_create
input_mouse_capture_set
__input_macros
draw_text_bold_ext
input_cursor_speed_get
input_game_has_focus
input_hotswap_params_get
forceLineBreakAtMaxWidth
FirebasePathsUserFunctions
input_radial_sector
__input_class_source
__input_binding_get_label
input_led_pattern_get
__input_gamepad_reset_color
input_x
FirebaseREST_firestore_cursor
__input_class_trigger_effect_weapon
scr_save_actions
input_cursor_elastic_get
scr_show_variable
input_gamepad_is_any_connected
input_cursor_set
input_check_pressed
handleNetworkData
FirebaseREST_firestore_value_json
get_delta_time
input_combo_reset
__input_class_gamepad_motion
input_y
__input_class_vibration_pulse
input_gamepad_get_map
__input_class_vibration_constant
__input_class_vibration_adsr
wrap_text
input_source_mode_set
input_trigger_effect_vibration
scr_list_colors
checkAndSpawnEnemies
input_cursor_coord_space_get
input_binding_scan_in_progress
__input_player_tick_sources
input_source_using
__input_class_vibration_curve
scr_show_wpm
input_keyboard_virtual_hide
__input_global
input_mouse_check_pressed
input_gamepad_is_axis
input_player_using_touch
__input_class_chord_definition
input_vibrate_pulse
input_trigger_effect_feedback
input_cursor_limit_circle
input_accessibility_verb_cooldown_set
input_direction
__input_config_touch
input_ignore_key_remove
input_cursor_gyro_params_get
input_binding_gamepad_get
check_permission_command
input_vibrate_curve
FirebaseREST_HTTP_Success_Firestore
__input_class_cursor
input_verb_group_active
__input_config_verb_groups
input_held_time_released
input_value
input_icons_gamepad
input_trigger_effect_weapon
FirebaseREST_Firestore_collection_compare
getMessageHeight
input_player_using_gamepad
input_vibrate_stop
input_cursor_limit_aabb
__input_class_gamepad
input_motion_data_get
input_gamepad_tester_get
input_accessibility_global_toggle_get
__input_steam_type_set
__input_gamepad_set_description
input_profile_export
input_profile_get
input_value_is_binding
__input_exception_handler
array_to_string
input_vibrate_set_pause
FirebaseREST_Firestore_headerToken
__input_window_changed
__input_trace_loud
__input_gamepad_type_swap_ab
scr_loadtrack
input_player_get_gamepad_type
angle_distance
input_join_params_get
__input_config_hotswap
input_gamepad_map_contains
input_trigger_effect_off
__input_load_blacklist_csv
input_verb_get_group
input_mouse_coord_space_get
input_player_gamepad_type_override_set
__input_trace
__input_clear_all
shortestAngularDistance
input_keyboard_check_released
shortestAngularDirection
input_check_opposing_pressed
__input_virtual_player_set
__input_gamepad_tester_tick
input_profile_import
__input_validate_macros
input_join_is_finished
FirebaseREST_Firestore_path_isDocument
__input_transform_coordinate
__input_finalize_default_profiles
input_profile_create
__input_class_chord_state
drawTextWithOutline
input_vibrate_get_pause
input_cursor_mouse_enabled_set
input_binding_is_valid
input_cursor_dy
__input_class_binding
update_audio_pitch
draw_healthbar_border
input_system_verify
input_verb_set
input_combo_params_reset
input_icon_touch
input_binding_test_collisions
__input_gamepad_set_type
input_gamepad_get_description
scr_add_color
parse_action_parameters
input_cursor_gyro_enabled_get
scr_resolution
scr_list_commands
input_accessibility_verb_toggle_get
__input_get_time
scr_list_actions
are_arguments_valid
calculate_color_distance
input_cursor_y
input_binding_get_verbs
load_responses
input_gamepad_constant_get_name
input_binding_scan_params_set
input_is_virtual
input_player_copy
input_cursor_dx
input_xy
updateLongestMessage
draw_text_kern
input_combo_params_set_top_down
__input_steam_handles_changed
input_cursor_x
__input_class_trigger_effect_feedback
__input_load_sdl2_from_string_internal
__input_load_sdl2_from_file
debug_action_details
input_cursor_inverted_get
__input_finalize_verb_groups
input_color_set
input_binding_gamepad_button
input_icon_empty
check_gamepad_input
command_requires_arguments
__input_config_cursor
input_check_released
input_vibrate_adsr
input_binding_set_safe
contains_profanity
nextSpawnTime
__input_key_name_set

== End: script_list.txt.txt

