== Begin: README.md.txt
# Yean Cat - Comprehensive Guide

## Overview
Yean Cat is a 2D side-scrolling open-world game developed using GameMaker Studio 2. The game features multiple planets, player progression, and rhythm-based elements, creating an engaging and whimsical universe filled with humor, challenges, and pop culture references.

## Features
- **Multiplayer Functionality**: Engage with friends and other players in a dynamic multiplayer environment.
- **Dynamic Quests and Content Generation**: Experience procedurally generated quests that keep gameplay fresh and exciting.
- **Gamepad Support**: Fully compatible with Xbox, PS5, and Switch controllers for an immersive gaming experience.

## Setup
1. **Clone the Repository**: `git clone https://github.com/your-repo/Yean-Cat.git`
2. **Open the Project**: Open the project in GameMaker Studio 2.
3. **Follow Additional Configuration**: Refer to `docs/setup.md` for detailed setup instructions.

## Usage
- **Command System**: Use the in-game command system to create and manage game content efficiently.
- **Help Menu**: Access the in-game help menu for command syntax and usage examples.

## Contributing
Currently, this project is maintained by a single developer. Contributions are not open at this time.

---

## Detailed Game Description

### Objective and Goals
Yean Cat invites players into a whimsical universe filled with humor, challenges, and pop culture references. Our goal is to provide an entertaining escape while fostering a community that appreciates creativity, fun, and the occasional absurdity.

### Key Benefits and Features
- **Unique Art Style**: Stand out with visually captivating graphics and animations.
- **Engaging Mechanics**: Enjoy dynamic and immersive gameplay.
- **Pop Culture References**: Relish the nods to various aspects of Kanye West’s journey and other cultural icons.

### Planets and Themes
1. **Earth (The College Dropout)**: Represents Kanye's early career and educational journey.
2. **Gold Mines (Late Registration)**: Focuses on fame and controversies.
3. **Universe City (Graduation)**: Symbolizes global ascent and collaborations.
4. **Icy Heart (808s & Heartbreak)**: Centers on emotional struggles and introspection.
5. **Fantasia (My Beautiful Dark Twisted Fantasy)**: Represents artistic creativity and grandeur.
6. **King's Kingdom (Watch the Throne)**: Symbolizes power, legacy, and collaboration.
7. **Land of Lucy (Ye)**: Focuses on personal struggles and mental health.
8. **Yetopia (Yeezus)**: Represents rebellion and raw energy.
9. **Place of Pablo (The Life of Pablo)**: Captures chaos and artistic experimentation.
10. **Divine Domain (Jesus Is King)**: Focuses on spirituality and faith.
11. **Ghost Town (Kids See Ghosts)**: Addresses mental health and inner demons.
12. **Stormy Sands (Donda)**: Symbolizes grief, healing, and legacy.
13. **Vulture Valley (Vultures)**: Revolves around scrutiny and resilience.
14. **The Endonda (Donda 3)**: Represents culmination and future anticipation.

### Weapons and Their Significance
- **Nerd Blaster (Yean Cat)**: Basic projectile weapon representing Kanye's early career.
- **Flashing Lights (Taylor Swan)**: Emits area damage, symbolizing media attention.
- **Holy Water (Futurtle)**: Causes splash damage, reflecting struggles and redemption.
- **Cellphone (Kim Chameleon)**: Fires tweets as projectiles, representing social media influence.
- **Fire (Travis Squawk)**: Random fire projectiles, symbolizing energetic performances.
- **Fantasy (Bee-yonce)**: Constant area damage, representing a larger-than-life persona.
- **Chains (Peacocky Six Nine)**: Spinning chains causing damage, reflecting a flashy lifestyle.
- **The Storm (Lil Hump)**: Path damage projectiles, symbolizing turbulent rise to fame.
- **Pisces (Rehino)**: Back and forth fish projectiles, reflecting fluid music style.
- **Chakra (Emunem)**: Orbs causing damage, representing multifaceted career.
- **Saint Pablo Sword (21 Salamander)**: Orbiting sword causing high damage.
- **Wolf (Lil Sheep)**: Wolf projectiles, representing inner demons.
- **Moon (Squid Cudi)**: Orbits player causing damage, reflecting introspective themes.
- **808 Drum (Kid Boo)**: Rhythmic area damage, representing bass-heavy music style.
- **M1911 (Dracoon)**: Auto-aiming projectile weapon, symbolizing precision in music industry.

### Abilities and Interactions
- **Life of the Party (Earth)**: Increases attack rate.
- **Love (Earth)**: Increases maximum health.
- **Spectacle (Gold Mines)**: Increases projectile size.
- **Wealth (Gold Mines)**: Increases dollar pickups frequency.
- **Graduate (Universe City)**: Increases experience points gained.
- **Fame (Universe City)**: Increases global level faster.
- **Law of Attraction (Icy Heart)**: Increases pickup radius.
- **Heartbreak (Icy Heart)**: Reflects damage taken to enemies.
- **Power (Fantasia)**: Increases damage dealt.
- **Monster (Fantasia)**: Grants chance of critical hits.
- **Ego (King's Kingdom)**: Increases damage resistance.
- **Wisdom (King's Kingdom)**: Increases item pickups' effect and duration.
- **Mercy (Land of Lucy)**: Temporary damage resistance.
- **Donda’s Blessing (Land of Lucy)**: Increases damage when below half health.
- **Free Will (Yetopia)**: Improves control and handling.
- **Prescription (Yetopia)**: Drops a pill reducing level duration.
- **Heart (Place of Pablo)**: Increases health regeneration.
- **Einstein (Place of Pablo)**: Boosts other passive abilities.
- **Faith (Divine Domain)**: Heals damage dealt to enemies.
- **Miracle (Divine Domain)**: Grants revives with half health.
- **Vanish Mode (Ghost Town)**: Grants temporary invincibility.
- **Curse (Ghost Town)**: Increases enemy health, quantity, and speed.
- **Longevity (Stormy Sands)**: Increases weapon effect duration.
- **Luck (Stormy Sands)**: Increases luck for beneficial drops.
- **Clone (Vulture Valley)**: Increases projectile amount.
- **Wonder (Vulture Valley)**: Increases projectile speed.
- **Champion (The Endonda)**: Grants chance to dodge an attack.

---

## Task System
- **Objectives**: Unlock abilities, items, weapons, and characters by completing tasks.
- **Variety**: Tasks range from defeating enemies to surviving specific durations with certain characters.
- **Progression**: Completing tasks tied to abilities unlocks them for the player.

### Game Progression and Challenges
- **Advancement**: Players progress by completing tasks and defeating bosses, unlocking new content.
- **Replayability**: Randomized elements and unlockable content provide fresh experiences in each playthrough.

---

## Strategies and Tips
- **Master Mechanics**: Understand the unique mechanics to excel in the game.
- **Explore Planets**: Embrace challenges on different planets.
- **Unveil the Mystery**: Navigate through the storyline.
- **Blend Addiction with Fun**: Enjoy addictive gameplay and light-hearted fun.
- **Appreciate Satire**: Engage with the game's satirical elements.
- **Challenge Yourself**: Embrace the game's designed difficulty.
- **Make a Statement**: Recognize the game's deeper social commentary.
- **Immerse in Art Style**: Appreciate the unique visual experience.
- **Engage with References**: Uncover pop culture references throughout the game.
- **Discover Mechanics**: Experience engaging gameplay mechanics.
- **Share Your Journey**: Connect with other players online.
- **Join Conversations**: Engage in discussions about the game's themes and commentary.

---

## Narrative Elements
- **Story and Lore**: Detailed backstories and connections between characters enhance the game world.
- **Character Development**: Each character has unique backstories intertwining with the game's universe.

---

## Community and Leaderboard Aspects
- **Leaderboard**: Engage with the leaderboard and player login code.
- **Community Events**: Participate in online challenges and community events.

---

## Future Updates and Expansions
- **New Content**: Look forward to new characters, planets, abilities, and storylines.
- **Community Involvement**: Stay tuned for updates and expansions driven by community feedback.

---

## Fan Contributions and Customizations
- **Fan Involvement**: Opportunities for fans to contribute to the game's development.
- **Customization Options**: Personalize the gaming experience.

---

## Target Audiences

### Max Gamer
- **Description**: Energetic streamer who loves challenging games and humorous experiences.
- **Voice and Tone**: Humorous and playful.
- **Engagement Strategy**: Showcase challenging gameplay with humorous commentary, and collaborate for live streams or gameplay videos.

### Indie Game Enthusiasts
- **Description**: Gamers who appreciate unique and innovative indie games.
- **Voice and Tone**: Authentic and engaging.
- **Engagement Strategy**: Highlight unique art style and engaging mechanics, and share behind-the-scenes content and developer interviews.

### Global Gamers
- **Description**: Gamers from around the world interested in diverse gaming experiences.
- **Voice and Tone**: Inclusive and exciting.
- **Engagement Strategy**: Promote global appeal and translated versions, and feature international gaming influencers.

---

## Highlights of Yean Cat
1. **Whimsical Universe**: Entertaining escape filled with humor and challenges.
2. **Unique Art Style**: Visually captivating graphics and animations.
3. **Engaging Mechanics**: Dynamic and immersive gameplay.
4. **Community Building**: Foster a tight-knit, global community.
5. **Depth and Defiance**: Deliver a social commentary and meaningful engagement.

---

## Analysis of Competing Products

### Vampire Survivors
- **Description**: Side-scrolling adventure with unique art and engaging mechanics.
- **Strengths**: Unique art style, engaging mechanics, atmospheric storytelling.
- **Marketing Strategy**: Highlight humor, community aspect, and pop culture references.

### Pop Culture Adventure
- **Description**: Side-scrolling game with pop culture references.
- **Strengths**: Extensive references, humor, challenges.
- **Marketing Strategy**: Emphasize satire, unique mechanics, and art style.

### Celebrity Quest
- **Description**: Adventure game involving celebrity interactions.
- **Strengths**: Celebrity interactions, fan-driven content, social media integration.
- **Marketing Strategy**: Highlight artistic style, satire, and social commentary.

---

## Research Sources
- **Gaming Forums and Communities**: Discussions and reviews from gamers.
- **Gaming Websites and Blogs**: In-depth reviews and analysis.
- **Market Research Reports**: Insights into target audience preferences and gaming trends.

---

## Conclusion Part 1.
Yean Cat is designed to be more than just a game. It's an experience that blends humor, challenges, and social commentary, creating a unique and engaging universe. With its distinctive art style, dynamic mechanics, and community-focused approach, Yean Cat aims to captivate a wide audience and foster a global gaming community. By understanding the target audience and differentiating from competitors, Yean Cat is poised to make a significant impact in the indie gaming world.

# Yean Cat System and Vision - Comprehensive Guide

## Overview
The Yean Cat system represents a sophisticated integration of game development, automation, and cloud-based infrastructure designed to support the continuous evolution of the Yean Cat game. This system leverages advanced technologies, automation scripts, and robust architecture to ensure seamless development, deployment, and management of the game. It embodies the ambition to create a dynamic, adaptable, and scalable framework that can support future expansions and community-driven enhancements.

## Vision and Ambition
### Dynamic Development Environment
Our vision is to create a dynamic development environment that facilitates seamless collaboration, rapid iteration, and efficient management of game assets and code. By integrating automation and cloud services, we aim to minimize manual interventions and enhance the overall productivity of the development process.

### Continuous Deployment and Integration
We strive to establish a robust continuous deployment and integration pipeline that ensures the game is always in a releasable state. This involves automated testing, code validation, and deployment processes that maintain high standards of code quality and stability.

### Scalable Infrastructure
The infrastructure is designed to scale effortlessly with the growing demands of the game and its community. By leveraging cloud services, we ensure that the system can handle increased load, provide reliable uptime, and deliver optimal performance regardless of the number of concurrent users.

### Community-Driven Enhancements
One of our key ambitions is to foster a vibrant community around Yean Cat, enabling players and developers to contribute to its evolution. This includes providing tools and frameworks that allow for the creation and integration of user-generated content, as well as incorporating community feedback into the development process.

### Automation and Efficiency
Efficiency is at the core of our system design. By automating repetitive tasks and integrating intelligent tools, we aim to reduce the time and effort required for routine operations, allowing the development team to focus on innovation and creativity.

---

## System Architecture and Components

### Repository Structure
The Yean Cat repository is organized into several key components that facilitate efficient development and management:
- **Root Directory**: Contains the primary project files and configurations.
- **Client and Game Server Directories**: Segregate client-side and server-side code to streamline development and deployment processes.
- **Automation Scripts**: A suite of scripts designed to automate various tasks such as backups, hierarchy generation, and deployment.
- **Documentation**: Comprehensive documentation to guide developers through setup, usage, and contribution processes.

### Key Components
1. **Automation Scripts**: Scripts that automate backups, hierarchy generation, and deployment processes.
2. **Cloud Integration**: Leveraging cloud services for storage, deployment, and scalability.
3. **Version Control**: Using GitHub for version control, collaboration, and code management.
4. **Continuous Integration/Continuous Deployment (CI/CD)**: Automated pipelines for testing, building, and deploying the game.

### Hierarchy Generation
The system includes scripts for generating hierarchical representations of the project structure, which are essential for maintaining organization and ensuring that all components are accounted for. These hierarchies provide a clear overview of the project and assist in navigating the complex structure of the game.

### Backup and Restore
Automated backup scripts ensure that all critical project files are regularly backed up and stored securely. This includes code, configurations, logs, and other essential data. The restore process is equally streamlined, allowing for quick recovery in case of data loss or corruption.

### Testing and Validation
Automated testing frameworks are integrated into the system to validate code changes before deployment. This includes unit tests, integration tests, and end-to-end tests to ensure the stability and functionality of the game.

---

## Detailed System Description

### Repository and Version Control
The Yean Cat repository is the cornerstone of the development process. It is meticulously organized to facilitate easy navigation, efficient management, and seamless collaboration. Key aspects include:
- **Branch Management**: Using branches for feature development, bug fixes, and releases to maintain a clean and organized codebase.
- **Pull Requests and Code Reviews**: Implementing a robust workflow for reviewing and merging code changes to ensure high-quality contributions.
- **Issue Tracking**: Utilizing GitHub Issues to track tasks, bugs, and feature requests, ensuring transparency and accountability.

### Automation Scripts
Automation scripts are designed to streamline repetitive tasks, reduce human error, and enhance productivity. Key scripts include:
- **Backup Script**: Automates the process of backing up critical project files to a secure location.
- **Hierarchy Generation Script**: Generates hierarchical representations of the project structure, aiding in organization and navigation.
- **Deployment Script**: Facilitates the deployment of the game to the cloud, ensuring that the latest version is always available to players.

### Continuous Integration/Continuous Deployment (CI/CD)
CI/CD pipelines are integral to the Yean Cat system, ensuring that code changes are automatically tested, built, and deployed. Key elements include:
- **Automated Testing**: Running unit tests, integration tests, and end-to-end tests on every code change to ensure stability and functionality.
- **Build Automation**: Automating the build process to compile and package the game for deployment.
- **Deployment Automation**: Deploying the game to the cloud, ensuring that the latest version is always available to players.

### Cloud Integration
Leveraging cloud services is essential for scalability, reliability, and performance. Key integrations include:
- **Cloud Storage**: Storing backups, logs, and other critical data securely in the cloud.
- **Cloud Deployment**: Deploying the game to cloud servers to ensure high availability and optimal performance.
- **Scalability**: Ensuring that the system can handle increased load and scale seamlessly with the growing player base.

---

## Task System and Game Development Workflow

### Objectives and Goals
The task system is designed to streamline the development process, ensuring that tasks are clearly defined, prioritized, and tracked. Key aspects include:
- **Task Management**: Using tools like Trello or JIRA to manage tasks, track progress, and ensure accountability.
- **Milestones and Deadlines**: Setting clear milestones and deadlines to ensure timely delivery of features and updates.
- **Collaboration**: Facilitating collaboration among team members through regular meetings, code reviews, and communication channels.

### Development Workflow
The development workflow is designed to be efficient, collaborative, and iterative. Key steps include:
- **Planning**: Defining tasks, setting priorities, and planning sprints.
- **Development**: Writing code, implementing features, and fixing bugs.
- **Testing**: Running automated tests to validate code changes.
- **Code Review**: Reviewing code changes to ensure quality and adherence to standards.
- **Deployment**: Deploying the game to the cloud, ensuring that the latest version is available to players.

---

## Community and Contributions

### Fostering a Community
One of our key ambitions is to foster a vibrant community around Yean Cat. This includes providing tools and frameworks that allow players and developers to contribute to the game's evolution. Key aspects include:
- **User-Generated Content**: Providing tools and frameworks that enable players to create and share their own content.
- **Community Events**: Organizing community events, challenges, and competitions to engage players and encourage participation.
- **Feedback and Collaboration**: Incorporating community feedback into the development process and encouraging collaboration through forums, social media, and other channels.

### Contribution Guidelines
While contributions are currently not open, we have a clear vision for how we will manage contributions in the future. Key guidelines include:
- **Contribution Process**: Clearly defined process for submitting contributions, including pull requests, code reviews, and testing.
- **Code of Conduct**: Establishing a code of conduct to ensure a respectful and inclusive community.
- **Documentation**: Providing comprehensive documentation to guide contributors through the setup, development, and submission processes.

---

## Future Plans and Expansions

### Continuous Improvement
Our vision is to continuously improve the Yean Cat system by integrating new technologies, enhancing automation, and optimizing performance. Key areas of focus include:
- **Advanced Automation**: Integrating more advanced automation tools and scripts to further streamline the development process.
- **Enhanced Testing**: Expanding our testing framework to include more comprehensive tests and validation processes.
- **Scalability Enhancements**: Continuously optimizing our cloud infrastructure to ensure scalability and reliability.

### Community-Driven Development
We aim to involve the community more actively in the development process, incorporating their feedback and contributions to shape the future of Yean Cat. Key initiatives include:
- **Community Polls and Surveys**: Gathering feedback through polls and surveys to understand player preferences and priorities.
- **Open Source Contributions**: Opening up the project to community contributions, with clear guidelines and processes in place.

---

## Comprehensive Documentation

### Setup and Configuration
Detailed documentation to guide developers through the setup and configuration of the Yean Cat system. Key sections include:
- **Environment Setup**: Instructions for setting up the development environment, including required tools and dependencies.
- **Repository Structure**: Overview of the repository structure and key components.
- **Configuration Files**: Detailed explanations of configuration files and how to customize them for different environments.

### Usage and Commands
Comprehensive guide to using the Yean Cat system, including available commands, scripts, and tools. Key sections include:
- **Command Syntax**: Detailed syntax and usage examples for all available commands.
- **Automation Scripts**: Overview of automation scripts and how to use them effectively.
- **Deployment Process**: Step-by-step guide to deploying the game to the cloud.

### Troubleshooting and Support
Extensive troubleshooting guide to help developers resolve common issues and errors. Key sections include:
- **Common Errors**: List of common errors and how to resolve them.
- **Logs and Debugging**: Instructions for accessing and interpreting logs, and debugging issues.
- **Support Channels**: Information on available support channels and how to get help.

---

## Conclusion Pt.2 (The End)
The Yean Cat system represents a sophisticated integration of game development, automation, and cloud-based infrastructure designed to support the continuous evolution of the Yean Cat game. Our vision is to create a dynamic, adaptable, and scalable framework that fosters community-driven development and continuous improvement. By leveraging advanced technologies, automation, and robust architecture, we aim to deliver a seamless and engaging experience for both developers and players.

== End: README.md.txt

== Begin: intro.txt.txt
You are an AI assistant helping with the development of a 2D side-scrolling open world game in the 'survivors' genre using GameMaker Studio 2. The game includes multiplayer functionality, rhythm-based elements, and extensive object interactions. I have created a program that will allow me to communicate with gpt, and automates the process of sending my most recent code (from GitHub) to the AI. You will receive a description of the bug or feature I want you to help me with, along with any code I believe to be relevant for my request. I will also attach a log of my in game console, which I can test features and effectively communicate to you with. Since I am using API integration, sadly you will not remember any of our conversations, which is why you will be receiving so much information. Please make the most educated attempt at bringing me closer to the desired feature or bug fix. If you are not confident enough to solve my issue because you would need to see a specific script that I have not provided you with, then let me know. Please reuse and fix existing code, before adding scripts for things I might already have. Do not assume I have a script for a certain thing if you don't see evidence of it in the code I have provided you.
== End: intro.txt.txt

== Begin: intro.txt.txt
You are an AI assistant helping with the development of a 2D side-scrolling open world game in the 'survivors' genre using GameMaker Studio 2. The game includes multiplayer functionality, rhythm-based elements, and extensive object interactions. I have created a program that will allow me to communicate with gpt, and automates the process of sending my most recent code (from GitHub) to the AI. You will receive a description of the bug or feature I want you to help me with, along with any code I believe to be relevant for my request. I will also attach a log of my in game console, which I can test features and effectively communicate to you with. Since I am using API integration, sadly you will not remember any of our conversations, which is why you will be receiving so much information. Please make the most educated attempt at bringing me closer to the desired feature or bug fix. If you are not confident enough to solve my issue because you would need to see a specific script that I have not provided you with, then let me know. Please reuse and fix existing code, before adding scripts for things I might already have. Do not assume I have a script for a certain thing if you don't see evidence of it in the code I have provided you.
== End: intro.txt.txt

== Begin: format_description.txt.txt
If you are creating a new in-game, executable script, it should start with scr_ and be well-documented. In addition to creating the script with the correct naming format, I also need a line of code that adds the command to the command list.

For Example:
/// @function scr_return_controller()
/// @description Outputs the connected gamepad description or a message if none are connected
function scr_return_controller() {
    if (gamepad_is_connected(0)) {
        var gpad_desc = gamepad_get_description(0);
        handleDebugMessage("Connected gamepad: " + gpad_desc, true);
    } else {
        handleDebugMessage("No gamepad detected.", true);
    }
}

add_command("command name (without scr_, if needs argument(s): ends with '(')", (permission level required), [["string", "real"]] (2D array defining accepted var types for each argument, boolean (whether this command needs at least 1 argument passed));

Permission levels:
0 -> Player
1 -> Moderator
2 -> Developer
3 -> Owner

For Example: 
add_command("set_variable(", 2, [["string"],["string","real"]],true)
add_command("save_game", 0, [[]], false);  // Does not require "(" visually

*Remember this is only needed if you are adding a new command to the game, try and reuse existing scripts as much as possible and let me know if you would need to see a specific script that was not included, but could be helpful in resolving the issue! Remember that you are a 1 time chat interaction and will have no memory of this so If you cant see the solution to the bug or the method to adding the desired feature, then simply reply with what else you need to see in my code.

The game features an in game console which allows players with the required permission to execute code and create new features from within the game. Typing "/" will mean that the player is typing a command. Some commands do not require a "(", for example: /toggle_server . You can create actions by typing /add_action("Name it",Command_name,[100,"example_string"]) and can create macros essentially for commands and will be able to trigger these actions in sequences and events, or possibly controlled by an AI GPT like yourself. This is how It is intended to work, but it is still needing some fixes to be able to handle saving actions for commands that take more than 1 argument, such as /chat_bubble("Text",owner).
== End: format_description.txt.txt

== Begin: format_description.txt.txt
If you are creating a new in-game, executable script, it should start with scr_ and be well-documented. In addition to creating the script with the correct naming format, I also need a line of code that adds the command to the command list.

For Example:
/// @function scr_return_controller()
/// @description Outputs the connected gamepad description or a message if none are connected
function scr_return_controller() {
    if (gamepad_is_connected(0)) {
        var gpad_desc = gamepad_get_description(0);
        handleDebugMessage("Connected gamepad: " + gpad_desc, true);
    } else {
        handleDebugMessage("No gamepad detected.", true);
    }
}

add_command("command name (without scr_, if needs argument(s): ends with '(')", (permission level required), [["string", "real"]] (2D array defining accepted var types for each argument, boolean (whether this command needs at least 1 argument passed));

Permission levels:
0 -> Player
1 -> Moderator
2 -> Developer
3 -> Owner

For Example: 
add_command("set_variable(", 2, [["string"],["string","real"]],true)
add_command("save_game", 0, [[]], false);  // Does not require "(" visually

*Remember this is only needed if you are adding a new command to the game, try and reuse existing scripts as much as possible and let me know if you would need to see a specific script that was not included, but could be helpful in resolving the issue! Remember that you are a 1 time chat interaction and will have no memory of this so If you cant see the solution to the bug or the method to adding the desired feature, then simply reply with what else you need to see in my code.

The game features an in game console which allows players with the required permission to execute code and create new features from within the game. Typing "/" will mean that the player is typing a command. Some commands do not require a "(", for example: /toggle_server . You can create actions by typing /add_action("Name it",Command_name,[100,"example_string"]) and can create macros essentially for commands and will be able to trigger these actions in sequences and events, or possibly controlled by an AI GPT like yourself. This is how It is intended to work, but it is still needing some fixes to be able to handle saving actions for commands that take more than 1 argument, such as /chat_bubble("Text",owner).
== End: format_description.txt.txt

