Feature Name: Target_Object_Reference_in_get_object_reference
Description: Implement a 'Target' object reference in the get_object_reference function. This Target object should be able to be set to various objects, including 'Player' (or 'yeancat'). The goal is to create a definition 'Target' which defaults to 'yeancat' or 'Player' but can be set to any existing objects with object reference definitions. Implement /set_target(Instance ID/'ReferenceName') command to set Target to a specific entity ID or the name of an object reference (excluding 'Target' itself). Also, implement /list_objects command to list the names of object references, e.g., ('Player', 'Target', 'NPC1', etc.).

== Related Objects ==

Object: obj_Client

File: Step_0.gml
Code:
/// Step Event of obj_Client

//create mouse if it doesnt exist and using keyboard and mouse
if !instance_exists(obj_Cursor) and (global.control_type!=1) { 
	instance_create_depth(mouse_x,mouse_y,-1000000,obj_Cursor);
}

// Set current font and heartbeat rate
global.heartbeatBPM = global.current_bpm;
fnt_chat = master.font_array[fnt_chat_id, 1];
global.wrapWidth = 2350; // Adjusted wrap width

//check for gamepad input
check_gamepad_input()

//randomly and probability skewed to bring shake_angle back to 0
if abs(shake_angle)>.1 {
	var invert = choose(-1,1)*(random(8)+92)/100
	shake_angle=round(invert*shake_angle*100)/100
} else {
	if shake_angle!=0 {
	shake_angle=0
	keyboard_lastkey=vk_nokey
	}
}

// Handle reconnection logic
if (!global.isConnected && global.reconnectTimer <= 0) {
    var result = network_connect(global.client_socket, global.serverAddress, global.serverPort);
    if (result >= 0) {
        global.isConnected = true;
        isServerRunning = true;
        handleDebugMessage("[Client] Successfully reconnected to server.", true);
        global.reconnectTimer = global.reconnectInterval;
    } else {
        global.reconnectTimer = global.reconnectInterval;
        isServerRunning = false;
        handleDebugMessage("[Client] Failed to reconnect to server. Will try again...", true);
    }
} else if (global.isConnected && global.reconnectTimer > 0) {
    global.reconnectTimer--;
}

// Handle incoming network events safely
if (ds_exists(async_load, ds_type_map)) {
    var type = ds_map_find_value(async_load, "type");
    var n_id = ds_map_find_value(async_load, "id");

    if (n_id == global.client_socket) {
        switch (type) {
            case network_type_data:
                var buffer = ds_map_find_value(async_load, "buffer");
                buffer_seek(buffer, buffer_seek_start, 0);
                var identifier = buffer_read(buffer, buffer_u8);

                switch (identifier) {
                    case global.IDENTIFIER_HEARTBEAT:
                        handleDebugMessage("[Client] Heartbeat received from server.", true);
                        break;
                    
                    case global.IDENTIFIER_TEST_MESSAGE:
                        var msg = buffer_read(buffer, buffer_string);
                        handleDebugMessage("[Client] Message from server: " + msg, true);
                        break;
                }
                buffer_delete(buffer);
                break;

            case network_type_connect:
                handleDebugMessage("[Client] Connected to server.", true);
                break;
                
            case network_type_disconnect:
                global.isConnected = false;
                handleDebugMessage("[Client] Disconnected from server. Attempting to identify cause...", true);
                break;
        }
    }
} else {
    //show_debug_message("ERROR: Invalid ds_map reference in async event.");
}


// Command input and execution logic
if (input_check_pressed("chat") && !isActive) {
    isActive = true;
    global.commandBuffer = "";
    keyboard_string = "";
    show_debug_message("[Client] Chat input activated.");
}

// Toggle chat box with a specific key, e.g., Tab
if (keyboard_check_pressed(vk_tab)) {
    show_chatbox = !show_chatbox;
    global.commandBuffer = "";  // Clear previous commands or texts
    keyboard_string = "";
    show_debug_message("[Client] Toggled chat box visibility: " + string(show_chatbox));
}

// Handle backspace and text input
if (isActive) {
// Handle backspace input
    if (input_check("cancel") && string_length(global.commandBuffer) > 0) {
        if (global.backspaceTimer == 0 || global.backspaceTimer >= global.backspaceDelay) {
            var lastCharPosition = string_length(global.commandBuffer);

            // Check if the last character is a newline
            if (string_char_at(global.commandBuffer, lastCharPosition) == "\n") {
                // Adjust the global.lastSpaceIndex if necessary
                if (global.lastSpaceIndex >= lastCharPosition) {
                    global.lastSpaceIndex = string_last_index_of(string_copy(global.commandBuffer, 1, lastCharPosition - 1), " ");
                }
            }

            // Perform the character deletion
            global.commandBuffer = string_delete(global.commandBuffer, lastCharPosition, 1);
            update_chat_input_visuals();
            show_debug_message("[Client] Updated command buffer after backspace: " + global.commandBuffer);

            // Clear the keyboard buffer to avoid unwanted characters
            keyboard_string = "";

            // Increase deletion speed
            if (global.backspaceTimer == 0) {
                global.backspaceTimer = 1;
            } else {
                global.backspaceTimer = global.backspaceSpeed;
				if global.backspaceSpeed<14 {
					global.backspaceSpeed+=1
				}
            }
        } else {
            global.backspaceTimer += 1;
        }
    } else {
        global.backspaceTimer = 0; // Reset timer when backspace is released
		global.backspaceSpeed=1
    }
	
	// Detect pasting via Ctrl+V (Windows) or Command+V (Mac)
    var pasting = false;
    if (os_type == os_windows) {
        if (keyboard_check(vk_control) && keyboard_check_pressed(ord("V"))) {
            pasting = true;
			keyboard_string=""
			char = ""
        }
    } else if (os_type == os_macosx) {
        if (keyboard_check(92) && keyboard_check_pressed(ord("V"))) {
            pasting = true;
			keyboard_string=""
			char = ""
        }
    }
	
	if string_length(global.commandBuffer) < global.character_limit {
    var char = keyboard_string;
        var space_pressed = keyboard_check_pressed(vk_space);
        
        if (char != "" || space_pressed) {
            if (!pasting) {
                if (space_pressed) {
                    global.commandBuffer += " ";
                    show_debug_message("[Client] Space added to command buffer");
                } else {
                    global.commandBuffer += char;
                }
                keyboard_string = ""; // Clear the keyboard buffer after reading
                update_chat_input_visuals();
                show_debug_message("[Client] Appended character to command buffer: " + global.commandBuffer);
            }
        }
	} else {
    var char = "";
    if keyboard_check_pressed(vk_anykey) {
        if last_key_is_valid_character(keyboard_lastkey) {
            //play sound to indicate char limit. 
            var sound = audio_play_sound(uibuttonsound7,0,0,master.uivol*master.mastervol)
            shake_angle = choose(-1,1) * random_range(.95,1.00)
        }
    }
}

// Debug: Check for space key press
    if (keyboard_check_pressed(vk_space)) {
        show_debug_message("[Client] Space key pressed");
    }

    // Debug: Check keyboard_string content
    if (keyboard_string != "") {
        show_debug_message("[Client] keyboard_string content: " + keyboard_string);
    }

// Handle pasting
// In the Step event of obj_Client
if (pasting) {
    if (clipboard_has_text()) {
        var clip_string = clipboard_get_text();
        if (string_length(clip_string) > 0 && string_length(clip_string) < global.character_limit) {
            // Replace regular line breaks with intentional line breaks
            clip_string = string_replace_all(clip_string, "\n", global.intentionalLineBreak);
            clip_string = string_replace_all(clip_string, "\r", "");
            
            global.commandBuffer = appendAndWrap(clip_string, global.commandBuffer, global.wrapWidth);
            update_chat_input_visuals();
            show_debug_message("[Client] Appended clipboard content to command buffer: " + global.commandBuffer);
        } else {
            handleDebugMessage("Clipboard content is too long to paste!", false);
        }
    }
    pasting = false;
}

// Check if Enter is pressed to process the command or chat message
if (input_check_pressed("confirm")) {
	if (keyboard_check(vk_shift)) {
            // Shift+Enter: Add a new line
            global.commandBuffer += global.intentionalLineBreak;
            update_chat_input_visuals();
        } else {
        if (string_char_at(global.commandBuffer, 1) == "/") {
            execute_multiple_commands(global.commandBuffer);
            global.textColor = global.defaultTextColor;
            isActive = false;
        } else {
            var chatMessage = "[" + master.playername + "] " + global.commandBuffer;
            global.message_is_bubble = 1;
            handleDebugMessage(chatMessage, -1);
            global.message_is_bubble = 0;
        }

        // Add the command/message to the recall list
        if (string_length(global.commandBuffer) > 0) {
            ds_list_add(global.recall_list, global.commandBuffer);
            if (ds_list_size(global.recall_list) > global.recall_max) {
                ds_list_delete(global.recall_list, 0);  // Remove the oldest entry if exceeding the limit
            }
        }
        global.recall_index = -1;
        global.textColor = global.defaultTextColor;
        global.commandBuffer = "";
        isActive = false;
        show_debug_message("[Client] Processed command/chat and cleared buffer.");
}
}
    // Navigate through the recall list using up and down arrows
    if (keyboard_check_pressed(vk_up)) {
        if (global.recall_index == -1) {
            global.recall_index = ds_list_size(global.recall_list) - 1;
        } else {
            global.recall_index = max(0, global.recall_index - 1);
        }

        if (global.recall_index >= 0 && global.recall_index < ds_list_size(global.recall_list)) {
            global.commandBuffer = ds_list_find_value(global.recall_list, global.recall_index);
            update_chat_input_visuals();
            show_debug_message("[Client] Recalled previous command/chat: " + global.commandBuffer);
        }
    } else if (keyboard_check_pressed(vk_down)) {
        if (global.recall_index != -1) {
            global.recall_index = min(ds_list_size(global.recall_list) - 1, global.recall_index + 1);

            if (global.recall_index < ds_list_size(global.recall_list)) {
                global.commandBuffer = ds_list_find_value(global.recall_list, global.recall_index);
            } else {
                global.commandBuffer = "";
            }
            update_chat_input_visuals();
            show_debug_message("[Client] Recalled next command/chat: " + global.commandBuffer);
        }
    }
}

if (show_chatbox && ds_exists(global.debugMessages, ds_type_list)) {
	global.longestmessage = updateLongestMessage(global.debugMessages);
    var totalLines = drawChatMessages(global.debugMessages, 990, 0, global.max_visible_lines, .5, false, global.c_chat2, global.c_chat1);
 
    // Check if a new message was added
    if (ds_list_size(global.debugMessages) > 0 && 
        ds_list_find_value(global.debugMessages, ds_list_size(global.debugMessages) - 1) == global.lastAddedMessage) {
        // Scroll to the bottom when a new message is added
        scrollIndex = max(0, totalLines - global.max_visible_lines);
        global.lastAddedMessage = ""; // Reset the last added message
    } else {
        // Ensure scrollIndex is within valid range
        scrollIndex = clamp(scrollIndex, 0, max(0, totalLines - global.max_visible_lines));
    }
    
    // Draw the chat messages
    drawChatMessages(global.debugMessages, 990, 0, global.max_visible_lines, .5, true, global.c_chat2, global.c_chat1);
}

// Only process incoming data and send heartbeats if the server is running
if (isServerRunning && sendHeartbeat && (current_time - global.lastHeartbeatTime >= broadcastInterval)) {
    handleDebugMessage("Heartbeat sent to Server", true);
    global.lastHeartbeatTime = current_time;
}





File: Other_68.gml
Code:
// Async Networking Event Handling for Client

/// Revised Async Networking Event
var type = ds_map_find_value(async_load, "type");
var n_id = ds_map_find_value(async_load, "id");

if (n_id == global.client_socket) {
    switch (type) {
        case network_type_connect:
            show_debug_message("[Client] Connected to server.");
            global.isConnected = true;
            break;
        case network_type_disconnect:
            show_debug_message("[Client] Disconnected from server.");
            global.isConnected = false;
            break;
        case network_type_data:
            if (ds_map_exists(async_load, "buffer")) {
                var buffer = ds_map_find_value(async_load, "buffer");
                if (buffer != undefined) {
                    buffer_seek(buffer, buffer_seek_start, 0);
                    var identifier = buffer_read(buffer, buffer_u8);
                    handleNetworkData(identifier, buffer);
                } else {
                    show_debug_message("ERROR: Buffer not found in data event.");
                }
            } else {
                show_debug_message("ERROR: 'buffer' key does not exist in the async_load map.");
            }
            break;
    }
} else {
    show_debug_message("ERROR: Invalid socket ID reference in async event.");
}


//// Async Networking Event of obj_Client

//var type = ds_map_find_value(async_load, "type");
//var n_id = ds_map_find_value(async_load, "id");

//if (n_id == global.client_socket) {
//    switch (type) {
//        case network_type_data:
//            var buffer = ds_map_find_value(async_load, "buffer");
//            buffer_seek(buffer, buffer_seek_start, 0);
//            var identifier = buffer_read(buffer, buffer_u8);

//            switch (identifier) {
//                case global.IDENTIFIER_HEARTBEAT:
//                    // Handle heartbeat received from the server
//                    show_debug_message("[Client] Heartbeat received from server.");
//                    // Optionally, send back a confirmation or keep alive message
//                    break;
                
//                case global.IDENTIFIER_UNIQUE_ID:
//                    // This would be where the server confirms receipt of your unique ID
//                    // Or any other custom logic for unique ID handling
//                    var confirmationMessage = buffer_read(buffer, buffer_string);
//                    show_debug_message("[Client] Server confirmed Unique ID: " + confirmationMessage);
//                    break;
                
//                // Add more case handlers for different data types as needed
//            }
//            buffer_delete(buffer);
//            break;

//        case network_type_connect:
//            // Immediately upon connection, send the unique ID to the server
//            // This ensures server is aware of who just connected
//            var buffer = buffer_create(256, buffer_grow, 1);
//            buffer_seek(buffer, buffer_seek_start, 0);
//            buffer_write(buffer, buffer_u8, global.IDENTIFIER_UNIQUE_ID);
//            buffer_write(buffer, buffer_string, global.clientUniqueID);
//            network_send_packet(global.client_socket, buffer, buffer_tell(buffer));
//            show_debug_message("[Client] Sent unique ID to server: " + global.clientUniqueID);
//            buffer_delete(buffer);
//            break;
            
//        case network_type_disconnect:
//            // Handle disconnection logic here, if needed
//            global.isConnected = false; // Update the connection status
//            show_debug_message("[Client] Disconnected from server.");
//            break;
//    }
//}


File: Destroy_0.gml
Code:
///Destroy Event for obj_Client
if (global.isConnected) {
    network_destroy(global.client_socket);
}


//// Clean up dynamic resources
//if (ds_exists(clien, ds_type_map)) {
//    ds_map_destroy(myDataStructure);
//}

// Optionally, inform the master object or handle game state changes
// For example, transition to a different room or update the UI
//event_perform_object(obj_Master, ev_Other, ev_user0); // Custom user event for cleanup in obj_Master


File: Draw_0.gml
Code:
///Client Draw Code
draw_set_font(fnt_chat);
if show_chatbox=true {
	var xx = 990;
	var yy = 686; // Starting y position
	var lm_cal=clamp(xx+(clamp(110-global.longestmessage,0,110))+1.65*(global.longestmessage-50)/3,xx+215,(display_get_gui_width()-10)/2+room_width/2)+10
	var x1 = 980
	var y1 = 686-20
	var x2 = max(lm_cal, clamp(xx + (clamp(110 - global.longestmessage, 0, 110)) + 1.65 * (string_width(global.commandBuffer) - 1) / 3, xx + 215, (display_get_gui_width() - 10) / 2 + room_width / 2 + 50));
	var y2 = _yy+100
	//draw transparent background box for chatbox that adjusts to fit the longest message. will be later swapped for a scaled image background
	draw_rectangle_outlined(x1,y1,x2,y2,false,global.borderwidth,global.o_color,global.bg_color,global.bg_alpha);
	draw_set_alpha(1);
	var sca=.7
	global.chat_line_height = 70 * sca + 5;
// Set drawing properties
draw_set_colour(c_ltgray);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(fnt_chat); 
// Display server status
var serverStatus = "Server Unable to Connect"; // Default message
if (isServerRunning) {
    serverStatus = "Server Online";
	draw_set_colour(c_lime);
} else {
    serverStatus = "Server Stopped";
	draw_set_colour(c_red);
}

if show_server_status=true {
draw_text_transformed(xx, yy, serverStatus, sca, sca, 0);
yy += 40; // Increment y position for next line
}

if connectedClients>0 {
	draw_set_colour(c_aqua);
} else {
	draw_set_colour(c_ltgrey);
}
if show_server_status=true {
	//we can keep drawing this section this way unless somehow your next response can condense it as well. but its  kind of fine as is, no issues here.
draw_text_transformed(xx+3, yy+3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_text_transformed(xx-3, yy+3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_text_transformed(xx+3, yy-3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_text_transformed(xx-3, yy-3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_set_color(global.c_chat1);
draw_text_transformed(xx, yy-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
yy += 50; // Increment y position for next 
} else {
	draw_set_color(global.c_chat1);
	draw_text_transformed(xx+3, yy+3-10, "Chat Box", sca, sca, 0);
	draw_text_transformed(xx-3, yy+3-10, "Chat Box", sca, sca, 0);
	draw_text_transformed(xx+3, yy-3-10, "Chat Box", sca, sca, 0);
	draw_text_transformed(xx-3, yy-3-10, "Chat Box", sca, sca, 0);
	draw_set_color(global.c_chat2);
	draw_text_transformed(xx, yy-10, "Chat Box", sca, sca, 0);
yy += 60; // Increment y position for next line
}

sca=.5

if show_chatbox and ds_exists(global.debugMessages, ds_type_list) {
    var startY = yy;
    var maxLinesToShow = global.max_visible_lines;
	// Before calling drawChatMessages, ensure messages is a ds_list
if (!ds_exists(global.debugMessages, ds_type_list)) {
    show_debug_message("Error: debugMessages is not a valid ds_list.");
    return;
}

    var totalLines = drawChatMessages(global.debugMessages, 990, startY, maxLinesToShow, sca, false,global.c_chat2,global.c_chat1);

    // Calculate the max index for scrolling based on the total number of lines
    var maxScrollIndex = max(0, clamp(totalLines - maxLinesToShow,0,9999999));

    // Scroll messages with keyboard or mouse wheel
    if (input_check("up") || mouse_wheel_up()) {
		if !(input_check("up") and isActive = true) { //disable scrolling from "W" when typing
        scrollIndex = max(0, scrollIndex - 1);
        show_debug_message("[Client] Scrolled up: Current scroll index is " + string(scrollIndex));
		}
    }
    if (input_check("down") || mouse_wheel_down()) {
		if !(input_check("down") and isActive = true) {//disable scrolling from "S" when typing
        scrollIndex = min(maxScrollIndex, scrollIndex + 1);
        show_debug_message("[Client] Scrolled down: Current scroll index is " + string(scrollIndex));
		}
    }

    // Ensuring scrollIndex is always within the valid range
    scrollIndex = clamp(scrollIndex, 0, maxScrollIndex);

    // Redraw messages considering the scroll index
	// Before calling drawChatMessages, ensure messages is a ds_list
if (!ds_exists(global.debugMessages, ds_type_list)) {
    show_debug_message("Error: debugMessages is not a valid ds_list.");
    return;
}

    drawChatMessages(global.debugMessages, 990, yy , maxLinesToShow, sca, true,global.c_chat2,global.c_chat1);
}

yy=yy+clamp(totalLines-scrollIndex,0,global.max_visible_lines)*(global.chat_line_height*1.00)+5
sca=.6
_yy=yy-15
if global.commandBuffer != "" {
displayText = string_replace_all(global.commandBuffer, global.intentionalLineBreak, "\n");
} else {
displayText = ""
}
if (isActive) {
// Determine the number of line breaks in the command buffer
var lineCount = array_length(string_split(global.commandBuffer, "\n"));

// Calculate the new height based on the number of lines
var lines = string_split(string_replace_all(global.commandBuffer, global.intentionalLineBreak, "\n"), "\n");
var boxHeight = global.chat_line_height*1.05 * array_length(lines) + 2; // Calculate box height based on number of lines

//chat input box drawing code 
draw_set_color(c_black); // Set initial color to black (border)
 
    if (string_char_at(global.commandBuffer, 1) = "/") {
        draw_set_color(c_white);  // border becomes white if command is being typed
    }
// Adjust the bottom y-coordinate of the rectangle to expand with each new line
draw_rectangle(xx + 5, yy - 11, clamp(xx - 90 + 1.88 * (string_width(displayText) - 1) / 3, xx - 90, (display_get_gui_width() - 10) / 2 + room_width / 2) + 150 + 10, yy + boxHeight + 10, false);

    draw_set_color(c_white);  // Set initial bg color to white when no '/' detected
    if (string_char_at(global.commandBuffer, 1) = "/") {
        draw_set_color(c_black);  // Default bg color if command is being typed
		slash_typed=true
    } else {
		slash_typed=false
	}
draw_rectangle(xx + 10, yy - 6, clamp(xx - 90 + 1.88 * (string_width(displayText) - 1) / 3, xx - 90, (display_get_gui_width() - 10) / 2 + room_width / 2) + 150, yy + boxHeight, false);
//draw command buffer
draw_set_color(global.c_chat2);
	//we stay drawing these like this because theres no need for line handling here.

	draw_set_color(merge_color(global.textColor,c_red,clamp(abs(shake_angle),0,1)));
    draw_text_transformed(xx+20+shake_angle*7, yy-shake_angle*7, displayText + "_", sca, sca, shake_angle*.25);  // Shoblinking cursor
} else {
	draw_set_color(merge_color(global.c_chat1,c_red,clamp(abs(shake_angle),0,1)));
    draw_text_transformed(xx+20+shake_angle*7, yy-shake_angle*7, displayText + "_", sca, sca, shake_angle*.25);  // Show blinking cursor
}
} else {
	exit
}

File: Alarm_0.gml
Code:
// Alarm[0] Event
var t_buffer = buffer_create(256, buffer_grow, 1);
buffer_seek(t_buffer, buffer_seek_start, 0);
buffer_write(t_buffer, buffer_u8, global.IDENTIFIER_UNIQUE_ID);
buffer_write(t_buffer, buffer_string, global.clientUniqueID);
network_send_packet(global.client_socket, t_buffer, buffer_tell(t_buffer));
buffer_delete(t_buffer);
global.uniqueIDSent = true; // Ensure we don't resend the unique ID
show_debug_message("[Client] Unique ID sent after delay: " + global.clientUniqueID);


File: obj_Client.yy
Code:
{
  "$GMObject":"",
  "%Name":"obj_Client",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":68,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":1,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":2,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":5,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"obj_Client",
  "overriddenProperties":[],
  "parent":{
    "name":"Objects",
    "path":"folders/Objects.yy",
  },
  "parentObjectId":null,
  "persistent":true,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":null,
  "spriteMaskId":null,
  "visible":true,
}

File: Other_5.gml
Code:
/// @description Insert description here
//room end of obj_client
show_chatbox=false

File: Create_0.gml
Code:

// obj_Client setup Create Event
global.intentionalLineBreak = "|";
global.lastAddedMessage = "";
global.sessionLogFileName = "SessionLog_" + string_replace_all(string(date_current_datetime()), ":", "-") + ".txt";
global.masterLogFileName = "MasterLog.txt";
global.logDebugMessagesToFile = false; // By default, log debug messages to the file
global.serverAddress = "127.0.0.1"; // Example server address
// Initialize the data structure globally if not already initialized
global.chatLogs=-1
global.bubble_send_to_log=1
global.message_is_bubble=0
if (!ds_exists(global.chatLogs, ds_type_list)) {
    global.chatLogs = ds_list_create();
}
time=0
// Global Variable Initialization (usually in some global script or create event)
global.typingSpeedCalcDuration = 60; // Default to 60 seconds
global.lastWPMUpdateTime = 0; // Timestamp of the last WPM update
global.WPMUpdateInterval = 5000; // Minimum time between updates in milliseconds (e.g., 5000ms = 5 seconds)
lastUpdateTime = -1;
updateInterval = 60; // Run every 60 seconds
//input
input_cursor_coord_space_set(INPUT_COORD_SPACE.ROOM, 0);
//input_mouse_capture_set(true, 1);
window_set_cursor(cr_none)
instance_create_depth(room_width/2,room_height/2,-1000000,obj_Cursor);
// Global time offset initialized
global.timeOffset = 0;
global.inputDisplayEnabled = false;  // Initialize the variable at an appropriate place in your game startup code
global.actions = ds_map_create();
// Adding command details
// Global initialization script or create event
global.commandDetails = ds_map_create();
add_command("goto_planet(", 1, [["string", "real"]], true);  // Requires '(' visually
add_command("jump_planet(", 1, [["string", "real"]], true);  // Requires '(' visually
add_command("toggle_server", 3, [[]], false);  // Does not require '(' visually
add_command("toggle_debug", 1, [[]], false);  // Does not require '(' visually
add_command("list_clients", 1, [[]], false);  // Does not require '(' visually
add_command("enable_heartbeat", 2, [[]], false);  // Does not require '(' visually
add_command("disable_heartbeat", 2, [[]], false);  // Does not require '(' visually
add_command("toggle_log_debug", 2, [[]], false);  // Does not require '(' visually
add_command("set_my_permission(", 0, [["string", "real"]], true);
add_command("save_game", 0, [[]], false);  // Does not require "(" visually
add_command("game_end(", 0, [["string", "real"]], true); 
add_command("list_commands", 0, [[]], false); // No arguments, accessible at all permission levels
add_command("show_lines(", 0, [["real"]], true);
add_command("set_variable(", 2, [["string"],["string","real"]],true)
add_command("level_up(", 1, [["real"]], true);  // Command requires '(' visually and a real number argument
add_command("show_wpm", 0, [[]], false);  // Does not require '(' visually, level 0 permission
add_command("chat_bubble(", 1, [["string"], ["array"]], true);
add_command("save_macros", 1, [[]], false);  // Add the command to save macros
add_command("list_variables", 2, [[]], false);
add_command("add_action(", 2, [["string"],["string"],["array"]],true);
add_command("save_actions", 2, [], false);
add_command("list_actions", 2, [], false);
add_command("execute_action(", 2, [["string"]], true);
add_command("show_variable(", 2, [["string"]], true);
add_command("return_controller", 1, [[]], false);
add_command("toggle_input_display", 1, [[]], false);
add_command("show_gamepad_mapping", 1, [[]], false);
add_command("add_action_group(", 2, [["string"], ["array"]], true);
add_command("list_action_groups", 2, [[]], false);
add_command("delete_action(", 2, [["string"]], true);
add_command("delete_actions(", 2, [["array"]], true);
// Initialize global action details
global.actionDetails = ds_map_create();



//add_command("spawn_boss(", 2, [["string"]], true);

//0name //1health //2resistance0-1invincible /3/rate //4attackset //5damage //6moveset //7image //8appearance [0=character,1=boss] //9appearanceid
//add_boss("Drake",6666666,.666,1,1,1,4,spr_boss1,1,0]

// You can add new commands or modify existing ones easily with the `add_command` function.
global.variableDetails = ds_map_create();
add_variable("SpawnEnemies", "spawnenemies", 1, master, "bool", 0, 1, [], [], "Player");
add_variable("Level", "level", 1, master, "real", 1, 100000, [], [], "Player");
add_variable("Password", "password", 1, master, "string", 1, 100000, [], [], "Player");
add_variable("BPM", "target_bpm", 115, global, "real", 1, 100000, [], [], "Gameplay");
add_variable("Time", "ti", 0, master, "real", 0, 99999999, [], [], "Gameplay");
add_variable("WPM Window", "typingSpeedCalcDuration", 60, global, "real", 1, 600, [], [], "Social");
add_variable("CharacterLimit", "character_limit", 1, global, "real", 0, 2000, [], [], "Social");
add_variable("Macro1", "macro1", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro2", "macro2", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro3", "macro3", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro4", "macro4", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro5", "macro5", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro6", "macro6", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro7", "macro7", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro8", "macro8", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro9", "macro9", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro10", "macro10", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("ControllerType", "control_type", 1, global, "real", -99999999, 99999999, [], [], "Global");
global.debugCommand = "";
//global.character_limit
// Ensure commandBuffer is initialized
global.commandBuffer = "";
slash_typed=false //whether or not a command is being typed
// Initialize a global variable for text color
c_pink = make_color_hsv(0,58,255);
global.defaultTextColor = c_black;
global.textColor = global.defaultTextColor;
// Global Variable Initialization (usually in some global script or create event)
global.typingSpeedCalcDuration = 60; // Default to 60 seconds
 // This will store the input from the user
isActive = true;  // To check if command input is active
sendHeartbeat = false; // Control sending of heartbeat messages
_yy=0
pasting=0;
global.longestmessage=0;
global.c_chat2=c_black
global.c_chat1=c_white
fnt_chat=Font4
global.borderwidth=8 //bg width
global.bg_alpha=.4 //bg alpha
global.bg_color=c_black //background color
global.o_color=c_white //outline color
global.wrapWidth = 2350; // Adjust this value based on your chat box
global.character_limit=1000;//character limit for chat//this will be shorter for players
global.lastSpaceIndex = -1;
displayText=""
//Other Variables
global.showDebugMessages = true; // Enable debug messages by default
global.maximumMessages=2000;
maxDisplayMessages = 6; // Number of debug messages to display at once
// Initialize max visible lines for the chat box
global.max_visible_lines = maxDisplayMessages;  // You can adjust this number based on your needs

global.debugMessages = ds_list_create();
fnt_chat_id=0
// Global settings for text wrapping
global.chat_threshold = 2350;  // Threshold to start considering wrapping
global.chat_text_limit = 2350; // Maximum pixel width of text before wrapping
global.chat_line_height = 50; // Height of each line of text in pixels
global.min_width = 110;  // Minimum width of the chat box
global.max_width = 1000;  // Maximum width of the chat box, adjust according to your UI design
// Adjust these values to tweak where the text wraps
global.chat_threshold = global.chat_threshold * 1.66;  // Increase the threshold
global.chat_text_limit = global.chat_text_limit * 1.66;  // Increase the width limit

//Scrolling Variables
scrollIndex = 0; // Initialize scroll position
baseScrollSensitivity = 0.1; // Base sensitivity, how much the index changes initially per mouse wheel movement
maxScrollSensitivity = 1.0; // Maximum sensitivity after continuous scrolling
sensitivityIncrement = 0.05; // How much the sensitivity increases with continuous scrolling
sensitivityDecrement = 0.01; // How much the sensitivity decreases when not scrolling
global.scrollSensitivity = baseScrollSensitivity; // Current sensitivity, starts at base sensitivity
global.isScrolling = false; // Tracks if the user is currently scrolling

// Server Configuration
show_server_status=false
global.serverPort = "5555";
global.maxClients = 4;
global.heartbeatBPM = 115; // Beats per minute for the heartbeat
global.lastHeartbeatTime = current_time; // Store the current time
broadcastInterval = 60000 / global.heartbeatBPM; // Time between heartbeats in milliseconds

global.clientUniqueID = ""; // Initialize to an empty string
global.reconnectTimer = 0; // Time to attempt a reconnect
global.reconnectInterval = 2000; // Interval between reconnect attempts
global.isConnected = false; // Connection status
global.IDENTIFIER_UNIQUE_ID = 2; // Ensure this matches server expectation
global.uniqueIDSent = false; // Prevent re-sending

// Initialize server state and structures
isServerRunning = false;
connectedClients = 0;

// Generate or load the unique ID
if (!file_exists(working_directory + "client_id.txt")) {
    // For a new ID
    global.clientUniqueID = string(irandom_range(100000, 999999));
    var file = file_text_open_write(working_directory + "client_id.txt");
    file_text_write_string(file, global.clientUniqueID);
    file_text_close(file);
} else {
    // For an existing ID
    var file = file_text_open_read(working_directory + "client_id.txt");
    global.clientUniqueID = file_text_read_string(file);
    file_text_close(file);
}

// Client Initialization and Connection
global.client_socket = network_create_socket(network_socket_tcp);
var status = network_connect(global.client_socket, global.serverAddress, global.serverPort);
if (status >= 0) {
    // Successful connection
    show_debug_message("[Client] Successfully connected and ID sent.");
	isServerRunning = true;
    var buffer = buffer_create(256, buffer_grow, 1);
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_u8, global.IDENTIFIER_UNIQUE_ID);
    buffer_write(buffer, buffer_string, global.clientUniqueID);
    network_send_packet(global.client_socket, buffer, buffer_tell(buffer));
    buffer_delete(buffer);
} else {
    // Handle connection failure
    show_debug_message("[Client] Connection failed.");
}

show_chatbox=false
depth-=10; //ensure at top or front of view

global.backspaceTimer = 0;
global.backspaceDelay = 15; // Initial delay before rapid deletion
global.backspaceSpeed = 1;  // Delay between rapid deletions

global.recall_list = ds_list_create();  // List to store past messages and commands
global.recall_max = 20;  // Maximum number of entries to remember
global.recall_index = -1;  // Index for navigating through the recall list

shake_angle=0 //angle to shake text when character limit reached.

load_actions()


Object: obj_chat_bubble

File: Step_0.gml
Code:
// obj_chat_bubble Step Event
if (owner != noone) {
    x = owner.x;
    y = owner.y - 60;
}

if (wrapped == 0) {
	if string_contains(text, "|") {
	text = string_replace_all(text, "|", "\n");
	}
    draw_set_font(text_font);
    var text_length = string_length(text);
    var longestWordWidth = get_longest_word_width(text, text_font, 1);
    
    // Calculate initial text scale
    text_scale = min(clamp(1 - text_length / 600, 0.4, 1), clamp(1.5 - longestWordWidth / 1200, 0.4, 1));
    
    // Wrap text
    wrapped_text = wrap_chat_text(text, max_width - 2 * padding);
    
    // Count lines and adjust scale if needed
    line_count = string_count("\n", wrapped_text) + 1;
    if (line_count > 5) {
        text_scale *= (5 / line_count);
        wrapped_text = wrap_chat_text(text, (max_width - 2 * padding) / text_scale);
        line_count = string_count("\n", wrapped_text) + 1;
    }
    
    // Calculate bubble dimensions
    scale_x = clamp(string_width_ext(wrapped_text, -1, max_width - 2 * padding) * text_scale + 6 * padding, min_width, max_width);
    real_scale_y = clamp(string_height_ext(wrapped_text, -1, max_width - 2 * padding) * text_scale + 4 * padding, min_height - 120, max_height - 120);
    
    scale_y = real_scale_y + 120;
    wrapped = 1;
}

// Calculate top_middle_x and top_middle_y
top_middle_x = x - (sprite_get_xoffset(sprite_index) - 250) * scale_x / 500;
top_middle_y = y - sprite_get_yoffset(sprite_index) - real_scale_y - 60;

// obj_chat_bubble Step Event
if (timer_enabled) {
    lifetime++;
    if (lifetime >= duration) {
        instance_destroy();
    }
}


File: Destroy_0.gml
Code:
// obj_chat_bubble Destroy Event
if (ds_exists(hover_progress, ds_type_map)) {
    ds_map_destroy(hover_progress);
}
if (ds_exists(hover_scale, ds_type_map)) {
    ds_map_destroy(hover_scale);
}

File: Draw_0.gml
Code:
// obj_chat_bubble Draw Event
// At the beginning of the Draw Event, add these variables if they're not already defined:
if (!variable_instance_exists(id, "text_color")) {
    _text_color = c_black;  // Default text color
}
if (!variable_instance_exists(id, "text_color_outline")) {
    text_color_outline = c_white;  // Default outline color
}
if (!variable_instance_exists(id, "text_scale")) {
    text_scale = 1;  // Default text scale
}
if (!variable_instance_exists(id, "outline_size")) {
    outline_size = 1;  // Default outline size
}
if (!variable_instance_exists(id, "padding")) {
    padding = 10;  // Default padding
}
if (!variable_instance_exists(id, "max_width")) {
    max_width = 500;  // Default max width
}

// Define sprite variables (you can set these in the Create event)
if (!variable_instance_exists(id, "main_bubble_sprite")) {
    main_bubble_sprite = spr_chatbubble1;
}
if (!variable_instance_exists(id, "choice_bubble_sprite")) {
    choice_bubble_sprite = main_bubble_sprite; // Use the same sprite for choices
}
var tail_sprite_index = 0;
var middle_sprite_index = 1;
var top_sprite_index = 2;

var bottom_y = y - 100;
var top_y = y - real_scale_y - 100;
var middle_height = clamp(scale_y - 240, 0, max_height - 120);
var middle_y = y - 100 - sprite_get_yoffset(main_bubble_sprite) - (120 - sprite_get_yoffset(main_bubble_sprite)) * middle_height / 120;

// Draw main chat bubble
draw_sprite_ext(main_bubble_sprite, tail_sprite_index, x, bottom_y, scale_x / 500, 1, 0, c_white, 1);
draw_sprite_ext(main_bubble_sprite, middle_sprite_index, x, middle_y, scale_x / 500, middle_height / 120, 0, c_white, 1);
draw_sprite_ext(main_bubble_sprite, top_sprite_index, x, top_y, scale_x / 500, 1, 0, c_white, 1);

// Draw message text
draw_set_font(text_font);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
drawTextWithOutline(top_middle_x, top_middle_y - 100 + padding + 130, wrapped_text, text_scale, outline_size, text_color_outline, _text_color, max_width - 2 * padding);

// Calculate choice layout variables
// Calculate choice layout variables
if (array_length(choices) > 0) {
    var choice_padding = 10;
    var choice_width = 1100;
    var choice_height = 100;
    choices_per_row = min(2, array_length(choices));
    var rows = ceil(array_length(choices) / choices_per_row);
    
    var total_width = (choice_width + choice_padding) * choices_per_row - choice_padding;
    var start_x = x - total_width / 2;
    var start_y = bottom_y + 40;  // Position choices below the main bubble

    // Draw choices
    for (var i = 0; i < array_length(choices); i++) {
        var row = i div choices_per_row;
        var col = i mod choices_per_row;
        var choice_x = start_x + choice_width/3 + col * (choice_width/1.3 + choice_padding);
        var choice_y = start_y + row * (choice_height + choice_padding);

        var choice_middle_height = 0; //this should be set above 0 if there is more than 1 line in a choice.
        var choice_top_y = choice_y-60;
        var choice_bottom_y = choice_y + choice_middle_height+60;
        var choice_middle_y = choice_y+0;

        var is_hovering = point_in_rectangle(mouse_x, mouse_y, choice_x, choice_y, choice_x + choice_width, choice_bottom_y);
        
        var alpha = 0.5;
        var color = c_white;
        var scale = 1;

        // Smooth hover animation
        if (ds_exists(hover_progress, ds_type_map) && ds_exists(hover_scale, ds_type_map)) {
            if (!ds_map_exists(hover_progress, i)) ds_map_add(hover_progress, i, 0);
            if (!ds_map_exists(hover_scale, i)) ds_map_add(hover_scale, i, 1);

            if (is_hovering) {
                hover_progress[? i] = min(hover_progress[? i] + 1/30, 1);
                hover_scale[? i] = min(hover_scale[? i] + 0.05/30, 1.05);
            } else {
                hover_progress[? i] = max(hover_progress[? i] - 1/30, 0);
                hover_scale[? i] = max(hover_scale[? i] - 0.05/30, 1);
            }
            
            alpha = lerp(0.5, 1, hover_progress[? i]);
            color = merge_color(c_white, c_ltgray, hover_progress[? i]);
            scale = hover_scale[? i];
        }
			
        // Check for mouse click
        if (is_hovering && mouse_check_button_pressed(mb_left)) {
            if (choices[i][1] != "null") {
                handle_choice_selection(choices[i][1]);  // Pass the action name to the new function
            } else {
                // Handle "null" action (e.g., close the chat bubble)
                instance_destroy();
            }
        }

        // Draw choice bubble
        var choice_scale_x = choice_width / 880 * scale;
        var choice_scale_y = scale;
        draw_sprite_ext(choice_bubble_sprite, tail_sprite_index, choice_x + choice_width/3, choice_bottom_y, choice_scale_x, choice_scale_y, 0, color, alpha);
        draw_sprite_ext(choice_bubble_sprite, middle_sprite_index, choice_x + choice_width/3, choice_middle_y, choice_scale_x, choice_middle_height / 120 * choice_scale_y, 0, color, alpha);
        draw_sprite_ext(choice_bubble_sprite, top_sprite_index, choice_x + choice_width/3, choice_top_y, choice_scale_x, choice_scale_y, 0, color, alpha);

// Inside the for loop that draws choices
var choice_text = choices[i][0];
var wrapped_choice_text = wrap_chat_text(choice_text, choice_width - 40);  // Adjust padding

// Calculate the number of lines in the wrapped choice text
var choice_lines = string_count("\n", wrapped_choice_text) + 1;

// Adjust choice height based on number of lines
var adjusted_choice_height = max(choice_height, choice_lines * choice_line_height * choice_text_scale);

// Calculate the total height of the text
var total_text_height = choice_lines * choice_line_height * choice_text_scale;

// Calculate the starting Y position to center the text vertically
var text_start_y = choice_y + (adjusted_choice_height - total_text_height) / 2 - 45;

// Draw choice text
draw_set_halign(fa_center);
draw_set_valign(fa_middle);  // Change to top alignment

var text_color = is_hovering ? c_white : c_black;
var outline_color = is_hovering ? c_black : c_white;

drawTextWithOutline(
    choice_x + choice_width / 3, 
    text_start_y, 
    wrapped_choice_text, 
    choice_text_scale * scale, 
    1, 
    outline_color, 
    text_color, 
    choice_width - 40
);

}
}

// Debug: draw bounding box
if (show_bounds) {
    draw_set_color(c_red);
    draw_rectangle(top_middle_x - scale_x/2, top_middle_y + 130, top_middle_x + scale_x/2, bottom_y, true);
}

File: Create_0.gml
Code:
// obj_chat_bubble Create Event

hover_progress = ds_map_create();
hover_scale = ds_map_create();
_text_color = c_black;
choices_per_row = 2;
text_color_outline = c_white;
text_scale = 1;
outline_size = 2;
padding = 10;
text = "";
wrapped_text = "";
line_count = 1;
owner = noone;
choices = [];
choice_text_scale = 0.6;
choice_line_height = 20
max_width = 1000;
max_height = 800;
min_width = 200;
min_height = 240;
top_middle_x = 0;
top_middle_y = 0;
line_spacing = 0; // Adjust this value to change spacing
scale_y = min_height;
scale_x = min_width;
real_scale_y = min_height - 120;
duration = 1000;
lifetime = 0;
main_bubble_sprite = spr_chatbubble1;
choice_bubble_sprite = spr_chatchoice1;
text_font = Font_Default;
wrapped = 0;
show_bounds = false;

// Set up timer
if (array_length(choices) > 0) {
    has_choices = true;
    timer_enabled = false;
} else {
    has_choices = false;
    timer_enabled = true;
}

// Ensure that only one chat bubble exists per owner
if (owner != noone) {
    with (obj_chat_bubble) {
        if (id != other.id && owner == other.owner) {
            instance_destroy();
        }
    }
}

text = wrap_chat_text(text, max_width - 2 * padding);

File: obj_chat_bubble.yy
Code:
{
  "$GMObject":"",
  "%Name":"obj_chat_bubble",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":1,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"obj_chat_bubble",
  "overriddenProperties":[],
  "parent":{
    "name":"ui",
    "path":"folders/Objects/ui.yy",
  },
  "parentObjectId":null,
  "persistent":false,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":{
    "name":"spr_chatbubble1",
    "path":"sprites/spr_chatbubble1/spr_chatbubble1.yy",
  },
  "spriteMaskId":null,
  "visible":true,
}

== Related Scripts ==

Script: updateLongestMessage
File: updateLongestMessage.gml
Code:
function updateLongestMessage(messages) {
    var maxWidth = 0;
    for (var i = 0; i < ds_list_size(messages); i++) {
        var message = ds_list_find_value(messages, i);
        var lines = string_split(message, "\n");
        for (var j = 0; j < array_length(lines); j++) {
            var line = lines[j];
            var lineWidth = string_width(line);
            if (lineWidth > maxWidth) {
                maxWidth = lineWidth; // Update maxWidth if this line is wider
            }
        }
    }
    return maxWidth;
}



Script: get_longest_word_width
File: get_longest_word_width.gml
Code:
/// @function get_longest_word_width(text, font, scale)
/// @description Returns the width of the longest word in a string
/// @param {string} text - The input text
/// @param {font} font - The font to use for width calculation
/// @param {real} scale - The scaling factor for text
/// @return {real} - The width of the longest word
function get_longest_word_width(text, font, scale) {
    draw_set_font(font);
    var words = string_split(text, " ");
    var longestWordWidth = 0;

    for (var i = 0; i < array_length(words); i++) {
        var wordWidth = string_width(words[i]) * scale;
        if (wordWidth > longestWordWidth) {
            longestWordWidth = wordWidth;
        }
    }

    return longestWordWidth;
}

Script: wrap_chat_text
File: wrap_chat_text.gml
Code:
function wrap_chat_text(text, width) {
    var wrappedText = "";
    var lines = string_split(text, global.intentionalLineBreak);
    
    for (var l = 0; l < array_length(lines); l++) {
        var words = string_split(lines[l], " ");
        var currentLine = "";
        
        for (var i = 0; i < array_length(words); i++) {
            var word = words[i];
            var testLine = currentLine == "" ? word : currentLine + " " + word;
            
            if (string_width(testLine) > width * 1.8) {  // Allow 20% more width before wrapping
                if (currentLine != "") {
                    wrappedText += currentLine + "\n";
                    currentLine = "";
                }
                
                // Handle long words
                while (string_width(word) > width * 1.8) {
                    var splitIndex = 1;
                    while (string_width(string_copy(word, 1, splitIndex)) <= width * 1.8) {
                        splitIndex++;
                    }
                    wrappedText += string_copy(word, 1, splitIndex - 1) + "\n";
                    word = string_delete(word, 1, splitIndex - 1);
                }
                
                currentLine = word;
            } else {
                currentLine = testLine;
            }
        }
        
        wrappedText += currentLine;
        if (l < array_length(lines) - 1) {
            wrappedText += global.intentionalLineBreak;
        }
    }
    
    return wrappedText;
}

Script: string_wrap
File: string_wrap.gml
Code:
function string_wrap(str, max_width) {
    var text_wrapped = "";
    var space_pos = -1;
    var line_width = 0;
    var str_len = string_length(str);
    
    for (var i = 1; i <= str_len; i++) {
        var char = string_char_at(str, i);
        var char_width = string_width(char);
        
        if (char == " ") space_pos = i;
        
        if (line_width + char_width > max_width) {
            if (space_pos != -1) {
                text_wrapped += string_copy(str, 1, space_pos - 1) + "\n";
                str = string_delete(str, 1, space_pos);
                line_width = 0;
                i = 0;
                str_len = string_length(str);
                space_pos = -1;
            } else {
                text_wrapped += string_copy(str, 1, i - 1) + "\n";
                str = string_delete(str, 1, i - 1);
                line_width = 0;
                i = 0;
                str_len = string_length(str);
            }
        } else {
            line_width += char_width;
        }
    }
    
    text_wrapped += str;
    return text_wrapped;
}

Script: appendAndWrap
File: appendAndWrap.gml
Code:
/// @function appendAndWrap(char, currentBuffer, maxWidth)
/// @param {string} char - the character being added
/// @param {string} currentBuffer - the current content of the command buffer
/// @param {real} maxWidth - the maximum width of a line before wrapping
/// @desc Appends a character to the buffer and wraps text if necessary.
// Function to wrap text lines and handle spaces near line ends correctly
function appendAndWrap(char, currentBuffer, maxWidth) {
    var tempBuffer = currentBuffer + char;
    var lines = string_split(tempBuffer, global.intentionalLineBreak);
    var wrappedText = "";
    
    for (var j = 0; j < array_length(lines); j++) {
        var words = string_split(lines[j], " ");
        var line = "";
        
        for (var i = 0; i < array_length(words); i++) {
            var testLine = line + (line != "" ? " " : "") + words[i];
            if (string_width(testLine) > maxWidth) {
                if (line != "") {
                    wrappedText += line + "\n";
                    line = words[i];
                } else {
                    // If a single word is longer than maxWidth, we need to break it
                    var remainingWord = words[i];
                    while (string_width(remainingWord) > maxWidth) {
                        var breakIndex = floor(string_length(remainingWord) * (maxWidth / string_width(remainingWord)));
                        wrappedText += string_copy(remainingWord, 1, breakIndex) + "";
                        remainingWord = string_delete(remainingWord, 1, breakIndex);
                    }
                    line = remainingWord;
                }
            } else {
                line = testLine;
            }
        }
        
        wrappedText += line;
        if (j < array_length(lines) - 1) {
            wrappedText += global.intentionalLineBreak;
        }
    }
    
    return wrappedText;
}

Script: execute_command
File: execute_command.gml
Code:
function execute_command(command) {
    handleDebugMessage("Raw command: " + command, true);
    
    command = string_replace_all(command, "\r", "");
    command = string_trim(string_replace_all(command, "\n", " "));
    command = string_replace_all(command, global.intentionalLineBreak, "");
    
    handleDebugMessage("Cleaned command: " + command, true);

    if (command == "") {
        handleDebugMessage("Error: Empty command", true);
        return;
    }
    
    var dotIndex = string_pos(".", command);
    var targetObject = "yeancat";  // Default to "yeancat"
    var openParenIndex = string_pos("(", command);
    var closeParenIndex = string_last_pos(")", command);
    var commandName = "";
    var parameters = [];
    
    if (dotIndex > 0 && (openParenIndex == 0 || dotIndex < openParenIndex)) {
        targetObject = string_copy(command, 1, dotIndex - 1);
        command = string_delete(command, 1, dotIndex);
        openParenIndex = string_pos("(", command);
        closeParenIndex = string_last_pos(")", command);
    }
    
    if (string_pos("add_action(", command) == 1) {
        handleDebugMessage("Detected add_action command", true);
        
        if (openParenIndex > 0 && closeParenIndex > openParenIndex) {
            var argsString = string_copy(command, openParenIndex + 1, closeParenIndex - openParenIndex - 1);
            handleDebugMessage("Arguments string: " + argsString, true);
            
            var args = parse_arguments(argsString);
            handleDebugMessage("Parsed arguments: " + json_stringify(args), true);
            
            if (array_length(args) >= 3) {
                var actionName = string_trim_lr(args[0]);
                var fullActionCommand = string_trim_lr(args[1]);
                var actionParams = string_trim_lr(args[2]);
                
                handleDebugMessage("Action Name: " + actionName, true);
                handleDebugMessage("Full Action Command: " + fullActionCommand, true);
                handleDebugMessage("Action Params: " + actionParams, true);
                
                var actionDotIndex = string_pos(".", fullActionCommand);
                var actionTargetObject = "yeancat";
                var actionCommand = fullActionCommand;
                if (actionDotIndex > 0) {
                    actionTargetObject = string_copy(fullActionCommand, 1, actionDotIndex - 1);
                    actionCommand = string_delete(fullActionCommand, 1, actionDotIndex);
                }
                
                handleDebugMessage("Target Object: " + actionTargetObject, true);
                handleDebugMessage("Action Command: " + actionCommand, true);
                
                scr_add_action(actionName, actionCommand, actionParams, actionTargetObject);
            } else {
                handleDebugMessage("Invalid number of arguments for add_action", true);
            }
        } else {
            handleDebugMessage("Invalid add_action command format", true);
        }
        return;
    } else if (string_pos("execute_action(", command) == 1) {
        var actionName = string_replace(command, "execute_action(", "");
        actionName = string_replace(actionName, ")", "");
        actionName = string_trim(actionName);
        actionName = string_replace_all(actionName, "\"", ""); // Remove quotes
        
        if (ds_map_exists(global.actionDetails, actionName)) {
            var encodedCommand = ds_map_find_value(global.actionDetails, actionName);
            var decodedData = json_parse(base64_decode(encodedCommand));
            
            handleDebugMessage("Executing action/group: " + actionName, true);
            handleDebugMessage("Decoded Data: " + json_stringify(decodedData), true);
            
            if (is_struct(decodedData) && variable_struct_exists(decodedData, "type") && decodedData.type == "action_group") {
                // Handle action group
                var actions = decodedData.actions;
                for (var i = 0; i < array_length(actions); i++) {
                    execute_command("execute_action(" + actions[i] + ")");
                }
            } else if (is_struct(decodedData) && variable_struct_exists(decodedData, "command")) {
                // Handle single action
                var cmdName = decodedData.command;
                var params = decodedData.parameters;
                var targetObj = decodedData.targetObject;
                
                var fullCmd = (targetObj != "yeancat" ? targetObj + "." : "") + cmdName + "(" + json_stringify(params) + ")";
                execute_command(fullCmd);
            } else {
                handleDebugMessage("Invalid action/group data for: " + actionName, true);
            }
        } else {
            handleDebugMessage("Action/group '" + actionName + "' not found.", true);
        }
        return;
    } else if (openParenIndex > 0 && closeParenIndex > openParenIndex) {
        commandName = string_trim_lr(string_copy(command, 1, openParenIndex - 1));
        var paramString = string_copy(command, openParenIndex + 1, closeParenIndex - openParenIndex - 1);
        parameters = parse_arguments(paramString);
    } else {
        commandName = command;
    }
    
    handleDebugMessage("Command Name: " + commandName, true);
    handleDebugMessage("Target Object: " + targetObject, true);
    handleDebugMessage("Parameters: " + json_stringify(parameters), true);
    
	if (commandName == "add_action_group") {
        if (array_length(parameters) == 2) {
            var groupName = string_trim_lr(parameters[0]);
            var actionList = json_parse(parameters[1]);
            scr_add_action_group(groupName, actionList);
        } else {
            handleDebugMessage("Invalid number of arguments for add_action_group", true);
        }
        return;
    }
	
    if (commandName == "chat_bubble") {
        if (array_length(parameters) >= 1) {
            var text = json_parse(parameters[0]);
            var choices = (array_length(parameters) > 1) ? json_parse(parameters[1]) : [];
            scr_chat_bubble(text, targetObject, choices);
        } else {
            handleDebugMessage("Invalid number of arguments for chat_bubble", true);
        }
        return;
    }
    
    var scriptName = "scr_" + commandName;
    if (script_exists(asset_get_index(scriptName))) {
        if (is_array(parameters) && array_length(parameters) > 0) {
            // If there's only one parameter and it's a string representation of an array, parse it
            if (array_length(parameters) == 1 && string_char_at(parameters[0], 1) == "[") {
                parameters = json_parse(parameters[0]);
            }
            script_execute_ext(asset_get_index(scriptName), parameters);
        } else {
            script_execute(asset_get_index(scriptName));
        }
    } else {
        handleDebugMessage("Script not found for command: " + commandName, true);
    }
}

Script: scr_execute_command not found in the expected directories.

Script: handleDebugMessage
File: handleDebugMessage.gml
Code:
/// @function handleDebugMessage(msg, isDebug)
/// @description Logs messages to the debug console and files, and manages chat display
/// @param {string} msg - The message to log
/// @param {bool} isDebug - True if this is a debug message, false for essential messages
function handleDebugMessage(msg, isDebug) {
    var safeMsg = is_string(msg) ? msg : "Undefined message content";
    // Remove only newlines, keep spaces
    safeMsg = string_replace_all(safeMsg, "\n", " ");
    safeMsg = string_replace_all(safeMsg, "\r", "");
    
    var currentDate = date_current_datetime();
    var formattedDate = date_date_string(currentDate);
    var formattedTime = date_time_string(currentDate);
    var logMsg = formattedDate + " " + formattedTime + ": " + safeMsg + "\n";
    show_debug_message("Date: " + formattedDate + " Time: " + formattedTime + " Msg: " + safeMsg);
    
    // Log to file
    logToFile(working_directory + global.sessionLogFileName, logMsg);
    logToFile(working_directory + global.masterLogFileName, logMsg);
    
    // Always add messages to the debug messages list
	if (isDebug=true && global.logDebugMessagesToFile) || (isDebug<=0) {
    if (ds_exists(global.debugMessages, ds_type_list)) {
        if (ds_list_size(global.debugMessages) >= global.maximumMessages) {
            ds_list_delete(global.debugMessages, 0);
        }
        ds_list_add(global.debugMessages, safeMsg);
        global.lastAddedMessage = safeMsg;
    } else {
        show_debug_message("ERROR: global.debugMessages is not a valid ds_list");
    }
	}
    // Create a chat bubble for non-debug messages that don't start with "/"
    if (isDebug = -1 && string_char_at(safeMsg, 1) != "/"){
        var cleanMsg = string_remove_between(safeMsg, "[", "]");
        // Don't replace spaces here
        scr_chat_bubble(cleanMsg, "yeancat", []); // Pass an empty array for choices
    }
    
    // WPM Calculation Logic Integration
    if (!isDebug) {
        var wordCount = string_word_count(safeMsg);
        var messageDetails = [currentDate, wordCount];
        if (ds_exists(global.chatLogs, ds_type_list)) {
            ds_list_add(global.chatLogs, messageDetails);
            updateWPM();
        } else {
            show_debug_message("ERROR: global.chatLogs is not a valid ds_list");
        }
    }
}

Script: scr_chat_bubble
File: scr_chat_bubble.gml
Code:
/// @function scr_chat_bubble(Text, owner, [choices])
/// @param {string} _text - The text to show in the chat bubble
/// @param {string} _ownerName - The owner object name it will follow
/// @param {array} [_choices] - Optional array of choices, each choice is an array [text, actionName]
function scr_chat_bubble(text, owner, choices) {
    handleDebugMessage("Creating chat bubble: " + json_stringify(text) + ", Owner: " + string(owner) + ", Choices: " + json_stringify(choices), true);

    var ownerObject = noone;
    
    if (owner == "Player" || owner == "yeancat") {
        ownerObject = yeancat; // Assuming obj_player is the actual player object
    } else {
        ownerObject = asset_get_index(owner);
    }

    if (!instance_exists(ownerObject)) {
        handleDebugMessage("Owner object not found, using yeancat", true);
        ownerObject = yeancat; // Fallback to player object
    }

    var bubble = instance_create_layer(ownerObject.x, ownerObject.y - 60, "uii", obj_chat_bubble);
    if (bubble != noone) {
        with (bubble) {
            if (is_array(text) && array_length(text) > 1) {
                self.text = string(text[0]);
                self.choices = text[1];
            } else {
                self.text = is_string(text) ? text : string(text);
                self.choices = is_array(choices) ? choices : [];
            }
            self.owner = ownerObject;
        }

        handleDebugMessage("Chat Bubble Created. Following '" + object_get_name(ownerObject.object_index) + 
                           "' with text: '" + bubble.text + "'. Number of choices: " + string(array_length(bubble.choices)), true);
    } else {
        handleDebugMessage("Failed to create chat bubble instance", true);
    }
}

Script: execute_multiple_commands
File: execute_multiple_commands.gml
Code:
function execute_multiple_commands(commands) {
    var commandList = string_split(commands, global.intentionalLineBreak);
    for (var i = 0; i < array_length(commandList); i++) {
        var command = string_trim(commandList[i]);
        if (string_starts_with(command, "/")) {
            command = string_delete(command, 1, 1);
            execute_command(command);
        } else if (command != "") {
            // Handle non-command text (e.g., chat messages)
            var chatMessage = "[" + master.playername + "] " + command;
            global.message_is_bubble = 1;
            handleDebugMessage(chatMessage, -1);
            global.message_is_bubble = 0;
        }
    }
}

Script: scr_add_action
File: scr_add_action.gml
Code:
function scr_add_action(actionName, actionCommand, actionParams, targetObject = "yeancat") {
    handleDebugMessage("scr_add_action called with:", true);
    handleDebugMessage("Action Name: " + actionName, true);
    handleDebugMessage("Action Command: " + actionCommand, true);
    handleDebugMessage("Action Params: " + actionParams, true);
    handleDebugMessage("Target Object: " + targetObject, true);

    var params = json_parse(actionParams);
    
    // If params is an array with a single string element, extract that string
    if (is_array(params) && array_length(params) == 1 && is_string(params[0])) {
        params = params[0];
    }

    var actionData = {
        targetObject: targetObject,
        command: actionCommand,
        parameters: params
    };

    var encodedCommand = base64_encode(json_stringify(actionData));

    ds_map_set(global.actionDetails, actionName, encodedCommand);

    handleDebugMessage("Action '" + actionName + "' added/updated successfully.", false);
    handleDebugMessage("Encoded Command: " + encodedCommand, true);

    save_actions();
}

Script: update_chat_input_visuals
File: update_chat_input_visuals.gml
Code:
function update_chat_input_visuals() {
    var inputLines = string_split(global.commandBuffer, global.intentionalLineBreak);
    var finalColor = global.defaultTextColor;
    var hasError = false;
    var wrappedText = "";
    
    for (var i = 0; i < array_length(inputLines); i++) {
        var inputText = inputLines[i];
        var lineColor = global.defaultTextColor;
        
        var wrappedLine = wrap_chat_text(inputText, global.wrapWidth);
        wrappedText += wrappedLine;
        if (i < array_length(inputLines) - 1) {
            wrappedText += global.intentionalLineBreak;
        }
       
        if (string_starts_with(inputText, "/")) {
            var dotIndex = string_pos(".", inputText);
            var openParenIndex = string_pos("(", inputText);
            var commandStart, commandEnd;
            
            if (dotIndex > 0 && (openParenIndex == 0 || dotIndex < openParenIndex)) {
                commandStart = dotIndex + 1;
            } else {
                commandStart = 2;
            }
            
            commandEnd = openParenIndex > 0 ? openParenIndex : string_length(inputText) + 1;
            var command = string_copy(inputText, commandStart, commandEnd - commandStart);
            
            var hasPermission = check_permission_command(command);
            var commandExists = ds_map_exists(global.commandDetails, command + "(") || ds_map_exists(global.commandDetails, command);
            var requiresParentheses = ds_map_exists(global.commandDetails, command + "(");
            
            if (!commandExists) {
                lineColor = c_pink;
            } else if (!hasPermission) {
                lineColor = c_red;
                hasError = true;
            } else {
                var openParenPos = string_pos("(", inputText);
                var closeParenPos = string_last_pos(")", inputText);
                
                if (requiresParentheses) {
                    if (openParenPos == 0) {
                        lineColor = c_aqua;
                    } else if (closeParenPos == 0 || !are_brackets_balanced(inputText)) {
                        lineColor = c_yellow;
                    } else {
                        var params = string_copy(inputText, openParenPos + 1, closeParenPos - openParenPos - 1);
                        var isValid = are_params_valid(params);
                        lineColor = isValid ? c_lime : c_yellow;
                    }
                } else {
                    lineColor = c_lime;
                }
            }
        }
        
        if (lineColor != global.defaultTextColor) {
            finalColor = lineColor;
        }
        
        if (lineColor == c_red) {
            hasError = true;
            break;
        }
    }
    
    global.commandBuffer = wrappedText;
    global.textColor = hasError ? c_red : finalColor;
    
    show_debug_message("[Client] Command buffer after update_chat_input_visuals: " + global.commandBuffer);
}

Script: last_key_is_valid_character
File: last_key_is_valid_character.gml
Code:
/// @function last_key_is_valid_character(key)
/// @param {string} key - The last character entered
/// @desc Checks if the last key is a valid character for chat input
/// @return {bool} - True if the key is valid, false otherwise
function last_key_is_valid_character(key) {
    // Define a string of valid characters (letters, numbers, special characters)
    var validCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_`~ ";
    var validKeys = [
        vk_space,
        191, // "/" and "?"
        188, // "," and "<"
        190, // "." and ">"
        220, // "\" and "|"
        219, // "[" and "{"
        221, // "]" and "}"
        186, // ";" and ":"
        222, // "'" and """
        24 // "=" and "+"
    ];
    
    // Check if the key is the space key
    if (key == vk_space) {
        return true;
    }

    // Check if the key is in the list of valid keys
    for (var i = 0; i < array_length(validKeys); i++) {
        if (key == validKeys[i]) {
            return true;
        }
    }

    // Check if the key is a valid character
    if (string_pos(chr(key), validCharacters) > 0) {
        return true;
    }

    return false;
}


Script: string_trim_left
File: string_trim_left.gml
Code:
function string_trim_left(str) {
    var len = string_length(str);
    var pos = 1;
    while (pos <= len && ord(string_char_at(str, pos)) <= 32) {
        pos++;
    }
    return string_copy(str, pos, len - pos + 1);
}

Script: string_trim_right
File: string_trim_right.gml
Code:
/// @function string_trim_right(str, chars)
/// @description Trims specified characters from the right end of a string
function string_trim_right(str) {
    var len = string_length(str);
    while (len > 0 && ord(string_char_at(str, len)) <= 32) {
        len--;
    }
    return string_copy(str, 1, len);
}

Script: string_trim_lr
File: string_trim_lr.gml
Code:
function string_trim_lr(str) {
    return string_trim_left(string_trim_right(str));
}

Script: array_to_string
File: array_to_string.gml
Code:
// Helper function to convert array to string, including nested arrays
function array_to_string(arr) {
    var result = "[";
    for (var i = 0; i < array_length(arr); i++) {
        if (is_array(arr[i])) {
            result += array_to_string(arr[i]);
        } else if (is_string(arr[i])) {
            result += "\"" + string(arr[i]) + "\"";
        } else {
            result += string(arr[i]);
        }
        if (i < array_length(arr) - 1) result += ",";
    }
    result += "]";
    return result;
}

Script: scr_add_action
File: scr_add_action.gml
Code:
function scr_add_action(actionName, actionCommand, actionParams, targetObject = "yeancat") {
    handleDebugMessage("scr_add_action called with:", true);
    handleDebugMessage("Action Name: " + actionName, true);
    handleDebugMessage("Action Command: " + actionCommand, true);
    handleDebugMessage("Action Params: " + actionParams, true);
    handleDebugMessage("Target Object: " + targetObject, true);

    var params = json_parse(actionParams);
    
    // If params is an array with a single string element, extract that string
    if (is_array(params) && array_length(params) == 1 && is_string(params[0])) {
        params = params[0];
    }

    var actionData = {
        targetObject: targetObject,
        command: actionCommand,
        parameters: params
    };

    var encodedCommand = base64_encode(json_stringify(actionData));

    ds_map_set(global.actionDetails, actionName, encodedCommand);

    handleDebugMessage("Action '" + actionName + "' added/updated successfully.", false);
    handleDebugMessage("Encoded Command: " + encodedCommand, true);

    save_actions();
}

Script: scr_execute_action
File: scr_execute_action.gml
Code:
/// @function scr_execute_action(actionName)
/// @param {string} actionName - The name of the action or action group to execute
function scr_execute_action(actionName) {
    if (ds_map_exists(global.actionDetails, actionName)) {
        var encodedCommand = ds_map_find_value(global.actionDetails, actionName);
        var decodedData = json_parse(base64_decode(encodedCommand));
        
        handleDebugMessage("Executing action: " + actionName, true);
        handleDebugMessage("Decoded Command: " + json_stringify(decodedData), true);
        
        if (is_struct(decodedData) && variable_struct_exists(decodedData, "command")) {
            var targetObj = decodedData.targetObject;
            var cmdName = decodedData.command;
            var params = decodedData.parameters;
            
            var fullCmd = (targetObj != "yeancat" ? targetObj + "." : "") + cmdName + "(" + json_stringify(params) + ")";
            execute_command(fullCmd);
        } else {
            handleDebugMessage("Invalid action data for: " + actionName, true);
        }
    } else {
        handleDebugMessage("Action '" + actionName + "' not found.", true);
    }
}



Script: string_last_index_of
File: string_last_index_of.gml
Code:
/// @description Finds the last occurrence of a substring in a string
/// @param text The full string to search within
/// @param substring The substring to find
function string_last_index_of(text, substring) {
    var lastPos = -1;
    var currentPos = string_pos(substring, text);

    while (currentPos > 0) {
        lastPos = currentPos;
        currentPos = string_pos(substring, string_copy(text, currentPos + string_length(substring), string_length(text)));
        if (currentPos > 0) {
            currentPos += lastPos + string_length(substring) - 1;
        }
    }

    return lastPos;
}


Script: check_permission_command
File: check_permission_command.gml
Code:
// Function to check if a player has permission to execute a command
function check_permission_command(commandName) {
    show_debug_message("Checking permission for command: '" + commandName + "'");
    if (ds_map_exists(global.commandDetails, commandName) || ds_map_exists(global.commandDetails, commandName + "(")) {
        var commandInfo = ds_map_find_value(global.commandDetails, commandName) ?? ds_map_find_value(global.commandDetails, commandName + "(");
        var requiredLevel = commandInfo[? "requiredLevel"];
        var hasPermission = (master.permissions >= requiredLevel);
        show_debug_message("Required level: " + string(requiredLevel) + ", Player level: " + string(master.permissions) + ", Has permission: " + string(hasPermission));
        return hasPermission;
    } else {
        show_debug_message("Command '" + commandName + "' not found in global.commandDetails");
        return false;
    }
}

Script: are_brackets_balanced
File: are_brackets_balanced.gml
Code:
function are_brackets_balanced(str) {
    var stack = ds_stack_create();
    var in_string = false;
    for (var i = 1; i <= string_length(str); i++) {
        var char = string_char_at(str, i);
        if (char == "\"" && string_char_at(str, i - 1) != "\\") {
            in_string = !in_string;
        }
        if (!in_string) {
            if (char == "(" || char == "[") {
                ds_stack_push(stack, char);
            } else if (char == ")" || char == "]") {
                if (ds_stack_empty(stack)) {
                    ds_stack_destroy(stack);
                    return false;
                }
                var top = ds_stack_pop(stack);
                if ((char == ")" && top != "(") || (char == "]" && top != "[")) {
                    ds_stack_destroy(stack);
                    return false;
                }
            }
        }
    }
    var balanced = ds_stack_empty(stack);
    ds_stack_destroy(stack);
    return balanced;
}

Script: are_params_valid
File: are_params_valid.gml
Code:
function are_params_valid(params) {
    show_debug_message("Checking params: '" + params + "'");
    var paramArray = parse_parameters(params);
    for (var i = 0; i < array_length(paramArray); i++) {
        var param = paramArray[i];
        show_debug_message("Checking param: '" + string(param) + "'");
        if (is_string(param)) {
            if (string_trim(param) == "") {
                show_debug_message("Empty param found, invalid");
                return false;
            }
        } else if (is_array(param)) {
            if (!are_params_valid(array_to_string(param))) {
                show_debug_message("Invalid array contents");
                return false;
            }
        }
    }
    show_debug_message("All params valid");
    return true;
}

Script: parse_arguments
File: parse_arguments.gml
Code:
function parse_arguments(argsString) {
    handleDebugMessage("Parsing arguments: " + argsString, true);
    var args = [];
    var currentArg = "";
    var inQuotes = false;
    var bracketDepth = 0;
    var arrayDepth = 0;
    
    for (var i = 1; i <= string_length(argsString); i++) {
        var char = string_char_at(argsString, i);
        
        if (char == "\"" && string_char_at(argsString, i - 1) != "\\") {
            inQuotes = !inQuotes;
        }
        
        if (!inQuotes) {
            if (char == "[") arrayDepth++;
            if (char == "]") arrayDepth--;
            if (char == "(") bracketDepth++;
            if (char == ")") bracketDepth--;
        }
        
        if (char == "," && bracketDepth == 0 && arrayDepth == 0 && !inQuotes) {
            array_push(args, string_trim(currentArg));
            currentArg = "";
        } else {
            currentArg += char;
        }
    }
    
    if (currentArg != "") {
        array_push(args, string_trim(currentArg));
    }
    
    handleDebugMessage("Parsed arguments: " + json_stringify(args), true);
    return args;
}

Script: save_actions
File: save_actions.gml
Code:
function save_actions() {
    if (ds_map_size(global.actionDetails) == 0) {
        handleDebugMessage("No actions or action groups to save.", true);
        return;
    }
    
    var file = file_text_open_write("Actions.txt");
    var actionKey = ds_map_find_first(global.actionDetails);
    
    while (!is_undefined(actionKey)) {
        var encodedData = ds_map_find_value(global.actionDetails, actionKey);
        var line = actionKey + "|||" + encodedData;
        file_text_write_string(file, line);
        file_text_writeln(file);
        actionKey = ds_map_find_next(global.actionDetails, actionKey);
    }
    
    file_text_close(file);
    handleDebugMessage("Actions and action groups saved successfully to Actions.txt.", true);
}

Script: scr_add_action_group
File: scr_add_action_group.gml
Code:
/// @function scr_add_action_group(groupName, actionList)
/// @param {string} groupName - The name of the action group
/// @param {array} actionList - An array of action names to be executed in order
function scr_add_action_group(groupName, actionList) {
    if (!is_string(groupName) || !is_array(actionList)) {
        handleDebugMessage("Invalid parameters for add_action_group", true);
        return;
    }

    // Create a data structure to hold the action group information
    var groupData = {
        type: "action_group",
        actions: actionList
    };

    // Encode the group data
    var encodedGroupData = base64_encode(json_stringify(groupData));

    // Store the action group
    ds_map_set(global.actionDetails, groupName, encodedGroupData);

    handleDebugMessage("Action group '" + groupName + "' added successfully.", false);
    
    // Save the updated actions (including the new action group)
    save_actions();
}

Script: list_actions not found in the expected directories.

Script: get_object_reference
File: get_object_reference.gml
Code:
function get_object_reference(name) {
    switch(name) {
        case "Player": return "yeancat";
        case "Enemy": return "enemy";
        case "Boss": return "obj_boss";
        // Add more mappings as needed
        default: return noone;
    }
}

Script: list_action_groups not found in the expected directories.

== Related Logs ==

Log: SessionLog_45502.84
Content:

07/29/24 15:12:12: Loaded action/group: SaveGameNow
07/29/24 15:12:12: Loaded action/group: GotoKingsKingdom
07/29/24 15:12:12: Loaded action/group: EnterPortal
07/29/24 15:12:12: Loaded action/group: PurchaseArtifacts
07/29/24 15:12:12: Loaded action/group: BattleOutcome
07/29/24 15:12:12: Loaded action/group: VisitMarket
07/29/24 15:12:12: Loaded action/group: GotoDivineDomain
07/29/24 15:12:12: Loaded action/group: GotoTheEndonda
07/29/24 15:12:12: Loaded action/group: GotoUniverseCity
07/29/24 15:12:12: Loaded action/group: GotoLandOfLucy
07/29/24 15:12:12: Loaded action/group: GotoPlaceOfPablo
07/29/24 15:12:12: Loaded action/group: InvestigateSignals
07/29/24 15:12:12: Loaded action/group: OfferTrade
07/29/24 15:12:12: Loaded action/group: DisableEnemySpawns
07/29/24 15:12:12: Loaded action/group: BattleSequence
07/29/24 15:12:12: Loaded action/group: StartBattle
07/29/24 15:12:12: Loaded action/group: GotoTheIcyHeart
07/29/24 15:12:12: Loaded action/group: EngageCombat
07/29/24 15:12:12: Loaded action/group: GotoGhostTown
07/29/24 15:12:12: Loaded action/group: StartExploration
07/29/24 15:12:12: Loaded action/group: SetLevelFive
07/29/24 15:12:12: Loaded action/group: LevelUpThree
07/29/24 15:12:12: Loaded action/group: LevelUpOnce
07/29/24 15:12:12: Loaded action/group: GotoTheGoldMines
07/29/24 15:12:12: Loaded action/group: StartPeaceMission
07/29/24 15:12:12: Loaded action/group: DiplomaticChoice
07/29/24 15:12:12: Loaded action/group: TreatyOutcome
07/29/24 15:12:12: Loaded action/group: ExplorationChoice
07/29/24 15:12:12: Loaded action/group: BattleChoice
07/29/24 15:12:12: Loaded action/group: ArtifactMystery
07/29/24 15:12:12: Loaded action/group: PortalOutcome
07/29/24 15:12:12: Loaded action/group: PeacefulMission
07/29/24 15:12:12: Loaded action/group: SpaceAdventureStart
07/29/24 15:12:12: Loaded action/group: PortalAdventure
07/29/24 15:12:12: Loaded action/group: EnableEnemySpawns
07/29/24 15:12:12: Loaded action/group: GotoVulturesValley
07/29/24 15:12:12: Loaded action/group: GotoEarth
07/29/24 15:12:12: Loaded action/group: GotoStormySands
07/29/24 15:12:12: Loaded action/group: SpaceExploration
07/29/24 15:12:12: Loaded action/group: GotoFantasia
07/29/24 15:12:12: Loaded action/group: GotoYetopia
07/29/24 15:12:12: Loaded action/group: ArtifactOutcome
07/29/24 15:12:12: Loaded action/group: EpicBattle
07/29/24 15:12:12: Loaded action/group: PeaceTreaty
07/29/24 15:12:12: Actions and action groups loaded successfully from Actions.txt.
07/29/24 15:12:12: [Client] Failed to reconnect to server. Will try again...
07/29/24 15:12:31: Raw command: add_action_group(PortalAdventure, ["GotoTheEndonda", "SetLevelFive", "PortalOutcome"])
07/29/24 15:12:31: Cleaned command: add_action_group(PortalAdventure, ["GotoTheEndonda", "SetLevelFive", "PortalOutcome"])
07/29/24 15:12:31: Parsing arguments: PortalAdventure, ["GotoTheEndonda", "SetLevelFive", "PortalOutcome"]
07/29/24 15:12:31: Parsed arguments: ["PortalAdventure","[\"GotoTheEndonda\", \"SetLevelFive\", \"PortalOutcome\"]"]
07/29/24 15:12:31: Command Name: add_action_group
07/29/24 15:12:31: Target Object: yeancat
07/29/24 15:12:31: Parameters: ["PortalAdventure","[\"GotoTheEndonda\", \"SetLevelFive\", \"PortalOutcome\"]"]
07/29/24 15:12:31: Action group 'PortalAdventure' added successfully.
07/29/24 15:12:31: Actions and action groups saved successfully to Actions.txt.
07/29/24 15:12:35: Raw command: execute_action(SpaceAdventureStart)
07/29/24 15:12:35: Cleaned command: execute_action(SpaceAdventureStart)
07/29/24 15:12:35: Executing action/group: SpaceAdventureStart
07/29/24 15:12:35: Decoded Data: {"command":"chat_bubble","parameters":["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]],"targetObject":"Player"}
07/29/24 15:12:35: Raw command: Player.chat_bubble(["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]])
07/29/24 15:12:35: Cleaned command: Player.chat_bubble(["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]])
07/29/24 15:12:35: Parsing arguments: ["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]]
07/29/24 15:12:35: Parsed arguments: ["[\"Welcome to the Space Adventure! Choose your path:\",[[\"Explore the universe\",\"StartExploration\"],[\"Engage in battle\",\"StartBattle\"],[\"Embark on a peace mission\",\"StartPeaceMission\"]]]"]
07/29/24 15:12:35: Command Name: chat_bubble
07/29/24 15:12:35: Target Object: Player
07/29/24 15:12:35: Parameters: ["[\"Welcome to the Space Adventure! Choose your path:\",[[\"Explore the universe\",\"StartExploration\"],[\"Engage in battle\",\"StartBattle\"],[\"Embark on a peace mission\",\"StartPeaceMission\"]]]"]
07/29/24 15:12:35: Creating chat bubble: ["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]], Owner: Player, Choices: []
07/29/24 15:12:35: Chat Bubble Created. Following 'yeancat' with text: 'Welcome to the Space Adventure! Choose your path:'. Number of choices: 3
07/29/24 15:12:48: Raw command: execute_action(StartExploration)
07/29/24 15:12:48: Cleaned command: execute_action(StartExploration)
07/29/24 15:12:48: Executing action/group: StartExploration
07/29/24 15:12:48: Decoded Data: {"command":"execute_action","parameters":"SpaceExploration","targetObject":"yeancat"}
07/29/24 15:12:48: Raw command: execute_action("SpaceExploration")
07/29/24 15:12:48: Cleaned command: execute_action("SpaceExploration")
07/29/24 15:12:48: Executing action/group: SpaceExploration
07/29/24 15:12:48: Decoded Data: {"type":"action_group","actions":["GotoUniverseCity","ExplorationChoice"]}
07/29/24 15:12:48: Raw command: execute_action(GotoUniverseCity)
07/29/24 15:12:48: Cleaned command: execute_action(GotoUniverseCity)
07/29/24 15:12:48: Executing action/group: GotoUniverseCity
07/29/24 15:12:48: Decoded Data: {"command":"goto_planet","parameters":"Universe City","targetObject":"yeancat"}
07/29/24 15:12:48: Raw command: goto_planet("Universe City")
07/29/24 15:12:48: Cleaned command: goto_planet("Universe City")
07/29/24 15:12:48: Parsing arguments: "Universe City"
07/29/24 15:12:48: Parsed arguments: ["\"Universe City\""]
07/29/24 15:12:48: Command Name: goto_planet
07/29/24 15:12:48: Target Object: yeancat
07/29/24 15:12:48: Parameters: ["\"Universe City\""]
07/29/24 15:12:48: Teleported to Universe City.
07/29/24 15:12:48: Raw command: execute_action(ExplorationChoice)
07/29/24 15:12:48: Cleaned command: execute_action(ExplorationChoice)
07/29/24 15:12:48: Executing action/group: ExplorationChoice
07/29/24 15:12:48: Decoded Data: {"command":"chat_bubble","parameters":["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]],"targetObject":"Player"}
07/29/24 15:12:48: Raw command: Player.chat_bubble(["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]])
07/29/24 15:12:48: Cleaned command: Player.chat_bubble(["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]])
07/29/24 15:12:48: Parsing arguments: ["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]]
07/29/24 15:12:48: Parsed arguments: ["[\"You've arrived at Universe City. What's your next move?\",[[\"Investigate strange signals\",\"InvestigateSignals\"],[\"Visit the local market\",\"VisitMarket\"],[\"Return to base\",\"ReturnToBase\"]]]"]
07/29/24 15:12:48: Command Name: chat_bubble
07/29/24 15:12:48: Target Object: Player
07/29/24 15:12:48: Parameters: ["[\"You've arrived at Universe City. What's your next move?\",[[\"Investigate strange signals\",\"InvestigateSignals\"],[\"Visit the local market\",\"VisitMarket\"],[\"Return to base\",\"ReturnToBase\"]]]"]
07/29/24 15:12:48: Creating chat bubble: ["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]], Owner: Player, Choices: []
07/29/24 15:12:48: Chat Bubble Created. Following 'yeancat' with text: 'You've arrived at Universe City. What's your next move?'. Number of choices: 3
07/29/24 15:12:50: Raw command: execute_action(InvestigateSignals)
07/29/24 15:12:50: Cleaned command: execute_action(InvestigateSignals)
07/29/24 15:12:50: Executing action/group: InvestigateSignals
07/29/24 15:12:50: Decoded Data: {"command":"chat_bubble","parameters":["The signals lead you to a hidden portal. Do you enter?",[["Enter the portal","EnterPortal"],["Report back to HQ","ReportToHQ"]]],"targetObject":"Player"}
07/29/24 15:12:50: Raw command: Player.chat_bubble(["The signals lead you to a hidden portal. Do you enter?",[["Enter the portal","EnterPortal"],["Report back to HQ","ReportToHQ"]]])
07/29/24 15:12:50: Cleaned command: Player.chat_bubble(["The signals lead you to a hidden portal. Do you enter?",[["Enter the portal","EnterPortal"],["Report back to HQ","ReportToHQ"]]])
07/29/24 15:12:50: Parsing arguments: ["The signals lead you to a hidden portal. Do you enter?",[["Enter the portal","EnterPortal"],["Report back to HQ","ReportToHQ"]]]
07/29/24 15:12:51: Parsed arguments: ["[\"The signals lead you to a hidden portal. Do you enter?\",[[\"Enter the portal\",\"EnterPortal\"],[\"Report back to HQ\",\"ReportToHQ\"]]]"]
07/29/24 15:12:51: Command Name: chat_bubble
07/29/24 15:12:51: Target Object: Player
07/29/24 15:12:51: Parameters: ["[\"The signals lead you to a hidden portal. Do you enter?\",[[\"Enter the portal\",\"EnterPortal\"],[\"Report back to HQ\",\"ReportToHQ\"]]]"]
07/29/24 15:12:51: Creating chat bubble: ["The signals lead you to a hidden portal. Do you enter?",[["Enter the portal","EnterPortal"],["Report back to HQ","ReportToHQ"]]], Owner: Player, Choices: []
07/29/24 15:12:51: Chat Bubble Created. Following 'yeancat' with text: 'The signals lead you to a hidden portal. Do you enter?'. Number of choices: 2
07/29/24 15:12:53: Raw command: execute_action(EnterPortal)
07/29/24 15:12:53: Cleaned command: execute_action(EnterPortal)
07/29/24 15:12:53: Executing action/group: EnterPortal
07/29/24 15:12:53: Decoded Data: {"command":"execute_action","parameters":"PortalAdventure","targetObject":"yeancat"}
07/29/24 15:12:53: Raw command: execute_action("PortalAdventure")
07/29/24 15:12:53: Cleaned command: execute_action("PortalAdventure")
07/29/24 15:12:53: Executing action/group: PortalAdventure
07/29/24 15:12:53: Decoded Data: {"type":"action_group","actions":["GotoTheEndonda","SetLevelFive","PortalOutcome"]}
07/29/24 15:12:53: Raw command: execute_action(GotoTheEndonda)
07/29/24 15:12:53: Cleaned command: execute_action(GotoTheEndonda)
07/29/24 15:12:53: Executing action/group: GotoTheEndonda
07/29/24 15:12:53: Decoded Data: {"command":"goto_planet","parameters":"The Endonda","targetObject":"yeancat"}
07/29/24 15:12:53: Raw command: goto_planet("The Endonda")
07/29/24 15:12:53: Cleaned command: goto_planet("The Endonda")
07/29/24 15:12:53: Parsing arguments: "The Endonda"
07/29/24 15:12:54: Parsed arguments: ["\"The Endonda\""]
07/29/24 15:12:54: Command Name: goto_planet
07/29/24 15:12:54: Target Object: yeancat
07/29/24 15:12:54: Parameters: ["\"The Endonda\""]
07/29/24 15:12:54: Teleported to The Endonda.
07/29/24 15:12:54: Raw command: execute_action(SetLevelFive)
07/29/24 15:12:54: Cleaned command: execute_action(SetLevelFive)
07/29/24 15:12:54: Executing action/group: SetLevelFive
07/29/24 15:12:54: Decoded Data: {"command":"set_variable","parameters":["Level","5"],"targetObject":"yeancat"}
07/29/24 15:12:54: Raw command: set_variable(["Level","5"])
07/29/24 15:12:54: Cleaned command: set_variable(["Level","5"])
07/29/24 15:12:54: Parsing arguments: ["Level","5"]
07/29/24 15:12:54: Parsed arguments: ["[\"Level\",\"5\"]"]
07/29/24 15:12:54: Command Name: set_variable
07/29/24 15:12:54: Target Object: yeancat
07/29/24 15:12:54: Parameters: ["[\"Level\",\"5\"]"]
07/29/24 15:12:54: Level set to 5
07/29/24 15:12:54: Raw command: execute_action(PortalOutcome)
07/29/24 15:12:54: Cleaned command: execute_action(PortalOutcome)
07/29/24 15:12:54: Executing action/group: PortalOutcome
07/29/24 15:12:54: Decoded Data: {"command":"chat_bubble","parameters":["You've discovered an ancient civilization! What's your approach?",[["Study their technology","StudyTech"],["Establish communication","Communicate"],["Return home with findings","ReturnWithFindings"]]],"targetObject":"Player"}
07/29/24 15:12:54: Raw command: Player.chat_bubble(["You've discovered an ancient civilization! What's your approach?",[["Study their technology","StudyTech"],["Establish communication","Communicate"],["Return home with findings","ReturnWithFindings"]]])
07/29/24 15:12:54: Cleaned command: Player.chat_bubble(["You've discovered an ancient civilization! What's your approach?",[["Study their technology","StudyTech"],["Establish communication","Communicate"],["Return home with findings","ReturnWithFindings"]]])
07/29/24 15:12:54: Parsing arguments: ["You've discovered an ancient civilization! What's your approach?",[["Study their technology","StudyTech"],["Establish communication","Communicate"],["Return home with findings","ReturnWithFindings"]]]
07/29/24 15:12:54: Parsed arguments: ["[\"You've discovered an ancient civilization! What's your approach?\",[[\"Study their technology\",\"StudyTech\"],[\"Establish communication\",\"Communicate\"],[\"Return home with findings\",\"ReturnWithFindings\"]]]"]
07/29/24 15:12:54: Command Name: chat_bubble
07/29/24 15:12:54: Target Object: Player
07/29/24 15:12:54: Parameters: ["[\"You've discovered an ancient civilization! What's your approach?\",[[\"Study their technology\",\"StudyTech\"],[\"Establish communication\",\"Communicate\"],[\"Return home with findings\",\"ReturnWithFindings\"]]]"]
07/29/24 15:12:54: Creating chat bubble: ["You've discovered an ancient civilization! What's your approach?",[["Study their technology","StudyTech"],["Establish communication","Communicate"],["Return home with findings","ReturnWithFindings"]]], Owner: Player, Choices: []
07/29/24 15:12:54: Chat Bubble Created. Following 'yeancat' with text: 'You've discovered an ancient civilization! What's your approach?'. Number of choices: 3
07/29/24 15:12:58: Raw command: execute_action(StudyTech)
07/29/24 15:12:58: Cleaned command: execute_action(StudyTech)
07/29/24 15:12:58: Action/group 'StudyTech' not found.
07/29/24 15:13:00: [Jay Arnold] nice!
07/29/24 15:13:00: Creating chat bubble: " nice!", Owner: yeancat, Choices: []
07/29/24 15:13:00: Chat Bubble Created. Following 'yeancat' with text: ' nice!'. Number of choices: 0
07/29/24 15:13:03: Raw command: execute_action(SpaceAdventureStart)
07/29/24 15:13:03: Cleaned command: execute_action(SpaceAdventureStart)
07/29/24 15:13:03: Executing action/group: SpaceAdventureStart
07/29/24 15:13:03: Decoded Data: {"command":"chat_bubble","parameters":["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]],"targetObject":"Player"}
07/29/24 15:13:03: Raw command: Player.chat_bubble(["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]])
07/29/24 15:13:03: Cleaned command: Player.chat_bubble(["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]])
07/29/24 15:13:03: Parsing arguments: ["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]]
07/29/24 15:13:03: Parsed arguments: ["[\"Welcome to the Space Adventure! Choose your path:\",[[\"Explore the universe\",\"StartExploration\"],[\"Engage in battle\",\"StartBattle\"],[\"Embark on a peace mission\",\"StartPeaceMission\"]]]"]
07/29/24 15:13:03: Command Name: chat_bubble
07/29/24 15:13:03: Target Object: Player
07/29/24 15:13:03: Parameters: ["[\"Welcome to the Space Adventure! Choose your path:\",[[\"Explore the universe\",\"StartExploration\"],[\"Engage in battle\",\"StartBattle\"],[\"Embark on a peace mission\",\"StartPeaceMission\"]]]"]
07/29/24 15:13:03: Creating chat bubble: ["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]], Owner: Player, Choices: []
07/29/24 15:13:03: Chat Bubble Created. Following 'yeancat' with text: 'Welcome to the Space Adventure! Choose your path:'. Number of choices: 3
07/29/24 15:13:05: Raw command: execute_action(StartPeaceMission)
07/29/24 15:13:05: Cleaned command: execute_action(StartPeaceMission)
07/29/24 15:13:05: Executing action/group: StartPeaceMission
07/29/24 15:13:05: Decoded Data: {"command":"execute_action","parameters":"PeacefulMission","targetObject":"yeancat"}
07/29/24 15:13:05: Raw command: execute_action("PeacefulMission")
07/29/24 15:13:05: Cleaned command: execute_action("PeacefulMission")
07/29/24 15:13:05: Executing action/group: PeacefulMission
07/29/24 15:13:05: Decoded Data: {"type":"action_group","actions":["GotoDivineDomain","DiplomaticChoice"]}
07/29/24 15:13:05: Raw command: execute_action(GotoDivineDomain)
07/29/24 15:13:05: Cleaned command: execute_action(GotoDivineDomain)
07/29/24 15:13:05: Executing action/group: GotoDivineDomain
07/29/24 15:13:05: Decoded Data: {"command":"goto_planet","parameters":"Divine Domain","targetObject":"yeancat"}
07/29/24 15:13:05: Raw command: goto_planet("Divine Domain")
07/29/24 15:13:05: Cleaned command: goto_planet("Divine Domain")
07/29/24 15:13:05: Parsing arguments: "Divine Domain"
07/29/24 15:13:05: Parsed arguments: ["\"Divine Domain\""]
07/29/24 15:13:05: Command Name: goto_planet
07/29/24 15:13:05: Target Object: yeancat
07/29/24 15:13:05: Parameters: ["\"Divine Domain\""]
07/29/24 15:13:05: Teleported to Divine Domain.
07/29/24 15:13:05: Raw command: execute_action(DiplomaticChoice)
07/29/24 15:13:05: Cleaned command: execute_action(DiplomaticChoice)
07/29/24 15:13:05: Executing action/group: DiplomaticChoice
07/29/24 15:13:05: Decoded Data: {"command":"chat_bubble","parameters":["You're in Divine Domain for a peace mission. How do you proceed?",[["Offer trade deal","OfferTrade"],["Share technology","ShareTechnology"],["Request alliance","RequestAlliance"]]],"targetObject":"Player"}
07/29/24 15:13:05: Raw command: Player.chat_bubble(["You're in Divine Domain for a peace mission. How do you proceed?",[["Offer trade deal","OfferTrade"],["Share technology","ShareTechnology"],["Request alliance","RequestAlliance"]]])
07/29/24 15:13:05: Cleaned command: Player.chat_bubble(["You're in Divine Domain for a peace mission. How do you proceed?",[["Offer trade deal","OfferTrade"],["Share technology","ShareTechnology"],["Request alliance","RequestAlliance"]]])
07/29/24 15:13:05: Parsing arguments: ["You're in Divine Domain for a peace mission. How do you proceed?",[["Offer trade deal","OfferTrade"],["Share technology","ShareTechnology"],["Request alliance","RequestAlliance"]]]
07/29/24 15:13:05: Parsed arguments: ["[\"You're in Divine Domain for a peace mission. How do you proceed?\",[[\"Offer trade deal\",\"OfferTrade\"],[\"Share technology\",\"ShareTechnology\"],[\"Request alliance\",\"RequestAlliance\"]]]"]
07/29/24 15:13:05: Command Name: chat_bubble
07/29/24 15:13:05: Target Object: Player
07/29/24 15:13:05: Parameters: ["[\"You're in Divine Domain for a peace mission. How do you proceed?\",[[\"Offer trade deal\",\"OfferTrade\"],[\"Share technology\",\"ShareTechnology\"],[\"Request alliance\",\"RequestAlliance\"]]]"]
07/29/24 15:13:05: Creating chat bubble: ["You're in Divine Domain for a peace mission. How do you proceed?",[["Offer trade deal","OfferTrade"],["Share technology","ShareTechnology"],["Request alliance","RequestAlliance"]]], Owner: Player, Choices: []
07/29/24 15:13:05: Chat Bubble Created. Following 'yeancat' with text: 'You're in Divine Domain for a peace mission. How do you proceed?'. Number of choices: 3
07/29/24 15:13:09: Raw command: execute_action(ShareTechnology)
07/29/24 15:13:09: Cleaned command: execute_action(ShareTechnology)
07/29/24 15:13:09: Action/group 'ShareTechnology' not found.
07/29/24 15:13:11: Raw command: execute_action(SpaceAdventureStart)
07/29/24 15:13:11: Cleaned command: execute_action(SpaceAdventureStart)
07/29/24 15:13:11: Executing action/group: SpaceAdventureStart
07/29/24 15:13:11: Decoded Data: {"command":"chat_bubble","parameters":["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]],"targetObject":"Player"}
07/29/24 15:13:11: Raw command: Player.chat_bubble(["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]])
07/29/24 15:13:11: Cleaned command: Player.chat_bubble(["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]])
07/29/24 15:13:11: Parsing arguments: ["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]]
07/29/24 15:13:11: Parsed arguments: ["[\"Welcome to the Space Adventure! Choose your path:\",[[\"Explore the universe\",\"StartExploration\"],[\"Engage in battle\",\"StartBattle\"],[\"Embark on a peace mission\",\"StartPeaceMission\"]]]"]
07/29/24 15:13:11: Command Name: chat_bubble
07/29/24 15:13:11: Target Object: Player
07/29/24 15:13:11: Parameters: ["[\"Welcome to the Space Adventure! Choose your path:\",[[\"Explore the universe\",\"StartExploration\"],[\"Engage in battle\",\"StartBattle\"],[\"Embark on a peace mission\",\"StartPeaceMission\"]]]"]
07/29/24 15:13:11: Creating chat bubble: ["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]], Owner: Player, Choices: []
07/29/24 15:13:11: Chat Bubble Created. Following 'yeancat' with text: 'Welcome to the Space Adventure! Choose your path:'. Number of choices: 3
07/29/24 15:13:14: Raw command: execute_action(StartExploration)
07/29/24 15:13:14: Cleaned command: execute_action(StartExploration)
07/29/24 15:13:14: Executing action/group: StartExploration
07/29/24 15:13:14: Decoded Data: {"command":"execute_action","parameters":"SpaceExploration","targetObject":"yeancat"}
07/29/24 15:13:14: Raw command: execute_action("SpaceExploration")
07/29/24 15:13:14: Cleaned command: execute_action("SpaceExploration")
07/29/24 15:13:14: Executing action/group: SpaceExploration
07/29/24 15:13:14: Decoded Data: {"type":"action_group","actions":["GotoUniverseCity","ExplorationChoice"]}
07/29/24 15:13:14: Raw command: execute_action(GotoUniverseCity)
07/29/24 15:13:14: Cleaned command: execute_action(GotoUniverseCity)
07/29/24 15:13:14: Executing action/group: GotoUniverseCity
07/29/24 15:13:14: Decoded Data: {"command":"goto_planet","parameters":"Universe City","targetObject":"yeancat"}
07/29/24 15:13:14: Raw command: goto_planet("Universe City")
07/29/24 15:13:14: Cleaned command: goto_planet("Universe City")
07/29/24 15:13:14: Parsing arguments: "Universe City"
07/29/24 15:13:14: Parsed arguments: ["\"Universe City\""]
07/29/24 15:13:14: Command Name: goto_planet
07/29/24 15:13:14: Target Object: yeancat
07/29/24 15:13:14: Parameters: ["\"Universe City\""]
07/29/24 15:13:14: Teleported to Universe City.
07/29/24 15:13:14: Raw command: execute_action(ExplorationChoice)
07/29/24 15:13:14: Cleaned command: execute_action(ExplorationChoice)
07/29/24 15:13:14: Executing action/group: ExplorationChoice
07/29/24 15:13:14: Decoded Data: {"command":"chat_bubble","parameters":["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]],"targetObject":"Player"}
07/29/24 15:13:14: Raw command: Player.chat_bubble(["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]])
07/29/24 15:13:14: Cleaned command: Player.chat_bubble(["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]])
07/29/24 15:13:14: Parsing arguments: ["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]]
07/29/24 15:13:14: Parsed arguments: ["[\"You've arrived at Universe City. What's your next move?\",[[\"Investigate strange signals\",\"InvestigateSignals\"],[\"Visit the local market\",\"VisitMarket\"],[\"Return to base\",\"ReturnToBase\"]]]"]
07/29/24 15:13:14: Command Name: chat_bubble
07/29/24 15:13:14: Target Object: Player
07/29/24 15:13:14: Parameters: ["[\"You've arrived at Universe City. What's your next move?\",[[\"Investigate strange signals\",\"InvestigateSignals\"],[\"Visit the local market\",\"VisitMarket\"],[\"Return to base\",\"ReturnToBase\"]]]"]
07/29/24 15:13:14: Creating chat bubble: ["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]], Owner: Player, Choices: []
07/29/24 15:13:14: Chat Bubble Created. Following 'yeancat' with text: 'You've arrived at Universe City. What's your next move?'. Number of choices: 3
07/29/24 15:13:16: Raw command: execute_action(VisitMarket)
07/29/24 15:13:16: Cleaned command: execute_action(VisitMarket)
07/29/24 15:13:16: Executing action/group: VisitMarket
07/29/24 15:13:16: Decoded Data: {"command":"chat_bubble","parameters":["You find rare artifacts in the market. What do you do?",[["Purchase artifacts","PurchaseArtifacts"],["Investigate seller","InvestigateSeller"]]],"targetObject":"Player"}
07/29/24 15:13:16: Raw command: Player.chat_bubble(["You find rare artifacts in the market. What do you do?",[["Purchase artifacts","PurchaseArtifacts"],["Investigate seller","InvestigateSeller"]]])
07/29/24 15:13:16: Cleaned command: Player.chat_bubble(["You find rare artifacts in the market. What do you do?",[["Purchase artifacts","PurchaseArtifacts"],["Investigate seller","InvestigateSeller"]]])
07/29/24 15:13:16: Parsing arguments: ["You find rare artifacts in the market. What do you do?",[["Purchase artifacts","PurchaseArtifacts"],["Investigate seller","InvestigateSeller"]]]
07/29/24 15:13:16: Parsed arguments: ["[\"You find rare artifacts in the market. What do you do?\",[[\"Purchase artifacts\",\"PurchaseArtifacts\"],[\"Investigate seller\",\"InvestigateSeller\"]]]"]
07/29/24 15:13:16: Command Name: chat_bubble
07/29/24 15:13:16: Target Object: Player
07/29/24 15:13:16: Parameters: ["[\"You find rare artifacts in the market. What do you do?\",[[\"Purchase artifacts\",\"PurchaseArtifacts\"],[\"Investigate seller\",\"InvestigateSeller\"]]]"]
07/29/24 15:13:16: Creating chat bubble: ["You find rare artifacts in the market. What do you do?",[["Purchase artifacts","PurchaseArtifacts"],["Investigate seller","InvestigateSeller"]]], Owner: Player, Choices: []
07/29/24 15:13:16: Chat Bubble Created. Following 'yeancat' with text: 'You find rare artifacts in the market. What do you do?'. Number of choices: 2
07/29/24 15:13:21: Raw command: execute_action(PurchaseArtifacts)
07/29/24 15:13:21: Cleaned command: execute_action(PurchaseArtifacts)
07/29/24 15:13:21: Executing action/group: PurchaseArtifacts
07/29/24 15:13:21: Decoded Data: {"command":"execute_action","parameters":"ArtifactMystery","targetObject":"yeancat"}
07/29/24 15:13:21: Raw command: execute_action("ArtifactMystery")
07/29/24 15:13:21: Cleaned command: execute_action("ArtifactMystery")
07/29/24 15:13:21: Executing action/group: ArtifactMystery
07/29/24 15:13:21: Decoded Data: {"type":"action_group","actions":["EnableEnemySpawns","GotoGhostTown","ArtifactOutcome"]}
07/29/24 15:13:21: Raw command: execute_action(EnableEnemySpawns)
07/29/24 15:13:21: Cleaned command: execute_action(EnableEnemySpawns)
07/29/24 15:13:21: Executing action/group: EnableEnemySpawns
07/29/24 15:13:21: Decoded Data: {"command":"set_variable","parameters":["SpawnEnemies","true"],"targetObject":"yeancat"}
07/29/24 15:13:21: Raw command: set_variable(["SpawnEnemies","true"])
07/29/24 15:13:21: Cleaned command: set_variable(["SpawnEnemies","true"])
07/29/24 15:13:21: Parsing arguments: ["SpawnEnemies","true"]
07/29/24 15:13:21: Parsed arguments: ["[\"SpawnEnemies\",\"true\"]"]
07/29/24 15:13:21: Command Name: set_variable
07/29/24 15:13:21: Target Object: yeancat
07/29/24 15:13:21: Parameters: ["[\"SpawnEnemies\",\"true\"]"]
07/29/24 15:13:21: SpawnEnemies set to 1
07/29/24 15:13:21: Raw command: execute_action(GotoGhostTown)
07/29/24 15:13:21: Cleaned command: execute_action(GotoGhostTown)
07/29/24 15:13:21: Executing action/group: GotoGhostTown
07/29/24 15:13:21: Decoded Data: {"command":"goto_planet","parameters":"Ghost Town","targetObject":"yeancat"}
07/29/24 15:13:21: Raw command: goto_planet("Ghost Town")
07/29/24 15:13:21: Cleaned command: goto_planet("Ghost Town")
07/29/24 15:13:21: Parsing arguments: "Ghost Town"
07/29/24 15:13:21: Parsed arguments: ["\"Ghost Town\""]
07/29/24 15:13:21: Command Name: goto_planet
07/29/24 15:13:21: Target Object: yeancat
07/29/24 15:13:21: Parameters: ["\"Ghost Town\""]
07/29/24 15:13:21: Teleported to Ghost Town.
07/29/24 15:13:21: Raw command: execute_action(ArtifactOutcome)
07/29/24 15:13:21: Cleaned command: execute_action(ArtifactOutcome)
07/29/24 15:13:21: Executing action/group: ArtifactOutcome
07/29/24 15:13:21: Decoded Data: {"command":"chat_bubble","parameters":["The artifacts have awakened ancient guardians! Your move?",[["Fight the guardians","FightGuardians"],["Try to deactivate artifacts","DeactivateArtifacts"],["Escape with artifacts","EscapeWithArtifacts"]]],"targetObject":"Player"}
07/29/24 15:13:21: Raw command: Player.chat_bubble(["The artifacts have awakened ancient guardians! Your move?",[["Fight the guardians","FightGuardians"],["Try to deactivate artifacts","DeactivateArtifacts"],["Escape with artifacts","EscapeWithArtifacts"]]])
07/29/24 15:13:21: Cleaned command: Player.chat_bubble(["The artifacts have awakened ancient guardians! Your move?",[["Fight the guardians","FightGuardians"],["Try to deactivate artifacts","DeactivateArtifacts"],["Escape with artifacts","EscapeWithArtifacts"]]])
07/29/24 15:13:21: Parsing arguments: ["The artifacts have awakened ancient guardians! Your move?",[["Fight the guardians","FightGuardians"],["Try to deactivate artifacts","DeactivateArtifacts"],["Escape with artifacts","EscapeWithArtifacts"]]]
07/29/24 15:13:21: Parsed arguments: ["[\"The artifacts have awakened ancient guardians! Your move?\",[[\"Fight the guardians\",\"FightGuardians\"],[\"Try to deactivate artifacts\",\"DeactivateArtifacts\"],[\"Escape with artifacts\",\"EscapeWithArtifacts\"]]]"]
07/29/24 15:13:21: Command Name: chat_bubble
07/29/24 15:13:21: Target Object: Player
07/29/24 15:13:21: Parameters: ["[\"The artifacts have awakened ancient guardians! Your move?\",[[\"Fight the guardians\",\"FightGuardians\"],[\"Try to deactivate artifacts\",\"DeactivateArtifacts\"],[\"Escape with artifacts\",\"EscapeWithArtifacts\"]]]"]
07/29/24 15:13:21: Creating chat bubble: ["The artifacts have awakened ancient guardians! Your move?",[["Fight the guardians","FightGuardians"],["Try to deactivate artifacts","DeactivateArtifacts"],["Escape with artifacts","EscapeWithArtifacts"]]], Owner: Player, Choices: []
07/29/24 15:13:21: Chat Bubble Created. Following 'yeancat' with text: 'The artifacts have awakened ancient guardians! Your move?'. Number of choices: 3
07/29/24 15:13:24: Raw command: execute_action(FightGuardians)
07/29/24 15:13:24: Cleaned command: execute_action(FightGuardians)
07/29/24 15:13:24: Action/group 'FightGuardians' not found.
07/29/24 15:13:26: Raw command: execute_action(SpaceAdventureStart)
07/29/24 15:13:26: Cleaned command: execute_action(SpaceAdventureStart)
07/29/24 15:13:26: Executing action/group: SpaceAdventureStart
07/29/24 15:13:26: Decoded Data: {"command":"chat_bubble","parameters":["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]],"targetObject":"Player"}
07/29/24 15:13:26: Raw command: Player.chat_bubble(["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]])
07/29/24 15:13:26: Cleaned command: Player.chat_bubble(["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]])
07/29/24 15:13:26: Parsing arguments: ["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]]
07/29/24 15:13:26: Parsed arguments: ["[\"Welcome to the Space Adventure! Choose your path:\",[[\"Explore the universe\",\"StartExploration\"],[\"Engage in battle\",\"StartBattle\"],[\"Embark on a peace mission\",\"StartPeaceMission\"]]]"]
07/29/24 15:13:26: Command Name: chat_bubble
07/29/24 15:13:26: Target Object: Player
07/29/24 15:13:26: Parameters: ["[\"Welcome to the Space Adventure! Choose your path:\",[[\"Explore the universe\",\"StartExploration\"],[\"Engage in battle\",\"StartBattle\"],[\"Embark on a peace mission\",\"StartPeaceMission\"]]]"]
07/29/24 15:13:26: Creating chat bubble: ["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]], Owner: Player, Choices: []
07/29/24 15:13:26: Chat Bubble Created. Following 'yeancat' with text: 'Welcome to the Space Adventure! Choose your path:'. Number of choices: 3
07/29/24 15:13:28: Raw command: execute_action(StartBattle)
07/29/24 15:13:28: Cleaned command: execute_action(StartBattle)
07/29/24 15:13:28: Executing action/group: StartBattle
07/29/24 15:13:28: Decoded Data: {"command":"execute_action","parameters":"BattleSequence","targetObject":"yeancat"}
07/29/24 15:13:28: Raw command: execute_action("BattleSequence")
07/29/24 15:13:28: Cleaned command: execute_action("BattleSequence")
07/29/24 15:13:28: Executing action/group: BattleSequence
07/29/24 15:13:28: Decoded Data: {"type":"action_group","actions":["EnableEnemySpawns","GotoVulturesValley","BattleChoice"]}
07/29/24 15:13:28: Raw command: execute_action(EnableEnemySpawns)
07/29/24 15:13:28: Cleaned command: execute_action(EnableEnemySpawns)
07/29/24 15:13:28: Executing action/group: EnableEnemySpawns
07/29/24 15:13:28: Decoded Data: {"command":"set_variable","parameters":["SpawnEnemies","true"],"targetObject":"yeancat"}
07/29/24 15:13:28: Raw command: set_variable(["SpawnEnemies","true"])
07/29/24 15:13:28: Cleaned command: set_variable(["SpawnEnemies","true"])
07/29/24 15:13:28: Parsing arguments: ["SpawnEnemies","true"]
07/29/24 15:13:28: Parsed arguments: ["[\"SpawnEnemies\",\"true\"]"]
07/29/24 15:13:28: Command Name: set_variable
07/29/24 15:13:28: Target Object: yeancat
07/29/24 15:13:28: Parameters: ["[\"SpawnEnemies\",\"true\"]"]
07/29/24 15:13:28: SpawnEnemies set to 1
07/29/24 15:13:28: Raw command: execute_action(GotoVulturesValley)
07/29/24 15:13:28: Cleaned command: execute_action(GotoVulturesValley)
07/29/24 15:13:28: Executing action/group: GotoVulturesValley
07/29/24 15:13:28: Decoded Data: {"command":"goto_planet","parameters":"Vultures Valley","targetObject":"yeancat"}
07/29/24 15:13:28: Raw command: goto_planet("Vultures Valley")
07/29/24 15:13:28: Cleaned command: goto_planet("Vultures Valley")
07/29/24 15:13:28: Parsing arguments: "Vultures Valley"
07/29/24 15:13:28: Parsed arguments: ["\"Vultures Valley\""]
07/29/24 15:13:28: Command Name: goto_planet
07/29/24 15:13:28: Target Object: yeancat
07/29/24 15:13:28: Parameters: ["\"Vultures Valley\""]
07/29/24 15:13:28: Teleported to Vultures Valley.
07/29/24 15:13:28: Raw command: execute_action(BattleChoice)
07/29/24 15:13:28: Cleaned command: execute_action(BattleChoice)
07/29/24 15:13:28: Executing action/group: BattleChoice
07/29/24 15:13:28: Decoded Data: {"command":"chat_bubble","parameters":["Enemies approaching! What's your strategy?",[["Engage in combat","EngageCombat"],["Attempt diplomacy","AttemptDiplomacy"],["Retreat","StrategicRetreat"]]],"targetObject":"Player"}
07/29/24 15:13:28: Raw command: Player.chat_bubble(["Enemies approaching! What's your strategy?",[["Engage in combat","EngageCombat"],["Attempt diplomacy","AttemptDiplomacy"],["Retreat","StrategicRetreat"]]])
07/29/24 15:13:28: Cleaned command: Player.chat_bubble(["Enemies approaching! What's your strategy?",[["Engage in combat","EngageCombat"],["Attempt diplomacy","AttemptDiplomacy"],["Retreat","StrategicRetreat"]]])
07/29/24 15:13:29: Parsing arguments: ["Enemies approaching! What's your strategy?",[["Engage in combat","EngageCombat"],["Attempt diplomacy","AttemptDiplomacy"],["Retreat","StrategicRetreat"]]]
07/29/24 15:13:29: Parsed arguments: ["[\"Enemies approaching! What's your strategy?\",[[\"Engage in combat\",\"EngageCombat\"],[\"Attempt diplomacy\",\"AttemptDiplomacy\"],[\"Retreat\",\"StrategicRetreat\"]]]"]
07/29/24 15:13:29: Command Name: chat_bubble
07/29/24 15:13:29: Target Object: Player
07/29/24 15:13:29: Parameters: ["[\"Enemies approaching! What's your strategy?\",[[\"Engage in combat\",\"EngageCombat\"],[\"Attempt diplomacy\",\"AttemptDiplomacy\"],[\"Retreat\",\"StrategicRetreat\"]]]"]
07/29/24 15:13:29: Creating chat bubble: ["Enemies approaching! What's your strategy?",[["Engage in combat","EngageCombat"],["Attempt diplomacy","AttemptDiplomacy"],["Retreat","StrategicRetreat"]]], Owner: Player, Choices: []
07/29/24 15:13:29: Chat Bubble Created. Following 'yeancat' with text: 'Enemies approaching! What's your strategy?'. Number of choices: 3
07/29/24 15:13:31: Raw command: execute_action(StrategicRetreat)
07/29/24 15:13:31: Cleaned command: execute_action(StrategicRetreat)
07/29/24 15:13:31: Action/group 'StrategicRetreat' not found.
07/29/24 15:13:33: Raw command: execute_action(SpaceAdventureStart)
07/29/24 15:13:33: Cleaned command: execute_action(SpaceAdventureStart)
07/29/24 15:13:33: Executing action/group: SpaceAdventureStart
07/29/24 15:13:33: Decoded Data: {"command":"chat_bubble","parameters":["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]],"targetObject":"Player"}
07/29/24 15:13:33: Raw command: Player.chat_bubble(["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]])
07/29/24 15:13:33: Cleaned command: Player.chat_bubble(["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]])
07/29/24 15:13:33: Parsing arguments: ["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]]
07/29/24 15:13:33: Parsed arguments: ["[\"Welcome to the Space Adventure! Choose your path:\",[[\"Explore the universe\",\"StartExploration\"],[\"Engage in battle\",\"StartBattle\"],[\"Embark on a peace mission\",\"StartPeaceMission\"]]]"]
07/29/24 15:13:33: Command Name: chat_bubble
07/29/24 15:13:33: Target Object: Player
07/29/24 15:13:33: Parameters: ["[\"Welcome to the Space Adventure! Choose your path:\",[[\"Explore the universe\",\"StartExploration\"],[\"Engage in battle\",\"StartBattle\"],[\"Embark on a peace mission\",\"StartPeaceMission\"]]]"]
07/29/24 15:13:33: Creating chat bubble: ["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]], Owner: Player, Choices: []
07/29/24 15:13:33: Chat Bubble Created. Following 'yeancat' with text: 'Welcome to the Space Adventure! Choose your path:'. Number of choices: 3
07/29/24 15:13:36: Raw command: execute_action(StartPeaceMission)
07/29/24 15:13:36: Cleaned command: execute_action(StartPeaceMission)
07/29/24 15:13:36: Executing action/group: StartPeaceMission
07/29/24 15:13:36: Decoded Data: {"command":"execute_action","parameters":"PeacefulMission","targetObject":"yeancat"}
07/29/24 15:13:36: Raw command: execute_action("PeacefulMission")
07/29/24 15:13:36: Cleaned command: execute_action("PeacefulMission")
07/29/24 15:13:36: Executing action/group: PeacefulMission
07/29/24 15:13:36: Decoded Data: {"type":"action_group","actions":["GotoDivineDomain","DiplomaticChoice"]}
07/29/24 15:13:36: Raw command: execute_action(GotoDivineDomain)
07/29/24 15:13:36: Cleaned command: execute_action(GotoDivineDomain)
07/29/24 15:13:36: Executing action/group: GotoDivineDomain
07/29/24 15:13:36: Decoded Data: {"command":"goto_planet","parameters":"Divine Domain","targetObject":"yeancat"}
07/29/24 15:13:36: Raw command: goto_planet("Divine Domain")
07/29/24 15:13:36: Cleaned command: goto_planet("Divine Domain")
07/29/24 15:13:36: Parsing arguments: "Divine Domain"
07/29/24 15:13:36: Parsed arguments: ["\"Divine Domain\""]
07/29/24 15:13:36: Command Name: goto_planet
07/29/24 15:13:36: Target Object: yeancat
07/29/24 15:13:36: Parameters: ["\"Divine Domain\""]
07/29/24 15:13:36: Teleported to Divine Domain.
07/29/24 15:13:36: Raw command: execute_action(DiplomaticChoice)
07/29/24 15:13:36: Cleaned command: execute_action(DiplomaticChoice)
07/29/24 15:13:36: Executing action/group: DiplomaticChoice
07/29/24 15:13:36: Decoded Data: {"command":"chat_bubble","parameters":["You're in Divine Domain for a peace mission. How do you proceed?",[["Offer trade deal","OfferTrade"],["Share technology","ShareTechnology"],["Request alliance","RequestAlliance"]]],"targetObject":"Player"}
07/29/24 15:13:36: Raw command: Player.chat_bubble(["You're in Divine Domain for a peace mission. How do you proceed?",[["Offer trade deal","OfferTrade"],["Share technology","ShareTechnology"],["Request alliance","RequestAlliance"]]])
07/29/24 15:13:36: Cleaned command: Player.chat_bubble(["You're in Divine Domain for a peace mission. How do you proceed?",[["Offer trade deal","OfferTrade"],["Share technology","ShareTechnology"],["Request alliance","RequestAlliance"]]])
07/29/24 15:13:36: Parsing arguments: ["You're in Divine Domain for a peace mission. How do you proceed?",[["Offer trade deal","OfferTrade"],["Share technology","ShareTechnology"],["Request alliance","RequestAlliance"]]]
07/29/24 15:13:36: Parsed arguments: ["[\"You're in Divine Domain for a peace mission. How do you proceed?\",[[\"Offer trade deal\",\"OfferTrade\"],[\"Share technology\",\"ShareTechnology\"],[\"Request alliance\",\"RequestAlliance\"]]]"]
07/29/24 15:13:36: Command Name: chat_bubble
07/29/24 15:13:36: Target Object: Player
07/29/24 15:13:36: Parameters: ["[\"You're in Divine Domain for a peace mission. How do you proceed?\",[[\"Offer trade deal\",\"OfferTrade\"],[\"Share technology\",\"ShareTechnology\"],[\"Request alliance\",\"RequestAlliance\"]]]"]
07/29/24 15:13:36: Creating chat bubble: ["You're in Divine Domain for a peace mission. How do you proceed?",[["Offer trade deal","OfferTrade"],["Share technology","ShareTechnology"],["Request alliance","RequestAlliance"]]], Owner: Player, Choices: []
07/29/24 15:13:36: Chat Bubble Created. Following 'yeancat' with text: 'You're in Divine Domain for a peace mission. How do you proceed?'. Number of choices: 3
07/29/24 15:14:40: Raw command: execute_action(SpaceAdventureStart)
07/29/24 15:14:40: Cleaned command: execute_action(SpaceAdventureStart)
07/29/24 15:14:40: Executing action/group: SpaceAdventureStart
07/29/24 15:14:40: Decoded Data: {"command":"chat_bubble","parameters":["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]],"targetObject":"Player"}
07/29/24 15:14:40: Raw command: Player.chat_bubble(["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]])
07/29/24 15:14:40: Cleaned command: Player.chat_bubble(["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]])
07/29/24 15:14:40: Parsing arguments: ["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]]
07/29/24 15:14:40: Parsed arguments: ["[\"Welcome to the Space Adventure! Choose your path:\",[[\"Explore the universe\",\"StartExploration\"],[\"Engage in battle\",\"StartBattle\"],[\"Embark on a peace mission\",\"StartPeaceMission\"]]]"]
07/29/24 15:14:40: Command Name: chat_bubble
07/29/24 15:14:40: Target Object: Player
07/29/24 15:14:40: Parameters: ["[\"Welcome to the Space Adventure! Choose your path:\",[[\"Explore the universe\",\"StartExploration\"],[\"Engage in battle\",\"StartBattle\"],[\"Embark on a peace mission\",\"StartPeaceMission\"]]]"]
07/29/24 15:14:40: Creating chat bubble: ["Welcome to the Space Adventure! Choose your path:",[["Explore the universe","StartExploration"],["Engage in battle","StartBattle"],["Embark on a peace mission","StartPeaceMission"]]], Owner: Player, Choices: []
07/29/24 15:14:40: Chat Bubble Created. Following 'yeancat' with text: 'Welcome to the Space Adventure! Choose your path:'. Number of choices: 3
07/29/24 15:14:41: Raw command: execute_action(StartExploration)
07/29/24 15:14:41: Cleaned command: execute_action(StartExploration)
07/29/24 15:14:41: Executing action/group: StartExploration
07/29/24 15:14:41: Decoded Data: {"command":"execute_action","parameters":"SpaceExploration","targetObject":"yeancat"}
07/29/24 15:14:41: Raw command: execute_action("SpaceExploration")
07/29/24 15:14:41: Cleaned command: execute_action("SpaceExploration")
07/29/24 15:14:41: Executing action/group: SpaceExploration
07/29/24 15:14:41: Decoded Data: {"type":"action_group","actions":["GotoUniverseCity","ExplorationChoice"]}
07/29/24 15:14:41: Raw command: execute_action(GotoUniverseCity)
07/29/24 15:14:41: Cleaned command: execute_action(GotoUniverseCity)
07/29/24 15:14:41: Executing action/group: GotoUniverseCity
07/29/24 15:14:41: Decoded Data: {"command":"goto_planet","parameters":"Universe City","targetObject":"yeancat"}
07/29/24 15:14:41: Raw command: goto_planet("Universe City")
07/29/24 15:14:41: Cleaned command: goto_planet("Universe City")
07/29/24 15:14:41: Parsing arguments: "Universe City"
07/29/24 15:14:41: Parsed arguments: ["\"Universe City\""]
07/29/24 15:14:41: Command Name: goto_planet
07/29/24 15:14:41: Target Object: yeancat
07/29/24 15:14:41: Parameters: ["\"Universe City\""]
07/29/24 15:14:41: Teleported to Universe City.
07/29/24 15:14:41: Raw command: execute_action(ExplorationChoice)
07/29/24 15:14:41: Cleaned command: execute_action(ExplorationChoice)
07/29/24 15:14:41: Executing action/group: ExplorationChoice
07/29/24 15:14:41: Decoded Data: {"command":"chat_bubble","parameters":["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]],"targetObject":"Player"}
07/29/24 15:14:41: Raw command: Player.chat_bubble(["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]])
07/29/24 15:14:41: Cleaned command: Player.chat_bubble(["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]])
07/29/24 15:14:41: Parsing arguments: ["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]]
07/29/24 15:14:41: Parsed arguments: ["[\"You've arrived at Universe City. What's your next move?\",[[\"Investigate strange signals\",\"InvestigateSignals\"],[\"Visit the local market\",\"VisitMarket\"],[\"Return to base\",\"ReturnToBase\"]]]"]
07/29/24 15:14:41: Command Name: chat_bubble
07/29/24 15:14:41: Target Object: Player
07/29/24 15:14:41: Parameters: ["[\"You've arrived at Universe City. What's your next move?\",[[\"Investigate strange signals\",\"InvestigateSignals\"],[\"Visit the local market\",\"VisitMarket\"],[\"Return to base\",\"ReturnToBase\"]]]"]
07/29/24 15:14:41: Creating chat bubble: ["You've arrived at Universe City. What's your next move?",[["Investigate strange signals","InvestigateSignals"],["Visit the local market","VisitMarket"],["Return to base","ReturnToBase"]]], Owner: Player, Choices: []
07/29/24 15:14:41: Chat Bubble Created. Following 'yeancat' with text: 'You've arrived at Universe City. What's your next move?'. Number of choices: 3
07/29/24 15:14:43: Raw command: execute_action(ReturnToBase)
07/29/24 15:14:43: Cleaned command: execute_action(ReturnToBase)
07/29/24 15:14:43: Action/group 'ReturnToBase' not found.
07/29/24 15:16:29: [Jay Arnold] this works perfectly! the next feature to add is a "Target" object reference in get_object_reference|this Target object will be able to be set to various objects that we have created, including |"Player" (or yeancat)
07/29/24 15:16:29: Creating chat bubble: " this works perfectly! the next feature to add is a \"Target\" object reference in get_object_reference|this Target object will be able to be set to various objects that we have created, including |\"Player\" (or yeancat)", Owner: yeancat, Choices: []
07/29/24 15:16:29: Chat Bubble Created. Following 'yeancat' with text: ' this works perfectly! the next feature to add is a "Target" object reference in get_object_reference|this Target object will be able to be set to various objects that we have created, including |"Player" (or yeancat)'. Number of choices: 0
07/29/24 15:18:16: [Jay Arnold] In doing this we will be able to create actions with /Target.chat_bubble(|if we are able to set Target to be any of our npcs, bosses, enemies, the player, random objects,|etc... then we will be able to reuse our actions for various objects without having to create new|actions for them! this is important because we dont want a massive list that is constantly |searched every time an action is executed.
07/29/24 15:18:16: Creating chat bubble: " In doing this we will be able to create actions with \/Target.chat_bubble(|if we are able to set Target to be any of our npcs, bosses, enemies, the player, random objects,|etc... then we will be able to reuse our actions for various objects without having to create new|actions for them! this is important because we dont want a massive list that is constantly |searched every time an action is executed.", Owner: yeancat, Choices: []
07/29/24 15:18:16: Chat Bubble Created. Following 'yeancat' with text: ' In doing this we will be able to create actions with /Target.chat_bubble(|if we are able to set Target to be any of our npcs, bosses, enemies, the player, random objects,|etc... then we will be able to reuse our actions for various objects without having to create new|actions for them! this is important because we dont want a massive list that is constantly |searched every time an action is executed.'. Number of choices: 0

