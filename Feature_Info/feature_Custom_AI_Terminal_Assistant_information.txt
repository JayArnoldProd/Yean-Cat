Feature Name: Custom_AI_Terminal_Assistant
Description: Train a GPT or Claude bot to assist populating the bug and feature list.

== Related Objects ==

Object: master

File: Step_0.gml
Code:
///STEP OF master

//pausing
if input_check_pressed("pause") {
	
if !instance_exists(restar) {
if mainmenu=0 {
	if !instance_exists(obj_levelup) and !instance_exists(obj_pickupq) {
if global.pause=0 {
	if !instance_exists(obj_pausemenu) {
		global.pause=1
		audio_pause_all();
		audio_play_sound(pausesound1,0,0,.75*master.uivol*master.mastervol,0,.995+random(10)/1000)
	instance_create_layer(room_width/2,0,"uii",obj_pausemenu)
	
	}
	
} else {
	audio_play_sound(menuexitsound1,0,0,.75*master.uivol*master.mastervol,0,.995+random(10)/1000)
	global.pause=0
}

    if global.pause {
       if audio_sync_group_is_playing(sg) {
	   audio_pause_sync_group(sg);
	   }
		
    } else {
        if !audio_sync_group_is_playing(sg) {
		audio_resume_sync_group(sg);
		}
		audio_resume_all();
    }
}
} else {
}
}

}


if keyboard_check(ord("D")) and keyboard_check(ord("E")) and keyboard_check_pressed(ord("V")) {
	if devmode=0 {
		devmode=1
	} else {
		devmode=0
	}
}

if !instance_exists(obj_jayarnoldlogo) and !instance_exists(alphamessage) {
	if playername = "" {
		if !instance_exists(obj_nameplate) {
		os_is_network_connected() {
		instance_create_layer(room_width/2,0,"uiitop",obj_nameplate)
		}
		}
	}
}

var currentControllerState = gamepad_is_connected(0);
if (global.control_type == 0 || currentControllerState != global.lastControllerState) {
    check_control_type();  // This function would set global.control_type appropriately
    global.lastControllerState = currentControllerState;  // Update the last known state
}

//when no boss
if bboo>=0 {
if focustime >= 0 {
if instance_exists(obj_boss) {
	if focustime<1 {
if focusonboss<1 {
	focusonboss+=.01
	focustime+=.01
	
} else {
	focusonboss=1
	focustime+=.005
}
	} else {
		focustime=-1
		bboo=-1
	}

camovx=(obj_boss.x-room_width/(4*camscale))
camovx=(obj_boss.y-room_height/(4*camscale))
bboo=1
}	else {
	if focusonboss>0 {
	focusonboss-=.01
} else {
	focusonboss=0
	camovx=0
camovy=0
}


}
} else {
	if !instance_exists(obj_boss) {
			if focusonboss>0 {
	focusonboss-=.01
} else {

		if focusonboss>0 {
	focusonboss-=.01
} else {

	focusonboss=0
	focustime=0
}
}
//bboo=0
		
	} else {
camovx=(obj_boss.x-room_width/(4*camscale))/2
camovx=(obj_boss.y-room_height/(4*camscale))/2
		if focustime<0 {
			focustime+=.01
		} else {
			focustime=0
			
				if focusonboss>0 {
	focusonboss-=.01
} else {
camovx=0
camovy=0
	focusonboss=0
	focustime=0
}
		}
	}
}
if instance_exists(obj_levelup) or instance_exists(obj_pickupq) or global.pause=1 {
	focusonboss=0
}
} else {
	if instance_exists(obj_boss) {
		bboo=0
	} else {
	if focusonboss>0 {
		focusonboss-=.01
	} else {

	focusonboss=0
	focustime=0
}
	}
}
if camovxx != camovx {
	camovxx= (camovxx*200+camovx)/201
}
if camovyy != camovy {
	camovyy= (camovyy*200+camovy)/201
}
if focusonbosss != focusonboss {
	focusonbosss = (focusonbosss*200+focusonboss)/201
}
camera_set_view_pos(cam,960-960*(camscale-1)+camovxx*focusonbosss/2, 540-540*(camscale-1)+camovyy*focusonbosss/2)
camera_set_view_size(cam,1920*camscale*(1-focusonbosss/4),1080*camscale*(1-focusonbosss/4))

// First of all we need to set the Consent Mode, which can be used for
// debugging purposes to run tests as a  user in a different geographic area;
// more info: Consent Mode. This function will generate an ASYNC SOCIAL EVENT.

if init=1 {
version="0.6.0"
if legacyversion="0.5.0" {
	//for (var gg=0; gg<array_length(splash);gg++) {
	splash[0]="Playing since Alpha 0.5.0"
	//}
}
if infouppdate=0 {

AdMob_Consent_RequestInfoUpdate(AdMob_Consent_Mode_PRODUCTION);

}
if infouppdate=1 {
var rewarded_id = "ca-app-pub-3940256099942544/1033173712"
if os_type=os_ios {
	rewarded_id = "ca-app-pub-1730979025956248/3384722951"
}
if os_type=os_android {
	rewarded_id = "ca-app-pub-1730979025956248/7811053129"
}
AdMob_RewardedVideo_Init(rewarded_id);
	//if !instance_exists(ad_manager) {
	//instance_create_layer(0,0,"uiitop",ad_manager)
	//}
}

if showad=1 {
	if noad=0 {
	AdMob_RewardedVideo_Show()
	global.pause=1
	showad=2
	}
}
}



if instance_exists(yeancat) {
	if master.mainmenu=0 {
	audio_listener_position((room_width/2+yeancat.x)/2,(room_height/2+yeancat.y)/2,600);
	} else {
		audio_listener_position(room_width/2,room_height/2,0);
	}
} else {
audio_listener_position(room_width/2,room_height/2,0);
}
/// @description Insert description here
// You can write your code in this editor
if instance_exists(obj_logo) {
	splashtime+=.05
	if obj_logo.onscreen!=0 {
if loading<=0 {
	if splashalpha<string_length(chosensplash) {
	splashalpha+=.1*(global.room_speed_set/1000000*delta_time)
	}
}
	} else {
		splashalpha= splashalpha*30/31
	}
splashangle=13+10 * sin((2 * pi / (string_length(chosensplash))) * (splashtime))
if splashtime>string_length(chosensplash) {
	splashtime=0
}
} else {
	splashtime=0
}
//if keyboard_check(vk_left) {
//if scaleg>.5 {
//	scaleg-=.01
//} else {
//	scaleg=.5
//}
//}
//if keyboard_check(vk_right) {
//if scaleg<1 {
//	scaleg+=.01
//} else {
//	scaleg=1
//}
//}
//if keyboard_check(vk_up) {
//	if keyboard_check(vk_shift) {
//		debugvar2+=.1
//	} else {
//	debugvar+=.01
//	}
//	//love+=
//	//if instance_exists(yeancat) {
//	//	yeancat.maxhealth=10+love
//	//} 
//}
//if keyboard_check(vk_down) {
//		if keyboard_check(vk_shift) {
//		debugvar2-=.1
//	} else {
//debugvar-=.01
//	}
	//love-=1
	//if instance_exists(yeancat) {
	//	yeancat.maxhealth=10+love
	//} 

//}
if mainmenu=0 {
if os_type= os_ios or os_type=os_android {
if os_is_paused() {
if !instance_exists(restar) {

	if !instance_exists(obj_levelup) and !instance_exists(obj_pickupq)  and !instance_exists(obj_reviveq) {
if global.pause=0 {
	if !instance_exists(obj_pausemenu) {
		global.pause=1
	instance_create_layer(room_width/2,0,"uii",obj_pausemenu)
	
	}
	}
}
}
}
}


    if global.pause {
	//	if start=1 {
	//	if audio_sync_group_is_playing(sg) {
	//   audio_pause_sync_group(sg);
	//   }
	 //  audio_pause_all();
	//}
 
    } else {
		//if !audio_sync_group_is_playing(sg) {
	   audio_resume_sync_group(sg);
	   //}
	  //audio_resume_all();
	   
	}
	} else {
		if splashreset>0 {
	splashreset-=1
} else {
	splashchoice=irandom(array_length(splash)-1);
chosensplash=splash[splashchoice]
splashreset=splashresetset
}

		if instance_exists(obj_statmenu) or instance_exists(obj_achievments) or instance_exists(obj_options) {
		if dollarhide<180 {
			dollarhide+=1
		} else {
			dollarhide=180
		}
		} else {
			if dollarhide>0 {
			dollarhide-=1
		} else {
			dollarhide=0
		}
		}
	}



if muteall=1 {
	mastervol=0
} else {
	mastervol=mastervolset
}

if mainmenu=0 {
	if global.pause=0 {
		if countdi=1{
			for (i=0; i<array_length(soundmanager); i++) {
			soundmanager[i,0]=clamp(soundmanager[i,0]-1,0,9999)
			soundmanager[i,1]=clamp(soundmanager[i,1]-1,0,9999)
			soundmanager[i,2]=clamp(soundmanager[i,2]-1,0,9999)
			soundmanager[i,3]=clamp(soundmanager[i,3]-1,0,9999)
			soundmanager[i,4]=clamp(soundmanager[i,4]-1,0,9999)
			soundmanager[i,5]=clamp(soundmanager[i,5]-1,0,9999)
			}
for (i=0; i<array_length(responsecount); i++) {
			responsecount[i,0]=clamp(responsecount[i,0]-1,0,9999)
			responsecount[i,1]=clamp(responsecount[i,1]-1,0,9999)
			responsecount[i,2]=clamp(responsecount[i,2]-1,0,9999)
			responsecount[i,3]=clamp(responsecount[i,3]-1,0,9999)
			responsecount[i,4]=clamp(responsecount[i,4]-1,0,9999)
			responsecount[i,5]=clamp(responsecount[i,5]-1,0,9999)
			}
countdi=0
	}
		if instance_exists(yeancat) {
			grav=obj_terrain.planets[obj_terrain.planet,2]/15
			if fadedam>0 {
					fadedam-=.0001
					} else {
						fadedam=0
					}
			damef=(damef*20+clamp((1-yeancat.healthh/yeancat.maxhealth)*2-1,0,1))/21
			if damef>0 {
				damgro+=.001*(1.1-damef)
				
				if damgro>1.25{
					damgro=1.25
					
				}
			} else {
				damef=0
			}
		} else {
			damef=(damef*20)/21
		if damef<.01 {
			damgro=1
		}
		}
		killcount=0
		for (i=0; i<array_length(master.runkills); i++) {
	killcount+=master.runkills[i]
}
	} else {
		if damef>0 {
			damef-=.05
			if damgro>1 {
			damgro-=.05
			}
		} else {
			damef=0
			damgro=1
		}
	}

	if instance_exists(yeancat) {
		if global.pause = 0 {
rspeed=60-15*(yeancat.oxy/5)
		}
} else {
	if global.pause = 0 {
	rspeed=60
	}
}

if global.pause=1 {
	rspeed=60
}

if round(global.room_speed_set*1000) != round(rspeed*1000) {
	global.room_speed_set-=(global.room_speed_set-rspeed)/60
} else {
	global.room_speed_set=rspeed
}
game_set_speed(global.room_speed_set, gamespeed_fps)
		if !instance_exists(obj_levelup) and !instance_exists(obj_pickupq) and !instance_exists(obj_upgrademenu) and !instance_exists(obj_pausemenu)  and !instance_exists(obj_reviveq) {
	if dollarslide<1 {
		dollarslide+=.01
	} else {
		dollarslide=1
	}
		} else {
			if instance_exists(restar) {
				if restar.xptime>restar.xplength or restar.movelev=1 {
						if dollarslide>0 {
		dollarslide-=.02
	} else {
		dollarslide=0
	}
				}
		} else {
				if dollarslide>0 {
		dollarslide-=.02
	} else {
		dollarslide=0
	}
		}
		
			
		}
		
} else {
rhythm=((1+.91*2*(1-(1-((master.characters[master.charselect,6]-1)/clamp(9+(master.characters[master.charselect,6]-(10*((clamp(master.characters[master.charselect,6],0,99999))/sqr(master.characters[master.charselect,6])))),1,99999))))+.01*(master.characters[master.charselect,6]-1)))
flow=((1+.91*2*(1-(1-((master.characters[master.charselect,7]-1)/clamp(9+(master.characters[master.charselect,7]-(10*((clamp(master.characters[master.charselect,7],0,99999))/sqr(master.characters[master.charselect,7])))),1,99999))))+.01*(master.characters[master.charselect,7]-1)))
lyricism=((1+.91*2*(1-(1-((master.characters[master.charselect,5]-1)/clamp(9+(master.characters[master.charselect,5]-(10*((clamp(master.characters[master.charselect,5],0,99999))/sqr(master.characters[master.charselect,5])))),1,99999))))+.01*(master.characters[master.charselect,5]-1)))
swag=((1+.91*2*(1-(1-((master.characters[master.charselect,8]-1)/clamp(9+(master.characters[master.charselect,8]-(10*((clamp(master.characters[master.charselect,8],0,99999))/sqr(master.characters[master.charselect,8])))),1,99999))))+.01*(master.characters[master.charselect,8]-1)))


	if dollarslide>0 {
		dollarslide-=.01
	} else {
		dollarslide=0
	}
}
if instance_exists(obj_upgrademenu) {
	for (i=0; i<array_length(obj_upgrademenu.upgrades); i ++) {
			if obj_upgrademenu.upgrades[i,2]=-1 {
				notice[i,3]=-1
			}
		}
}

if mainmenu=1 {
	for (i=0; i<array_length(characters);i++) {
		if master.characters[master.charselect,3]>=master.characters[master.charselect,4] {
			master.characters[master.charselect,2]+=1
			master.characters[master.charselect,3]=0
			master.characters[master.charselect,4]+=5
		}
	}
	if instance_exists(obj_jayarnoldlogo) {
	if loading>0 {
	loading-=.005
}
	} else {
		if loading>0 {
	loading-=.01
}
	}
for (i=0 ; i< array_length(passives) ;i++) {
		if passives[i,2] = 1 {
			if notice[i,0] = 0 {
				if notice[i,3] != -1 {
				notice[i,0] = 1
				} else {
				notice[i,0] = 2
				}
			}
		}
	}
	}
	if instance_exists(yeancat) {
		if aspeedshow!= aspeed {
			aspeedshow= (aspeedshow*10+aspeed)/11
		}
		var fme=sqr(abs(yeancat._hspeed))+sqr(abs(yeancat._vspeed))
		if !is_nan(fme) {
		aspeed=(sqrt(fme))
		} else {
			aspeed=0
		}
	} else {
		aspeed=0
	}
speedheat=clamp(speedheat+(aspeed*1000000)/(heatseconds*10),0,aspeed*1000000)
if revani>0 {
	revani-=.01
}
if speedheat>0 {
	speedscale=.5+clamp(sqrt(aspeed)/100,0,2)/4
	speedscal=(speedscal*60+speedscale)/61
	sc1=make_color_hsv((191*(speedheat/1000000)/10)% 256,255*clamp(speedheat/2000000,0,1),255*clamp((speedheat/1000000)/30,0,1))
	sc2=make_color_hsv((255*(speedheat/1000000)/10)% 256,255*clamp(speedheat/2000000,0,1),255*clamp((speedheat/1000000)/30,0,1))
	sc3=make_color_hsv((255*(speedheat/1000000)/9)% 256,255*clamp(speedheat/2000000,0,1),255*clamp((speedheat/1000000)/30,0,1))
	sc4=make_color_hsv((191*(speedheat/1000000)/8)% 256,255*clamp(speedheat/2000000,0,1),255*clamp((speedheat/1000000)/30,0,1))
	sca=.5*power((speedscale/speedscal),10) +.5*clamp(speedheat/30000000,0,1)
	//.5+.5*clamp((levelheat/1000000)/10,0,1)
} else {
	speedheat=0
	speedscale=1
	sc1=c_black
	sc2=c_black
	sc3=c_black
	sc4=c_black
	sca=1
}
if levelheat>0 {
	lvlscale=1+clamp(sqrt(levelheat/1000000)/10,0,1)/2
	lvlscal=(lvlscal*60+lvlscale)/61
	lc1=make_color_hsv((191*(levelheat/1000000)/10)% 256,255*clamp(levelheat/2000000,0,1),255*clamp((levelheat/1000000)/30,0,1))
	lc2=make_color_hsv((255*(levelheat/1000000)/10)% 256,255*clamp(levelheat/2000000,0,1),255*clamp((levelheat/1000000)/30,0,1))
	lc3=make_color_hsv((255*(levelheat/1000000)/9)% 256,255*clamp(levelheat/2000000,0,1),255*clamp((levelheat/1000000)/30,0,1))
	lc4=make_color_hsv((191*(levelheat/1000000)/8)% 256,255*clamp(levelheat/2000000,0,1),255*clamp((levelheat/1000000)/30,0,1))
	lca=.5*power((lvlscale/lvlscal),10) +.5*clamp(levelheat/30000000,0,1)
	//.5+.5*clamp((levelheat/1000000)/10,0,1)
} else {
	levelheat=0
	lvlscale=1
	lc1=c_black
	lc2=c_black
	lc3=c_black
	lc4=c_black
	lca=1
}

mobfreqset=(100*(1/(curse+1))*(1/((level-1)/200+1))*sqr(1+(1-abs(obj_terrain.systemposition-180)/180))/(lookingfortrouble+1))/(1+master.ti/2014)
if spawnthings=1 {
for (i=0; i<array_length(spaceboss); i ++) {
if round(obj_terrain.systemposition*10)=spaceboss[i,0]*10 {
if spaceboss[i,10]=0 {
	if spaceboss[i,8]=1 {
	var bosss = instance_create_layer(room_width*3/4,room_height/2,"player",obj_boss)
	//position //1name //2health //3resistance0-1invincible /4/rate //5attacktype //6damage //7movetype //8image
	bosss.bossid=spaceboss[i,12]
	bosss.position= spaceboss[i,0]
	bosss.namee = spaceboss[i,1]
	bosss.healthh = spaceboss[i,2]
	bosss.maxhealth = spaceboss[i,2]
	bosss.resistance = spaceboss[i,3]
	bosss.damage = spaceboss[i,6]
	bosss.attackspeed =spaceboss[i,4]
	bosss.attacktype =spaceboss[i,5]
	bosss.movetype =spaceboss[i,7]
	bosss.sprite_index =spaceboss[i,9]
	bosss.bosstype=spaceboss[i,11]
	bosss.lookid=spaceboss[i,12]
	bosss.flying=1
	bosss.bossaltitude=40000
	spaceboss[i,10]=1
	}
}
}
}
}

if selectedstage=0 {
	//nyan cat
	donda3=0
} else {
if selectedstage=1 {
//donda3
donda3=1
}
}
var vpp=0
if instance_exists(yeancat) {
	if yeancat.positionplace=0 {
		vpp=1
	}
}
if mainmenu=0 and !instance_exists(restar) and !instance_exists(obj_notification) and vpp=1 {

		if slidegui>.005 {
			scaleg=(scaleg*30+scalegg)/31
		slidegui=slidegui*30/31
	} else {
		scaleg=scalegg
		slidegui=0
	}
	if dropgui<1 {
		dropgui+=(.05-.0498*dropgui)*(global.room_speed_set/1000000*delta_time)*speedgui
	} else {
		dropgui=1
		speedgui=1
	}
} else {
	if instance_exists(obj_notification) {
		if obj_notification.falling=-1 {
				if slidegui>.005 {
			scaleg=(scaleg*30+scalegg)/31
		slidegui=slidegui*30/31
	} else {
		scaleg=scalegg
		slidegui=0
	}
		}
	//if dropgui>0 {
	//	dropgui*=.98
	//} 
	if slidegui=0 {
	scalegg=scaleg
	}
	scaleg=(scaleg*30+.5)/31
	if slidegui<.995 {
		slidegui=(slidegui*30+1)/31
	} else {
		scaleg=.5
		slidegui=1
	}
	}
}


if stems_loaded=false {
	exit
}


if global.pause=0 or instance_exists(restar) {
starfreq-=1*(global.room_speed_set/1000000*delta_time)
if starfreq<0 {
	instance_create_layer(room_width/2+1920*master.camscale/2+300,room_height/2+(random(1080*master.camscale)-1080*master.camscale/2),"stars",star)
	starfreq=round((starfreqset+random(starfreqset/4))/(sqr((speedd+40)/50)))
}
}

if master.mainmenu=0 {
	if !instance_exists(obj_pausemenu) and !instance_exists(restar) {
	} else {
			if dolcen<50 {
		dolcen=(dolcen*30+50)/31
		} else {
			dolcen=50
		}
			if dollarfade<1{
		dollarfade+=.005*global.room_speed_set/60
		} else {
			dollarfade=1
		}
		}
	if global.pause !=1 {
		if levelheat>0 {
		levelheat-=delta_time/heatseconds*(clamp(power(levelheat/1000000,1.5),1,99999))
		if levelheat<0 {
			levelheat=0;
		}
		}
		if speedheat>0 {
		speedheat-=delta_time/heatseconds*(clamp(power(speedheat/1000000,1.5),1,99999))
		if speedheat<0 {
			speedheat=0;
		}
		}
	}
	if !instance_exists(obj_pickupq) and !instance_exists(obj_pausemenu)  and !instance_exists(obj_reviveq) {
		lvlscal=(lvlscal*60+lvlscale)/61
		speedscal=(speedscal*60+speedscale)/61
	}
if !instance_exists(restar) and !instance_exists(obj_pausemenu) and  !instance_exists(obj_levelup) and !instance_exists(obj_pickupq) and !instance_exists(obj_reviveq) and lower=0 {
if camscale<2 {
	var lambda = -log10(-0.1 / (0 - 1)) / 1913;
    
    // Calculate x(t)
    var scaleup = 1 + (0 - 1) * exp(-lambda * (1000 * ((master.speedd / 10) - 1))*(1-(1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/20000))));
	
	camscale=(camscale*50+1+scaleup)/51
}
} else {
	var scaa=0
	if instance_exists(restar) {
		if restar.falling=-1 {
			scaa=1
		}
	}
	if instance_exists(obj_pausemenu) {
		if obj_pausemenu.falling=-1 {
			scaa=1
		}
	}
	if instance_exists(obj_reviveq) {
		if obj_reviveq.falling=-1 {
			scaa=1
		}
	}
	if instance_exists(obj_levelup) {
		if obj_levelup.falling=-1 {
			scaa=1
		}
	}
	if instance_exists(obj_levelup) {
		if obj_levelup.falling=-1 {
			scaa=1
		}
	}
	if scaa=1 {
		if camscale<2 {
	var lambda = -log10(-0.1 / (0 - 1)) / 1913;
    
    // Calculate x(t)
    var scaleup = 1 + (0 - 1) * exp(-lambda * (1000 * ((master.speedd / 10) - 1))*(1-(1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/20000))));
	
	camscale=(camscale*50+1+scaleup)/51
}
	}
}

sss=camscale*1.405



//mixaudio
if stemtime>0 and lower = 0 {
if bassvol=1 {
	audio_sound_gain(sound1, .5*mastervol*musicvol, 0);
	audio_group_set_gain(agBass,.7*mastervol*musicvol,0);
} else {
	audio_sound_gain(sound1, 0, 0);
	audio_group_set_gain(agBass,0,0);
}
if drumvol=1 {
	audio_sound_gain(sound2, .5*mastervol*musicvol, 0);
	audio_group_set_gain(agDrums,.7*mastervol*musicvol,0);
} else {
	audio_sound_gain(sound2, 0, 0);
	audio_group_set_gain(agDrums,0,0);
}
if melodyvol=1 {
	audio_sound_gain(sound3, .5*mastervol*musicvol, 0);
	audio_group_set_gain(agMelodies,.7*mastervol*musicvol,0);
} else {
	audio_sound_gain(sound3, 0, 0);
	audio_group_set_gain(agMelodies,0,0);
}
if vocalvol=1 {
	audio_sound_gain(sound4, .5*mastervol*musicvol, 0);
	audio_group_set_gain(agVocals,.7*mastervol*musicvol,0);
} else {
	audio_sound_gain(sound4, 0, 0);
	audio_group_set_gain(agVocals,0,0);
}

audio_sound_gain(music, 0, 0);
audio_group_set_gain(agMusic,0,0);
} else {
audio_sound_gain(sound1, 0, 0);
audio_sound_gain(sound2, 0, 0);
audio_sound_gain(sound3, 0, 0);
audio_sound_gain(sound4, 0, 0);
//if loading<=0 {

//}
audio_group_set_gain(agBass,0,0);
audio_group_set_gain(agDrums,0,0);
audio_group_set_gain(agMelodies,0,0);
audio_group_set_gain(agVocals,0,0);
}
audio_sound_gain(music, .6*mastervol*musicvol, 0);
audio_group_set_gain(agMusic,.6*mastervol*musicvol,0);


if !instance_exists(obj_levelup) and !instance_exists(obj_pickupq) and !instance_exists(obj_reviveq) and !instance_exists(obj_pausemenu) {
if global.pause=1 {
	if audio_sync_group_is_playing(sg) {
	audio_pause_sync_group(sg);
	}
	audio_pause_all();
	exit
} else {
	if !audio_sync_group_is_playing(sg) {
		audio_resume_sync_group(sg);
	}
	audio_resume_all();
}
} else {
	if start=1 {
	exit
	}
}
if start=0 {
	 var adjusted_bpm = global.target_bpm * (1 - lower / 1000) * global.room_speed_set / 60;
	global.target_bpm = adjusted_bpm;  // Update target BPM based on game logic
    adjust_pitch(get_delta_time());  // Adjust pitch based on delta time
	
	exit;
}
if instance_count>400+level/2 {
	with (obj_damage) {
		instance_destroy()
	}
	with (obj_moneycount) {
		instance_destroy()
	}
}

if instance_count>450+level/2 {
	with (enemy) {
		instance_destroy()
	}
}
if instance_count>500+level/2 {
	with (xporb) {
		instance_destroy()
	}
	with (dondadollar)
	instance_destroy()
}


if xpbuff>=xpto {
	updatetext=1
}
	if updatetext=1 {
weapontext=[
["A Toy Gun","+10% Attack Rate\n+33% Aim Speed","x2 Damage","+1 Penetration","+15% Attack Rate\n+33% Aim Speed","+50% Damage","+20 Degrees Range\n+50% Aim Speed","+20% Attack Rate\n+50% Projectile Speed","+25% Projectile Size\n+50% Damage\n+15% Attack Rate","+1 Projectile",""],
["","","","","","","","","","",""],
["The Twitter Machine","x2 Damage","+1 Projectile","+10% Attack Rate\nand + 50% Projectile Speed","Grabs 2 Enemies","x2 Damage","+1 Projectile","+15% Attack Rate","+50% Projectile Size","x2 Damage",""],
["","","","","","","","","","",""],
["Hallelujah","50% Damage\n+1 Harmony","+20% Attack Rate\n+1 Penetration","+1 Harmony\n25% Volume (Size)","+50% Damage\n+33% Duration","+20% Attack Rate\n+1 Harmony","+25% Volume\n+33% Duration","+33% Damage","+1 Harmony\n+1 Penetration","x2 Damage\n+25% Volume",""],
["","","","","","","","","","",""],
["Bass Bumpin'","x1.5 Damage","+33% Range","+50% Rate","+66% Damage","+25% Range","+33% Rate","+50% Damage","+15% Range","x2 Damage",""],
["","","","","","","","","","",""],
["Break Free","+10% Range\n+25% Rotation Speed","+25% Duration\n+10% Rotationspeed","+10% Attack Rate","+25% Damage\n+25% Duration","+25% Rotation Speed","+15% Attack Rate","+50% Damage","+50% Rotation Speed","+25% Range",""],
["","","","","","","","","","",""],
["In the Name of the Father","+10% Rate","+25% Range","+1 Amount","+50% Damage","+25% Range","+15% Rate","+1 Amount","+25% Range","x2 Damage",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["Enter Zen","2nd Chakra\n+50% Damage","3rd Chakra\n+25% Range","4th Chakra","5th Chakra\n+50% Damage","6th Chakra\n+25% Range","7th Chakra","+33% Duration","+50% Orb Speed","+1 Penetration",""],
["","","","","","","","","","",""],
["It's a Brewin'","+25% Range","+25% Damage","+33% Attack Rate","+1 Chain Length","+25% Duration","+50% Damage","+33% Attack Rate","+25% Range","+1 Chain Length",""],
["","","","","","","","","","",""],
["I'm a Sensitive Person","+33% Fish Speed","+25% Duration","+10% Attack Rate","+50% Damage\n+25% Fish Size","+25% Duration","+10% Attack Rate","+33% Fish Speed","+25% Duration\n+10% Attack Rate","+50% Damage\n+25% Fish Size",""],
["I wanna go there","+50% Damage\n+50% Orbit Speed","+25% Radius\n+25% Size","+50% Oscilation Rate\nx2 Oscillation Range","x2 Damage","+25% Radius\n+50% Orbit Speed","+50% Oscilation Rate\nx2 Oscillation Range","x2 Damage","+25% Radius\n+50% Size","x3 Damage",""],
["Blacka Blacka!","+50% Fire Rate","+50% Damage\n+50% Aim Speed","+50% Fire Rate\n+50% Projectile Speed","+1 Penetration","+50% Damage/n+50% Projectile Speed","+50% Fire Rate\n+50% Aim Speed","+50% Projectile Speed\n+50% Fire Rate","+50% Projectile Size\n+20% Attack Rate\n+20% Damage","+50% Fire Rate",""],
["","","","","","","","","","",""],
["Defensive Weapon","20% Move Speed","+25% Range\n+50% Size","+20% Move Speed","Spikes","+25% Range\n+10% Move Speed","+20% Move Speed","More Spikes","+25% Range\n+50% Size","x2 Damage",""],
["Give them Scars","+50% Movement Speed","+25% Range\n+25% Size","+50% Attack Rate\nx2 Range","x2 Damage","+25% Range\n+50% Movement Speed","+50% Attack Rate\nx2 Range","x2 Damage","+25% Range\n+25% Size","x3 Damage",""],
["La Flame","+33% Fire Speed","+25% Duration","+10% Attack Rate","+50% Damage\n+25% Projectile Size","+25% Duration","+15% Attack Rate","+33% Fire Speed","+50% Damage","+25% Size\n+25% Duration",""],
["","","","","","","","","","",""],
["Look in my Eye","+50% Damage\n+10% Move Speed","+25% Range\n+50% Size","+50% Blink Rate","x2 Damage","+25% Range\n+10% Move Speed","+50% Blink Rate","+50% Damage","+25% Range\n+50% Size","x2 Damage",""],
["","","","","","","","","","",""],
["Howl at the Moon","+50% Damage","+50% Duration","+10% Rate","+50% Wolf Speed","+25% Duration","+25% Wolf Speed\n+1 Attack Count","+33% Duration","+10% Rate\n+50% Damage","+33% Wolf Speed\n+1 Attack Count",""],
["","","","","","","","","","",""],
["That S**t is Bright","x2 Damage","+33% Range","+33% Rate","+50% Damage","+25% Range","+33% Rate","+50% Damage","+15% Range","x2 Damage",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["Imagination","+50% Damage","+25% Range","+50% Damage","+25% Range","+50% Damage","+25% Range","+50% Damage","+25% Range","+50% Damage",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""]
]



//ldamage*(1+(.1*passives[18,3])*einstein)
passivetext=[
"+"+string((((1+.05*(master.notice[0,2])*leinstein)*(1+(.05*(master.passives[0,3]+1))*einstein)-1)-((1+.05*(master.notice[0,2])*leinstein)*(1+(.05*master.passives[0,3])*einstein)-1))*100)+"% Luck\n("+string((((1+.05*(master.notice[0,2])*leinstein)*(1+.05*(master.passives[0,3]+1)*einstein))-1)*100)+"%)",
"+"+string(((1-(1/(1+.02*((master.passives[1,3]+1)*einstein*master.luck)+(.02*(master.notice[1,2])*leinstein*master.lluck))))-(1-(1/(1+.02*(master.passives[1,3]*einstein*master.luck)+(.02*(master.notice[1,2])*leinstein*master.lluck)))))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/(1+.02*((master.passives[1,3]+1)*einstein*master.luck)+(.02*(master.notice[1,2])*leinstein*master.lluck))))*100)+"%)",
"+"+string((((1+.05*(master.notice[2,2])*leinstein)*(1+.05*(master.passives[2,3]+1)*einstein))-((1+.05*(master.notice[2,2])*leinstein)*(1+(.05*master.passives[2,3])*einstein)))*100)+"%\nEnemy Health,\nQuantity, & Speed\n("+string((((1+.05*(master.notice[2,2])*leinstein)*(1+.05*(master.passives[2,3]+1)*einstein))-1)*100)+"%)",
"Deal +"+string((((master.notice[3,2])*10*leinstein+20*clamp((master.passives[3,3]+1),0,1)+10*(clamp(master.passives[3,3]-1+1,0,99999))*einstein)-(master.notice[3,2]*10*leinstein+20*clamp(master.passives[3,3],0,1)+10*(clamp(master.passives[3,3]-1,0,99999))*einstein)))+"% Damage\nWhen below half Health\n("+string(((master.notice[3,2])*10*leinstein+20*clamp((master.passives[3,3]+1),0,1)+10*(clamp((master.passives[3,3]-1+1),0,99999))*einstein))+"%)",
"+"+string(((1-((1-(.05*(master.passives[4,3]+1)*einstein))/(1+.05*(master.notice[4,2])*leinstein)))-((1-((1-(.05*(master.passives[4,3])*einstein))/(1+.05*(master.notice[4,2])*leinstein)))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(master.passives[4,3]+1)*einstein))/(1+.05*(master.notice[4,2])*leinstein)))*100)+"%)",
"Heal "+string(((((1+.02*(master.notice[5,2])*leinstein)*(1+.02*(master.passives[5,3]+1))*einstein)-1)-(((1+.02*(master.notice[5,2])*leinstein)*(1+.02*master.passives[5,3])*einstein)-1))*100)+"% of Damage Dealt\n("+string((((1+.02*(master.notice[5,2])*leinstein)*(1+.02*(master.passives[5,3]+1))*einstein)-1)*100)+"%)",
"+"+string((((1+.1*(master.notice[6,2])*leinstein)*(1+.1*(master.passives[6,3]+1)*einstein)-1)-((1+.1*(master.notice[6,2])*leinstein)*(1+(.1*master.passives[6,3])*einstein)-1))*100)+"% Weapon & Ability Range\n("+string(((1+.1*(master.notice[6,2])*leinstein)*(1+(.1*(master.passives[6,3]+1))*einstein)-1)*100)+"%)",
"+"+string((((.05*(master.notice[7,2])*leinstein)+(.05*(master.passives[7,3]+1))*einstein)-((.05*(master.notice[7,2])*leinstein)+(.05*master.passives[7,3])*einstein))*100)+"% Movement\nSpeed & Handling ("+string(((.05*(master.notice[7,2])*leinstein)+(.05*(master.passives[7,3]+1))*einstein)*100)+"%)",
"+"+string((((1+.05*(master.notice[8,2])*leinstein)*(1+.05*(master.passives[8,3]+1))*einstein-1)-((1+.05*(master.notice[8,2])*leinstein)*(1+.05*master.passives[8,3])*einstein-1))*100)+"% XP\n("+string(((1+.05*(master.notice[8,2])*leinstein)*(1+.05*(master.passives[8,3]+1))*einstein-1)*100)+"%)",
"(Heal "+string((floor((clamp(master.passives[9,3]+1,0,1)+clamp(master.passives[9,3]-4+1,0,10000)+clamp(master.notice[9,2],0,1))*einstein+(.5*(master.notice[9,2])*leinstein))))+" HP Every "+string((5-clamp(master.passives[9,3],0,4))/(1+.05*master.notice[9,2]*leinstein))+" Seconds+\n("+string(floor((clamp((master.passives[9,3]+1),0,1)+clamp((master.passives[9,3]-4+1),0,10000)+clamp(master.notice[9,2],0,1))*einstein+(.5*master.notice[9,2]*leinstein))/((5-clamp((master.passives[9,3]+1),0,4))/(1+.05*master.notice[9,2]*leinstein)))+" HP/Second)",
"+"+string(((.02*(master.passives[10,3]+1))*einstein*master.damage+(.02*(master.notice[10,2])*leinstein*master.ldamage)-(.02*master.passives[10,3])*einstein*master.damage+(.02*master.notice[10,2]*leinstein*master.ldamage))*100)+"% Retalitory Damage\n("+string(((.02*(master.passives[10,3]+1))*einstein*master.damage+(.02*(master.notice[10,2])*leinstein*master.ldamage))*100)+"%)",
"+"+string((((.05*(master.notice[11,2])*leinstein*master.lrange)+(1+.05*(master.passives[11,3]+1)*master.range*einstein))-((.05*master.notice[11,2]*leinstein*master.lrange)+(1+(.05*(master.passives[11,3]))*master.range*einstein)))*100)+"% Attractor Pickup Range\n("+string(((.05*(master.notice[11,2])*leinstein*master.lrange)+(1+(.05*(master.passives[11,3]+1))*master.range*einstein)-1)*100)+"%)",
"+"+string((((1+.05*(master.notice[12,2])*leinstein)*(1+.1*(master.passives[12,3]+1)*einstein)-1)-((1+.05*(master.notice[12,2])*leinstein)*(1+(.1*master.passives[12,3])*einstein)-1))*100)+"% Attack Rate\n("+string(((1+.05*(master.notice[12,2])*leinstein)*(1+(.1*(master.passives[12,3]+1))*einstein)-1)*100)+"%)",
"+"+string((((1+.05*(master.notice[13,2])*leinstein)*(1+.1*(master.passives[13,3]+1)*einstein)-1)-((1+.05*(master.notice[13,2])*leinstein)*(1+(.1*master.passives[13,3])*einstein)-1))*100)+"% Attack Duration\n("+string(((1+.05*(master.notice[13,2])*leinstein)*(1+(.1*(master.passives[13,3]+1))*einstein)-1)*100)+"%)",
"+"+string(round(5*leinstein))+" Max Health\n("+string(round(10+master.love+5*leinstein))+"HP)",
"Every Minute,\n Take "+string(round(50/leinstein*100)/100)+"% Damage for "+string(5*(master.passives[15,3]+1))+" Seconds)",
"+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(master.revives+1)+")",
"+"+string(((1-(1/(1+.02*(master.passives[17,3]+1)*master.luck*einstein))/(1+(.02*(master.notice[17,2])*leinstein*(1+.05*master.notice[0,2]*leinstein)))-1)-(1-(1/(1+.02*(master.passives[17,3])*master.luck*einstein))/(1+(.02*(master.notice[17,2])*leinstein*(1+.05*master.notice[0,2]*leinstein)))-1))*100)+"% Critical Chance (x"+string((2*(.95+.05*clamp(master.passives[17,3],1,99999)))*einstein*(((.95+.05*(clamp(master.notice[17,2],1,99999)))*leinstein)))+" Damage)\n["+string((1-(1/(1+.02*(master.passives[17,3]+1)*master.luck*einstein))/(1+(.02*(master.notice[17,2])*leinstein*(1+.05*master.notice[0,2]*leinstein))))*100)+"%]",
"+"+string((((1+.1*(master.notice[18,2])*leinstein)*(1+(.1*(master.passives[18,3]+1))*einstein)-1)-((1+.1*master.notice[18,2]*leinstein)*(1+(.1*master.passives[18,3])*einstein)-1))*100)+"% Damage\n("+string(((1+.1*(master.notice[18,2])*leinstein)*(1+(.1*(master.passives[18,3]+1))*einstein)-1)*100)+"%)",
"OxyContin Spawns\nEvery 3 Minutes",
"+"+string((((1+(.1*power(clamp(master.notice[20,2],0,99999),.70))*leinstein)*(1+(.1*power(clamp(master.passives[20,3]+1,0,99999),.70)*einstein)))-(((1+(.1*power(clamp(master.notice[20,2],0,99999),.70))*leinstein)*(1+(.1*power(clamp(master.passives[20,3],0,99999),.70)*einstein)))))*100)+"% Projectile Size\n("+string(((1+(.1*power(clamp(master.notice[20,2],0,99999),.70))*leinstein)*(1+(.1*power(clamp(master.passives[20,3]+1,0,99999),.70)*einstein))-1)*100)+"%)",
"+"+string(((((1+.05*(master.notice[21,2])*leinstein)*(1+.05*(master.passives[21,3]+1))*einstein)-1)-((1+.05*(master.notice[21,2])*leinstein)*(1+.05*master.passives[21,3])*einstein-1))*100)+"% Money Value & Frequency\n("+string((((1+.05*(master.notice[21,2])*leinstein)*(1+.05*(master.passives[21,3]+1))*einstein)-1)*100)+"%)",
"Item Pickups:\n+"+string((((1+.05*(master.notice[22,2])*leinstein)*(1+.05*(master.passives[22,3]+1)*einstein)-1)-((1+.05*(master.notice[22,2])*leinstein)*(1+(.05*master.passives[22,3])*einstein)-1))*100)+"% Duration & Effect ("+string(((1+.05*(master.notice[22,2])*leinstein)*(1+(.05*(master.passives[22,3]+1))*einstein)-1)*100)+"%)",
"+"+string(((1+.1*(master.notice[23,2])*leinstein)*(1+.1*(master.passives[23,3]+1)*einstein)-(1+.1*(master.notice[23,2])*leinstein)*(1+(.1*master.passives[23,3])*einstein))*100)+"% Projectile Speed\n("+string(((1+.1*(master.notice[23,2])*leinstein)*(1+(.1*(master.passives[23,3]+1))*einstein)-1)*100)+"%)",
"+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor((master.passives[24,3]+1)*einstein+master.notice[24,2]*leinstein)))+")",
string(((((1-(.05*(master.passives[25,3]+1)*einstein))/(master.lvanish)))-(((1-(.05*(master.passives[25,3])*einstein))/(master.lvanish))))*100)+"% Enemy Eyesight\n("+string((((1-(.05*(master.passives[25,3]+1)*einstein))/(master.lvanish)))*100)+"%)",
]

passivetext2=[
["+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","",""],
["+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)"],
["+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"%\nEnemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)"],
["Deal +"+string(20*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)"],
["+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)"],
["Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)"],
["+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","",""],
["+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")"],
["+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)",""],
["Heal "+string(1*einstein)+" Health\nEvery "+string(heartseconds)+" Seconds","-1 Second\n(+"+string(heart)+" HP / "+string(heartseconds-1)+" Seconds)","-1 Second\n(+"+string(heart)+" HP / "+string(heartseconds-1)+" Seconds)","-1 Second\n(+"+string(heart)+" HP / "+string(heartseconds-1)+" Second)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)"],
["+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","",""],
["+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","",""],
["+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","",""],
["+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","",""],
["+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(10*einstein))+" Max Health\n("+string(round(10+love+10*einstein))+")","+"+string(round(10*einstein))+" Max Health\n("+string(round(10+love+10*einstein))+")","+"+string(round(10*einstein))+" Max Health\n("+string(round(10+love+10*einstein))+")","+"+string(round(10*einstein))+" Max Health\n("+string(round(10+love+10*einstein))+")","",""],
["Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","","","","","",""],
["+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(revives+1)+")","+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(revives+1)+")","+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(revives+1)+")","+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(revives+1)+")","","","","","","","",""],
["+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]"],
["+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","",""], //power
["OxyContin Spawns\nEvery 3 Minutes","OxyContin Spawns\nEvery 2 Min: 30 Sec","OxyContin Spawns\nEvery 2 Minutes","OxyContin Spawns\nEvery 1 Min: 30 Sec","OxyContin Spawns\nEvery 1 Minute","OxyContin Spawns\nEvery 30 Seconds","","","","","",""],
["+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)",""],
["+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)"],
["Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")"],
["+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","",""],
["+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")"],
["-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","",""]
]

eintext=["+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)"]

if xpbuff>=xpto {
	var xpbuff_last=xpbuff
	xpbuff=0
	xp=xp-xpto
	level++
		if master.mainmenu=0 {
	

        audio_pause_sync_group(sg);
		audio_pause_all()
	instance_create_layer(room_width/2,0,"uiitop",obj_levelup)
	levelheat+=1*1000000;
	xpto=level+1
		global.pause=1
		
}


updatetext=0
if xpbuff_last != 0 {
	exit
}
}
	
	
	
	
	
	
	
	}

//update keys
if donda3=0 {
	key=0
} else {
	//F#Major/EbMinor
//key=0
//GMajor/EMinor
//key=1
//G#Major/FMinor
//key=2
//AMajor/F#Minor
//key=3
//A#Major/GMinor
//key=4
//BMajor/G#Minor
//key=5
//CMajor/AMinor
//key=6
//DbMajor/A#Minor
//key=7
//DMajor/BMinor
//key=8
//EbMajor/CMinor
//key=9
//EMajor/C#Minor
//key=10
//FMajor/DMinor
//key=11
//glory
if second=0 and minute=0 and hour=0 {
	key=0
}
//cancelled
if second=14 and minute=1 and hour=0 {
	key=8
}
if second=22 and minute=1 and hour=0 {
	key=1
}
if second=27 and minute=2 and hour=0 {
	key=8
}
//waterintodrank
if second=40 and minute=4 and hour=0 {
	key=1
}
if second=47 and minute=5 and hour=0 {
	key=0
}
if second=12 and minute=6 and hour=0 {
	key=1
}
//winterscold
if second=28 and minute=7 and hour=0 {
	key=11
}
//freeingchrist
if second=46 and minute=9 and hour=0 {
	key=8
}
//majestic
if second=59 and minute=12 and hour=0 {
	key=11
}
//ellayel
if second=9 and minute=14 and hour=0 {
	key=6
}
//heartaches808s
if second=14 and minute=16 and hour=0 {
	key=6
}
//glides to this key
if second=30 and minute=16 and hour=0 {
	key=9
}
//lucille
if second=46 and minute=18 and hour=0 {
	key=9
}
//yeealittle
if second=56 and minute=20 and hour=0 {
	key=8
}
if second=44 and minute=22 and hour=0 {
	key=3
}
//chasingghosts
if second=05 and minute=24 and hour=0 {
	key=6
}
//40years
if second=20 and minute=26 and hour=0 {
	key=8
}
if second=24 and minute=27 and hour=0 {
	key=3
}
if second=0 and minute=28 and hour=0 {
	key=8
}
//praisegod
if second=37 and minute=28 and hour=0 {
	key=5
}
if second=31 and minute=29 and hour=0 {
	key=8
}
if second=37 and minute=29 and hour=0 {
	key=3
}
if second=53 and minute=29 and hour=0 {
	key=10
}
//intheend
if second=25 and minute=30 and hour=0 {
	key=4
}
if second=44 and minute=31 and hour=0 {
	key=5
}
if second=52 and minute=31 and hour=0 {
	key=6
}
//gradually declines to this
if second=23 and minute=32 and hour=0 {
	key=3
}
if second=24 and minute=32 and hour=0 {
	key=8
}
if second=29 and minute=32 and hour=0 {
	key=2
}
if second=09 and minute=33 and hour=0 {
	key=3
}
}

//update spawntable
//0object, 
//1spawning?, 
//2size (1 normal), 
//3resistance (none,0-1,invincible), 
//4damage (1 normal),
//5speed (1 normal)
//6xp
//7rarity 1=100%, 5=20%, 10=10%, 20=5%, 100=1%
//8dolars
//9=health
//10=direction 0=left,1r,2u,3d,4dl,5ul,6ru,7rd,8random
//11=gravity?
//12: 1=onlylr,2=only ud
//13:flying
//


//if ti<=29 
//{
//	mob = [
//		[ghost,1,.75,0,1,1,1,1,1,1,0,0,0,1],
//		[stardavid,1,.6,0,1,1.5,1,3,0,1,3,0,0,1],
//		[razziA,1,1,0,1,.5,1,10,0,1,8,1,1,0],
//		[razziF,1,1,0,.7,.7,1,10,0,1,8,1,1,0]
//	];
//} 
//else {
//if ti<=59 {
//	mob = [
//		[ghost,1,.8,0,1.2,1.1,1,1,1,2,0,0],
//		[stardavid,1,.7,0,1.2,1.6,1,4,0,2,8,0],
//		[razziA,1,1,.1,1,.8,2,70,2,3,0,1],
//		[razziF,1,1,0,.7,.8,2,70,2,2,0,1]
//	];
//} else {
//if ti<=89 {
//	mob = [
//		[ghost,1,.9,0,1.2,.7,1,1,1,2,0,0],
//		[stardavid,1,.6,0,1.4,1.5,1,6,0,2,8,0],
//		[razziA,1,1,.1,.7,1,2,40,2,3,0,1],
//		[razziF,1,1,0,.7,1,2,60,2,3,0,1]
//	];
//} else {
//if ti<=119 {
//	mob = [
//		[ghost,1,.8,.3,2,1.3,1,2,0,4,0,0],
//		[stardavid,1,.7,.3,2,1.5,1,1,1,2,8,0],
//		[razziA,1,1,.3,1,.9,2,50,2,3,0,1],
//		[razziF,1,.9,.1,1.2,.8,2,50,2,3,0,1]
//	];
//} else {
//	if ti<=149 {
//	mob = [
//		[ghost,1,.8,.3,2,1.4,1,2,0,1,0,0],
//		[stardavid,1,.5,.3,1,2,1,1,1,2,8,0],
//		[razziA,1,1,.4,1.5,.8,2,30,2,3,0,1],
//		[razziF,1,1,.2,1.5,.6,2,30,2,3,0,1]
//	];
//} else {
//	if ti<=179 {
//	mob = [
//		[ghost,1,.9,.3,2,1.4,1,2,1,2,0,0],
//		[stardavid,1,.75,.3,2,2,1,15,1,2,8,0],
//		[razziA,1,1,.4,1.5,.8,2,25,3,3,0,1],
//		[razziF,1,1,.2,1.5,.6,2,25,3,3,0,1]
//	];
//} else {
//	//update spawntable
////0object, 
////1spawning?, 
////2size (1 normal), 
////3resistance (none,0-1,invincible), 
////4damage (1 normal),
////5speed (1 normal)
////6xp
////7rarity 1=100%, 5=20%, 10=10%, 20=5%, 100=1%
////8dolars
////9=health
////10=direction 0=left,1r,2u,3d,4dl,5ul,6ru,7rd,8random
//	if ti<=209 {
//	//  name      ,spawn,size  ,resist,damage,speed ,xp    ,rarity,dollar,health,direction
//	mob = [
//		[ghost    ,1    ,.9    ,.5    ,2     ,1.4   ,1     ,20     ,2     ,2    ,1,0],
//		[stardavid,1    ,.75   ,.5    ,2     ,2.5   ,1   ,3      ,1     ,2    ,8,0],
//		[razziA   ,1    ,1     ,.6    ,1.6   ,.8    ,2     ,25     ,2     ,3    ,2,1],
//		[razziF   ,1    ,1    ,.6    ,1.6   ,.6    ,2     ,25     ,2     ,3    ,3,1]
//	];
//} else {
//	if ti<=239 {
//	mob = [
//		//name    ,spawn,size  ,resist,damage,speed ,xp    ,rarity,dollar,health,direction
//		[ghost    ,1    ,.9    ,.6    ,2    ,1.4   ,1     ,20     ,2     ,3    ,0,0],
//		[stardavid,1    ,.75   ,.6    ,2.2   ,2.5   ,1     ,4      ,2     ,3    ,8,0],
//		[razziA   ,1    ,1     ,.6    ,2     ,.8    ,2     ,25     ,3     ,4    ,1,1],
//		[razziF   ,1    ,1    ,.6    ,2     ,.6    ,2     ,25     ,3     ,4    ,2,1]
//	];
//} else {
//	if ti<=269 {

//		//  name  ,spawn,size  ,resist,damage,speed ,xp    ,rarity,dollar,health,direction
//	mob = [
//		[ghost    ,1    ,1     ,.7    ,2    ,1.5   ,1     ,10     ,2     ,4    ,8,0],
//		[stardavid,1    ,.75   ,.7    ,2.2   ,2.6   ,1     ,5      ,2     ,4    ,8,0],
//		[razziA   ,1    ,1     ,.7    ,2     ,.9    ,2     ,20     ,3     ,5    ,1,1],
//		[razziF   ,1    ,1    ,.7    ,2     ,.9    ,2     ,20     ,3     ,5    ,2,1]
//	];
//} else {
//	if ti<=299 {
	
//		//  name  ,spawn,size  ,resist,damage,speed ,xp    ,rarity,dollar,health,direction
//	mob = [
//		[ghost    ,1    ,1.3     ,.75    ,3    ,1.5   ,1     ,15     ,4     ,4    ,8,0],
//		[stardavid,1    ,.75   ,.75    ,2.2   ,2.6   ,1     ,10      ,2     ,4    ,8,0],
//		[razziA   ,1    ,1     ,.75    ,2     ,1.5    ,2     ,20     ,2     ,5.5    ,8,1],
//		[stardavid   ,1    ,.4    ,.75    ,2     ,5    ,1    ,5     ,2     ,1    ,9,0]
//	];
//} else {
//	if ti<=350 {
//	//  name      ,spawn,size  ,resist,damage,speed ,xp    ,rarity,dollar,health,direction
//	mob = [
//		[ghost    ,1    ,1.4     ,.8    ,3    ,2  ,3     ,10     ,4     ,7    ,9,0],
//		[stardavid,1    ,.75   ,.8    ,2.2   ,3.5   ,1     ,1      ,2     ,4    ,8,0],
//		[blackball   ,1    ,.3     ,.5    ,1     ,2    ,1     ,20     ,1     ,2    ,9,0],
//		[blackball   ,1    ,1    ,.8    ,4     ,1    ,4     ,50     ,4     ,10    ,8,0]
//	];
//} else {
//		if ti<=400 {
	
//		//  name  ,spawn,size  ,resist,damage,speed ,xp    ,rarity,dollar,health,direction
//	mob = [
//		[ghost    ,1    ,1.3     ,.75    ,3    ,1.6   ,1     ,15     ,4     ,6    ,8,0],
//		[stardavid,1    ,.75   ,.75    ,2.2   ,2.6   ,1     ,10      ,2     ,4    ,8,0],
//		[razziA   ,1    ,1     ,.75    ,2     ,1.5    ,2     ,20     ,2     ,5.5    ,8,1],
//		[blackball   ,1    ,.5    ,.75    ,2     ,1.5    ,3     ,40     ,2     ,5.5    ,0,0]
//	];
//} else {
//	//  name      ,spawn,size  ,resist,damage,speed ,xp    ,rarity,dollar,health,direction
//	mob = [
//		[ghost    ,1    ,1.4     ,.8    ,3    ,1  ,3     ,10     ,4     ,7    ,9,0],
//		[stardavid,1    ,.75   ,.8    ,2.2   ,3.5   ,1     ,10      ,2     ,4    ,8,0],
//		[razziF   ,1    ,1     ,.85    ,4     ,2.5    ,3     ,20     ,3     ,5    ,8,1],
//		[blackball   ,1    ,.7    ,.9    ,3     ,1    ,4     ,30     ,2     ,10    ,9,0]
//	];
//}
//}
//}
//}
//}
//}
//}
//}
//}
//}
//}
//}

if selectedstage!=0 {
if hour*3600+minute*60+second >= stages[selectedstage,6] {
if instance_exists(yeancat) {
if (delta_second > 0) {
	
  delta_second -= delta_time * 1 * global.room_speed_set/60;
}
  
  if (delta_second <= 0) {
	delta_second = 1000000-(0-delta_second);
	second+=1;
	kps=killcount-killcountlast
	killcountlast=killcount
	tiprev=ti
	ti+=1
	countdi=1
	if stemplay=1 {
		if stemtime>0 {
			stemtime-=1
		} else {
			stemplay=0
		}
  }
} else {

}
}
} else {
	tiprev=ti
	if os_type=os_ios or os_type=os_android {
	ti=floor(audio_sound_get_track_position(music))
	} else {
		ti=floor(audio_sound_get_track_position(music))
		//ti=floor(audio_sync_group_get_track_pos(sg))
	}
	if tiprev!=ti {
		countdi=1
		if stemplay=1 {
		if stemtime>0 {
			stemtime-=1
		} else {
			stemplay=0
		}
	}
	}
}
} else {
	//yean timer
	if instance_exists(yeancat) {
if (delta_second > 0) {
	
  delta_second -= delta_time * 0.9905 * global.room_speed_set/60;
}
  
  if (delta_second <= 0) {
	
	second+=1;
	kps=killcount-killcountlast
	killcountlast=killcount
	tiprev=ti
	ti+=1
	countdi=1

	if stemplay=1 {
		if stemtime>0 {
			stemtime-=1
		} else {
			stemplay=0
		}
  }
  delta_second = 1000000-(0-delta_second);
} else {

}
if second>59 {
	minute+=1
	second=0
}

if minute>59 {
	hour+=1
	minute=0
}
}
}

if !instance_exists(yeancat) {
	lower+=4*(global.room_speed_set/1000000*delta_time)
	if scaleg<1 {
		scaleg+=.01
	}
}


if hour*3600+minute*60+second >= floor(stages[selectedstage,6]) {
if second>59 {
	minute+=1
	second=0
}

if minute>59 {
	hour+=1
	minute=0
}
}

var posi=0
if donda3=1 {
	if hour*3600+minute*60+second < 2013 {
		if os_type=os_ios or os_type=os_android {
			posi=ti

		} else {
posi = floor(audio_sound_get_track_position(music))
	if audio_sync_group_is_playing(sg) {
		
	 posi = floor(audio_sync_group_get_track_pos(sg))
	} else {
		posi=floor(ti)
		posi = floor(audio_sound_get_track_position(music))
	}
}
if posi != hour*3600+minute*60+second {
	var time_values = seconds_to_time(posi);
hour = time_values[2];
minute = time_values[1];
second = time_values[0];

}
} else {

	if ti != hour*3600+minute*60+second {
		tiprev=ti
		ti=hour*3600+minute*60+second
	var time_values = seconds_to_time(ti);
hour = time_values[2];
minute = time_values[1];
second = time_values[0];
}
}
}

//0ITEM ID //1planet[i] or space-1, //2playerpos/spacepos, 3//spawned? 4type? 0=n/a 1=passive 2=weapon 5:moving?
//passives are id +15
//weapons are id +41
//WORLD ITEMS
arrowright=0
arrowleft=0
for (var w=0; w<array_length(worlditems); w++) {
	if worlditems[w,1]=-1 {
		//space
	} else {
		//planet
		if obj_terrain.planet=worlditems[w,1] {
			//on planet
			//facing?
			var facep = 0
			if worlditems[w,2]> obj_terrain.playerpos {
				//right
				if worlditems[w,4]!=3 {
					arrowright=1
				} else {
						if collection[worlditems[w,0],1]=1 {
							arrowright=1
						}
					}
				facep=1
				if worlditems[w,3]=1 {
						arrowright=0
					}
					
			} else {
				if worlditems[w,2]< obj_terrain.playerpos {
					//left
					if worlditems[w,4]!=3 {
					arrowleft=1
				} else {
						if collection[worlditems[w,0],1]=1 {
							arrowright=1
						}
					}
					facep=-1
					if worlditems[w,3]=1 {
						arrowleft=0
					}
				} else {
					//on
					facep=0
				}
			}
			if worlditems[w,3]=0 {
				if instance_exists(yeancat) {
					if round(obj_terrain.playerpos/1000)*1000=worlditems[w,2] {
						//spawn right
						if facep=1  {
							ite = instance_create_layer(room_width/2+1920*master.camscale/2+300,yeancat.y+(random(1080*master.camscale)/2-1080*master.camscale/2)*(clamp(2-(yeancat.x-(room_width/2-(1920/2)*camscale))/((1920/2)*camscale),1,2)),"player",items[worlditems[w,0],0])
				
						} else {
							if facep=0 {
								//center
								//randomize
							if round(random(2))<=1 {
												ite = instance_create_layer(room_width/2+1920*master.camscale/2+300,yeancat.y+(random(1080*master.camscale)/2-1080*master.camscale/2)*(clamp(2-(yeancat.x-(room_width/2-(1920/2)*camscale))/((1920/2)*camscale),1,2)),"player",items[worlditems[w,0],0])
							} else {
										ite = instance_create_layer(room_width/2-1920*master.camscale/2-300,yeancat.y+(random(1080*master.camscale)/2-1080*master.camscale/2)*(clamp(2-(yeancat.x-(room_width/2-(1920/2)*camscale))/((1920/2)*camscale),1,2)),"player",items[worlditems[w,0],0])
							}
							} else {
								ite = instance_create_layer(room_width/2-1920*master.camscale/2-300,yeancat.y+(random(1080*master.camscale)/2-1080*master.camscale/2)*(clamp(2-(yeancat.x-(room_width/2-(1920/2)*camscale))/((1920/2)*camscale),1,2)),"player",items[worlditems[w,0],0])
						//left
							}
						}
						//set id
						if instance_exists(ite) {
							ite.space=0
							ite.planett=obj_terrain.planet
							//ite.poss=worlditems[w,2]
				ite.itemidd=worlditems[w,0]
				ite.variant=items[worlditems[w,0],5]
				if worlditems[w,4] = 1 or worlditems[w,4]=2 or worlditems[w,4]=3 {
					//weapon or passive
					//make stand still
					ite.moves=0
				}
				}
						//spawned? changer
						worlditems[w,3]=1
				}
			}
			}
		}
	}
}


time+=.01
//if devmode=0 {
mobfreq-=1 
//} else {
//	if keyboard_check(ord("E")) {
//		mobfreq-=1 
//	}
//}

foodfreq-=1
//if starfreq=round(starfreqset/2) {
//	instance_create_layer(2200,1040 * sin(time) + 540,"stars",star)
//}
if master.prescription>0 {
	if oxyfrequency> 0 {
		oxyfrequency-=delta_time;
	} else {
		oxyfrequencyset=60*3+30-(master.prescription*30)
		oxyfrequency=oxyfrequencyset*1000000
		var oxi = instance_create_layer(room_width/2+1920*master.camscale/2+300,room_height/2+(random(1080*master.camscale)-1080*master.camscale/2),"player",items[i,0])
		var vari=clamp(ceil(random_range(1,master.prescription)),1,5)
		oxi.variant=vari
		oxi.itemidd=37+vari
	}
}

if spawnthings=true {
	
	if itemfrequency>0 {
		itemfrequency-=delta_time*global.room_speed_set/60
	} else {
		
		//spawn
		var itempool = 0
	for (i=0; i<array_length(items);i++) {
		if items[i,1]=1 {
			//count enemy spawn total
			itempool+=1
		}
	}
	//abs(abs(items[i,6])-1)
		//select random number in total
		var itemroll=1+round(random(itempool-1));
		
		for (i=0; i<array_length(items);i++) {
		if items[i,1]=1 {
			itemroll-=1
			if itemroll = 0 {
								if (items[i][0] = obj_weaponitem) {
					if weapons[items[i][5],15]=1 {
			
					} else {
									itempool = 0
	for (ii=0; ii<array_length(items);ii++) {
		if items[ii,1]=1 {
			//count enemy spawn total
			itempool+=1
		}
	}
	itemroll=1+round(random(itempool-1));
					i=0
					continue
					}
				}
				if (items[i][0] = obj_passiveitem) {
					if passives[items[i][5],9]=1 {

					} else {
									itempool = 0
	for (ii=0; ii<array_length(items);ii++) {
		if items[ii,1]=1 {
			//count enemy spawn total
			itempool+=1
		}
	}
	itemroll=1+round(random(itempool-1));
					i=0
					continue
					}
				}
				if random((abs(abs(items[i,6])-1)*items[i,4]+(items[i,4]*clamp(items[i,6],0,1))+abs(clamp(items[i,6],-1,0))*items[i,4]*(master.luck))*1000)<=(1+(master.luck-1)*clamp(items[i,6]+1,0,1))*1000 {
							//stop spawning item
								if (items[i][0] = obj_weaponitem) {
					if weapons[items[i][5],15]=1 {
					items[i][1]=0;
					items[i,2]=1
					for (igg=0; igg<array_length(items); igg+=1) {
						if (items[i][0] = obj_weaponitem) {
							items[igg][4]+=100;
						}

					}
					}
					}
					if (items[i][0] = obj_passiveitem) {
					if passives[items[i][5],9]=1 {
					items[i][1]=0;
					items[i,2]=1
					for (igg=0; igg<array_length(items); igg+=1) {
						if (items[i][0] = obj_passiveitem) {
							items[igg][4]+=100;
						}

					}
					}
					}
					
					if instance_exists(yeancat) {
						//spawn item right
						if obj_terrain.travelspeed>0 {
				ite = instance_create_layer(room_width/2+1920*master.camscale/2+300,yeancat.y+(random(1080*master.camscale)-1080*master.camscale/2)*(clamp(2-(yeancat.x-(room_width/2-(1920/2)*camscale))/((1920/2)*camscale),1,2)),"player",items[i,0])
					} else {
						//spawn item left
						if obj_terrain.travelspeed<0 {
							ite = instance_create_layer(room_width/2-1920*master.camscale/2-300,yeancat.y+(random(1080*master.camscale)-1080*master.camscale/2)*(clamp(2-(yeancat.x-(room_width/2-(1920/2)*camscale))/((1920/2)*camscale),1,2)),"player",items[i,0])
						} else {
							//randomize
							if round(random(1))=0 {
												ite = instance_create_layer(room_width/2+1920*master.camscale/2+300,yeancat.y+(random(1080*master.camscale)-1080*master.camscale/2)*(clamp(2-(yeancat.x-(room_width/2-(1920/2)*camscale))/((1920/2)*camscale),1,2)),"player",items[i,0])
							} else {
										ite = instance_create_layer(room_width/2-1920*master.camscale/2-300,yeancat.y+(random(1080*master.camscale)-1080*master.camscale/2)*(clamp(2-(yeancat.x-(room_width/2-(1920/2)*camscale))/((1920/2)*camscale),1,2)),"player",items[i,0])
							}
						}
					}
					if instance_exists(ite) {
				ite.itemidd=i
				ite.variant=items[i,5]
				if ite=obj_passiveitem or ite=obj_weaponitem {
					ite.planett=obj_terrain.planet
					if obj_terrain.playeraltitude>=40000 {
						ite.space=1
					} else {
						ite.space=0
					}
					ite.moves=1
				}
				}
				} else {
				ite = instance_create_layer(room_width/2+1920*master.camscale/2+300,room_height/2+(random(1080*master.camscale)-1080*master.camscale/2),"player",items[i,0])
				}
				if instance_exists(ite) {
				ite.itemidd=i
				ite.variant=items[i,5]
				if ite=obj_passiveitem or ite=obj_weaponitem {
					ite.planett=obj_terrain.planet
					if obj_terrain.playeraltitude>=40000 {
						ite.space=1
					} else {
						ite.space=0
					}
					ite.moves=1
				}
				}
				//0object,
				//1can spawn,
				//2has spawned
				
				//(items[i][0] = obj_weaponitem) or 

				if (items[i][0] = album) or (items[i][0] = shades) {
					items[i][1]=0;
				}
				//3collected?
				//4rarity(1=100%,2=50%)
				//5variant
				//6 good=1, bad=-1; neutral=0 (for determining luck)
				
				break
				} else {
					itempool = 0
	for (ii=0; ii<array_length(items);ii++) {
		if items[ii,1]=1 {
			//count enemy spawn total
			itempool+=1
		}
	}
	itemroll=1+round(random(itempool-1));
					i=0
				}
				
			}
		}
	}
		
		
		
	if rampitem<10 {
		rampitem+=1
		itemfrequencyset+=1
	} else {
		}
		itemfrequency=itemfrequencyset*1000000/(sqrt((hour*3600+minute*60+second+2013)/2013))
	
	}

if instance_exists(yeancat) {
	if yeancat.healthh<yeancat.maxhealth {
if foodfreq<0 {
	if random(100)<foodchance {
	instance_create_layer(room_width/2+1920*master.camscale/2+300,room_height/2+(random(1080*master.camscale)-1080*master.camscale/2),"player",bigmac)
	}
	foodfreq=round((foodfreqset+random(foodfreqset/4))/(sqr((speedd+20)/30)))
}
}
}
var tablepick=0
if floor(random(clamp(abs(obj_terrain.d2plan/15),0,1)*20))+1=1 {
	//current planet
	tablepick=obj_terrain.planet
} else {
	tablepick=(obj_terrain.planet-sign(obj_terrain.d2plan)+13) % 13
}
if flying=0 {
	for (i=0; i<array_length(mob);i++) {
		if i % 2 == 0{
	if mobground[obj_terrain.planet,i/2] != -1 {
		mob[i] = mobarray[mobground[obj_terrain.planet,i/2]]
		} else {
		mob[i] = [ghost,0,.75,0,1,1,1,1,1,1,0,0,0,1]
		}
		} else {
			if mobscharacters[charselect,(i-1)/2] != -1 {
		mob[i] = mobarray[mobscharacters[charselect,(i-1)/2]]
		} else {
		mob[i] = [ghost,0,.75,0,1,1,1,1,1,1,0,0,0,1]
		}
		}
	}
} else {
	for (i=0; i<array_length(mob);i++) {
		if i % 2 == 0{
		if mobspace[tablepick,i/2] != -1 {
		mob[i] = mobarray[mobspace[tablepick,i/2]]
		} else {
		mob[i] = [ghost,0,.75,0,1,1,1,1,1,1,0,0,0,1]
		}
		} else {
			if mobscharacters[charselect,(i-1)/2] != -1 {
		mob[i] = mobarray[mobscharacters[charselect,(i-1)/2]]
		} else {
		mob[i] = [ghost,0,.75,0,1,1,1,1,1,1,0,0,0,1]
		}
		}
	}
}
//disable certain anemies
for (i=0; i<array_length(mob);i++) {
	if i>clamp((ti/1007)*10,0,11) {
		mob[i]=[ghost,0,.75,0,1,1,1,1,1,1,0,0,0,1]
	}
}
if mobfreq<0 {
	repeat (1+clamp(floor((hour*3600+minute*60+second)/1007*100)*(1-clamp((instance_number(enemy)+1)/(1+((hour*3600+minute*60+second)/1007)*100),0,1)),0,1000)) {
	var enemypool = 0
	for (i=0; i<array_length(mob);i++) {
		if mob[i,1]=1 {
			//count enemy spawn total
			enemypool+=1
		}
	}
		//select random number in total
		var enemyroll=1+round(random(enemypool-1));
		if instance_exists(yeancat) {
	for (i=0; i<array_length(mob);i++) {
		if mob[i,1]=1 {
			enemyroll-=1
			
			if enemyroll = 0 {
				//10=direction 0=left,1r,2u,3d,4dl,5ul,6ru,7rd,8random
//11=gravity?
//12: 1=onlylr,2=only ud
//13:flying
var nope=0
if mob[i,13]=0 {
						if obj_terrain.player_height_fromground+obj_terrain.playeraltitude >800 {
						nope=1
						}
					}
				if random_range(0,mob[i,7])<=1 and nope=0{
					dirmov=0
					
					if mob[i,10]=8 {
						if mob[i,12]=0 {
						dirmov=round(random_range(0,7))
						} else {
							if mob[i,12]=1 {
								dirmov=round(random_range(0,1))
							}
							if mob[i,12]=2 {
								dirmov=round(random_range(2,3))
							}
						}
					} else {
						dirmov=mob[i,10]
					}
					
					
					if dirmov=9 {
						var way=choose(-1,1)
						if way=-1 {
								var xxx=clamp(room_width/2+random_range(-1920*master.camscale/2,1920*master.camscale/2),-500,room_width+500)
								var yyy=clamp(choose(-1,1)*1300*master.camscale/2+room_height/2,-500,room_height+500)
						} else {
								var yyy=clamp(room_height/2+random_range(-1080*master.camscale/2,1080*master.camscale/2),-500,room_height+500)
								var xxx=clamp(choose(-1,1)*2200*master.camscale/2+room_width/2,-500,room_width+500)
						}
						var enem = instance_create_layer(xxx,yyy,"enemylayer",mob[i,0])
					}
					if dirmov=0  or dirmov=4{
						var yte=room_height*2/4
						yte =(room_height/2+random_range(-1080*master.camscale,1080*master.camscale))*(clamp(1-((room_width/2+1920*master.camscale/2)-yeancat.x)/(1920*master.camscale),0,1))+(yeancat.y*(clamp(((room_width/2+1920*master.camscale/2)-yeancat.x)/(1920*master.camscale),0,1)))
						if mob[i,13]=0 {
							yte=room_height*3/4
						}
					if instance_exists(yeancat) {	
						//(1080*master.camscale/2)*(clamp(1-(yeancat.x-(room_width/2-(1920*master.camscale/2)))/1920,.2,1))
			var enem = instance_create_layer(room_width/2+400+1920*master.camscale/2,yte,"enemylayer",mob[i,0])
					} else {
						var enem = instance_create_layer(room_width/2+400+1920*master.camscale/2,yte,"enemylayer",mob[i,0])
			}
					}
					if dirmov=1 or dirmov=6 {
					if instance_exists(yeancat) {
						 yte=room_height*2/4
						var yte =(room_height/2+random_range(-1080*master.camscale,1080*master.camscale))*(clamp(1-((room_width/2+1920*master.camscale/2)-yeancat.x)/(1920*master.camscale),0,1))+(yeancat.y*(clamp(((room_width/2+1920*master.camscale/2)-yeancat.x)/(1920*master.camscale),0,1)))
						if mob[i,13]=0 {
							yte=room_height*3/4
						}
						//(1080*master.camscale/2)*(clamp(1-(yeancat.x-(room_width/2-(1920*master.camscale/2)))/1920,.2,1))
			var enem = instance_create_layer(room_width/2-400-1920*master.camscale/2,yte,"enemylayer",mob[i,0])
					} else {
						var enem = instance_create_layer(room_width/2-400-1920*master.camscale/2,yte,"enemylayer",mob[i,0])
			}
					}
					if dirmov=2  or dirmov=5{
					if instance_exists(yeancat) {	
						//(1080*master.camscale/2)*(clamp(1-(yeancat.x-(room_width/2-(1920*master.camscale/2)))/1920,.2,1))
			var enem = instance_create_layer((room_width/2+random_range(-1920*master.camscale,1920*master.camscale))*(clamp(((room_height/2+1080*master.camscale/2)-yeancat.y)/(1080*master.camscale),0,1))+(yeancat.x*(1-clamp(((room_height/2+1080*master.camscale/2)-yeancat.y)/(1080*master.camscale),0,1))),room_height/2+300+900*master.camscale/2,"enemylayer",mob[i,0])
					} else {
						var enem = instance_create_layer((room_width/2+random_range(-1920*master.camscale,1920*master.camscale))*(clamp(((room_height/2+1080*master.camscale/2)-room_height/2)/(1080*master.camscale),0,1))+(room_width/2*(1-clamp(((room_height/2+108*master.camscale/2)-room_height/2)/(1080*master.camscale),0,1))),room_height/2+300+900*master.camscale/2,"enemylayer",mob[i,0])
			}
					}
					if dirmov=3  or dirmov=7{
					if instance_exists(yeancat) {	
						//(1080*master.camscale/2)*(clamp(1-(yeancat.x-(room_width/2-(1920*master.camscale/2)))/1920,.2,1))
			var enem = instance_create_layer((room_width/2+random_range(-1920*master.camscale,1920*master.camscale))*(clamp(1-((room_height/2+1080*master.camscale/2)-yeancat.y)/(1080*master.camscale),0,1))+(yeancat.x*(clamp(((room_height/2+1080*master.camscale/2)-yeancat.y)/(1080*master.camscale),0,1))),room_height/2-300-900*master.camscale/2,"enemylayer",mob[i,0])
					} else {
						var enem = instance_create_layer((room_width/2+random_range(-1920*master.camscale,1920*master.camscale))*(clamp(1-((room_height/2+1080*master.camscale/2)-(room_height/2))/(1080*master.camscale),0,1))+((room_width/2)*(clamp(((room_height/2+1080*master.camscale/2)-room_height/2)/(1080*master.camscale),0,1))),room_height/2-300-900*master.camscale/2,"enemylayer",mob[i,0])
			}
					}
					
				//0object, 1spawning?, 2size (1 normal), 3resistance (none,0-1,invincible), 4damage (1 normal),5speed (1 normal)
				enem.movetype=dirmov
				enem.spd=(mob[i,5]*curse*(level+500)/500)*(.75+clamp(ti/2014,0,2))
				enem.damage=mob[i,4]*master.curse*(lookingfortrouble+1)
				enem.resistance=(1-(1-mob[i,3])/curse)/(1+(level-1)/500)/(lookingfortrouble+1)+(1*lookingfortrouble)/2
				enem.sizee=mob[i,2]*(lookingfortrouble+3)/3
				enem.xp=mob[i,6]
				enem.dollar=(mob[i,8]*(level+500)/500)*(lookingfortrouble+2)/2
				enem.healthh=(mob[i,9]*curse*(level+200)/200)*(lookingfortrouble+1)*(1+ti/1007)
				if dirmov!=0 {
	dirmovs=dirmov
}
				break
				} else {
					enemyroll=1+round(random(enemypool-1));
					i=0
				}
			}
		}
	}
	//if random(2) <1 {
	//instance_create_layer(room_width/2+1920*master.camscale/2+300,random(room_height+300)-150,"player",ghost)
	//} else {
	//	instance_create_layer(room_width/2+1920*master.camscale/2+300,random(room_height+300)-150,"player",stardavid)
	//}

	}
	mobfreq=clamp(round((((mobfreqset+random(mobfreqset/4))/((clamp(speedd,0,50)+5)/15))/curse)*((instance_number(enemy)+1)/((clamp((hour*3600+minute*60+second)/2014,0,1)*1000+(master.speedd+5)/100)*master.curse))),1,999999999)
}
}
if window_get_fullscreen()=false {
	fullscreen=0
} else {
	fullscreen=1
}
if fullscreen=0 {
	if window_get_fullscreen()=true {
		window_set_fullscreen(false)
	}	
} else {
	if window_get_fullscreen()=false {
		window_set_fullscreen(true)
	}
}


if second=0 and minute % 3 = 0  and minute != 0 {
	if spawnitem=0 {
		if instance_exists(yeancat) {
		if yeancat.shade<1 {
		instance_create_layer(room_width/2+1920*master.camscale/2+300,room_height/2+((random(1080*master.camscale)-1080*master.camscale/2))*.5,"player",shades)
		}
		}
		spawnitem=1
	}
} else {
	if second=1 and minute % 3 = 0 {
		spawnitem=0
	}
}
if second > 10 or minute>0 or hour>0 {
	if round(random(10000))<5{
		//if instance_exists(yeancat) {
		//if !instance_exists(defcon) and yeancat.def=0 {
		//instance_create_layer(room_width/2+1920*master.camscale/2+300,room_height/2+((random(1080*master.camscale)-1080*master.camscale/2))*.75,"player",defcon)
		//}
		//}
	}
	if minute > 0 {
		//stemplayer commented code check this later
	//if round(random(10000))<3{
	//	if instance_exists(yeancat) {
	//	if !instance_exists(stemplayer) and master.stemplay=0 {
	//	instance_create_layer(room_width/2+1920*master.camscale/2+300,room_height/2+((random(1080*master.camscale)-1080*master.camscale/2))*.75,"player",stemplayer)
	//	}
	//	}
	//}
	}
}

}
if characters[charselect,0]=1 {
musicintro=character_music[charselect,0]
musicloop=character_music[charselect,1]
}

//music
//if stems_loaded=true {
if startmusic=0 {
if donda3=0 {
	if instance_exists(obj_jayarnoldlogo) {
	if loading<=0 {
	if !audio_is_playing(music) {
	music = audio_play_sound_on(music_emitter,musicintro,0,0,.7*master.musicvol*master.mastervol)
	}
	startmusic=1
	}
	} else {
		if !audio_is_playing(music) {
	music = audio_play_sound_on(music_emitter,musicintro,0,0,.7*master.musicvol*master.mastervol)
	}
	startmusic=1
	}
} else {
	audio_stop_all()
	music = audio_play_sound_on(music_emitter,track1,0,0,musicvol*mastervol);
audio_play_in_sync_group(sg, sound1);
audio_play_in_sync_group(sg, sound2);
audio_play_in_sync_group(sg, sound3);
audio_play_in_sync_group(sg, sound4);
audio_sound_gain(sound1, 0, 0);
//audio_sound_gain(music, 0, 0);
audio_sound_gain(sound2, 0, 0);
audio_sound_gain(sound3, 0, 0);
audio_sound_gain(sound4, 0, 0);
audio_start_sync_group(sg);
	startmusic=1
	track=2

}
} else {
	if instance_exists(obj_jayarnoldlogo) {
audio_sound_gain(music, (1-loading)*mastervol*musicvol, 0);
	}
if donda3=0 {
	loop=0 //last adjustment
if !audio_is_playing(music)  {
	music = audio_play_sound_on(music_emitter,musicloop,0,0,.7*master.musicvol*master.mastervol);
	//loop=1
}
} else {
	if !audio_is_playing(music) {
	if track=1 {
music = audio_play_sound_on(music_emitter,track1,0,0);

// Play the sounds
audio_play_in_sync_group(sg, sound1);
audio_play_in_sync_group(sg, sound2);
audio_play_in_sync_group(sg, sound3);
audio_play_in_sync_group(sg, sound4);
audio_sound_gain(sound1, 0, 0);
audio_sound_gain(sound2, 0, 0);
audio_sound_gain(sound3, 0, 0);
audio_sound_gain(sound4, 0, 0);
audio_start_sync_group(sg);
		track+=1
		exit
		}
	if track=2 {
		music = audio_play_sound_on(music_emitter,cancelled,0,0);
		track+=1
		exit
	}
	if track=3 {
		music = audio_play_sound_on(music_emitter,waterintodrank,0,0);
		track+=1
		exit
	}
	if track=4 {
		music = audio_play_sound_on(music_emitter,winterscold,0,0);
		track+=1
		exit
	}
	if track=5 {
		music = audio_play_sound_on(music_emitter,freeingchrist,0,0);
		track+=1
		exit
	}
	if track=6 {
		music = audio_play_sound_on(music_emitter,majestic,0,0);
		track+=1
		exit
	}
	if track=7 {
		music = audio_play_sound_on(music_emitter,ellayel,0,0);
		track+=1
		exit
	}
	if track=8 {
		music = audio_play_sound_on(music_emitter,heartache,0,0);
		track+=1
		exit
	}
	if track=9 {
		music = audio_play_sound_on(music_emitter,lucille,0,0);
		track+=1
		exit
	}
	if track=10 {
		music = audio_play_sound_on(music_emitter,yeealittle,0,0);
		track+=1
		exit
	}
	if track=11 {
		music = audio_play_sound_on(music_emitter,chasingghosts,0,0);
		track+=1
		exit
	}
	if track=12 {
		music = audio_play_sound_on(music_emitter,fourtyyears,0,0);
		track+=1
		exit
	}
	if track=13 {
		music = audio_play_sound_on(music_emitter,praisegod,0,0);
		track+=1
		exit
	}
	if track=14 {
		music = audio_play_sound_on(music_emitter,intheend,0,0);
		track=1
		exit
	}
}
}
}

speedd=10+10*(hour*3600+minute*60+second)/2014

if master.spawnthings=1 {
	if master_cutoff>round(obj_terrain.playeraltitude/4+1000+master.aspeedshow*4) {
		master_cutoff=(master_cutoff*99+obj_terrain.playeraltitude/4+1000+master.aspeedshow*4)/100
	} else {
		master_cutoff=(obj_terrain.playeraltitude/4+1000+master.aspeedshow*4)
	}
	//if master_highpass<round(clamp(200-obj_terrain.playeraltitude/100+sqrt(clamp(master.aspeedshow-100,0,20000))*250,0,20000)) {
		master_highpass=(clamp((master_highpass*49+(300-obj_terrain.playeraltitude/100+sqrt(clamp((master.aspeedshow-100),0,20000))*100))/50,0,48000))
	//}
} else {
	master_cutoff=((master_cutoff*99+48000)/100)
	master_highpass=((master_highpass*99)/100)
	
}
master_reverb=clamp(master.aspeedshow/1000-.5,0,1)

//master effects
// Low-pass effect


_lp_effect.cutoff = master_cutoff;
_hp_effect.cutoff = master_highpass;
_reverb.mix = master_reverb;

//music_bus.effects[2] = _reverb;

if key=0 {
	keypitch=1
}
if key<=5 and key != 0 {
	keypitch=1*power(1.059463,key)
} else {
	keypitch=1*power(1.059463,-12+key)
}

if audio_is_playing(soundscream) {
audio_sound_pitch(soundscream,1*(1-master.lower/1000)*global.room_speed_set/60)
if instance_exists(yeancat) {
	if yeancat.def<=0 {
		audio_stop_sound(soundscream);
	}
}
}
//add pitching for boss p
if instance_exists(obj_boss) {
	if obj_boss.bossid = 14 {
		if !audio_is_playing(bossmusic) {
			audio_stop_sound(music)
			
		}
		if bossp<1.4 {
			bossp+=.0005
		}
		}  else {
			if bossp>1 {
			bossp-=.01
			}
	}
} else {
	if bossp>1 {
			bossp-=.01
		}
}

//pitching
// Master Step Event
if (audio_is_playing(music)) {
    if (donda3 == 0) {
        var adjusted_bpm = global.target_bpm * (1 - lower / 1000) * global.room_speed_set / 60;
        global.target_bpm = adjusted_bpm;  // Update target BPM based on game logic
        adjust_pitch(get_delta_time());  // Adjust pitch based on delta time
        audio_sound_pitch(bossmusic, adjusted_bpm * bossp);  // Adjust boss music pitch
    } else {
        if (ti < 2013) {
            audio_sound_pitch(music, 1 * (1 - lower / 1000));
        } else {
            audio_sound_pitch(music, (ti / 2013) * (1 - lower / 1000) * global.room_speed_set / 60);
        }
    }
}

//}

//always on
if record=1 {
	stemplay=1
	stemtime=100
	
}
		if !instance_exists(obj_pausemenu) and !instance_exists(restar) {
			
		if dolcen>0 {
		dolcen=(dolcen*30)/31
		} else {
			dolcen=0
		}
		if dollarfade>.25{
		dollarfade-=.005*global.room_speed_set/60
		} else {
			dollarfade=.25
		}
		}
} else {
	//menu code
	if mainmenu=1 {
		if !instance_exists(obj_upgrademenu) {
				if dollarfade<1{
		dollarfade+=.005*global.room_speed_set/60
		} else {
			dollarfade=1
		}
		if dolcen<display_get_gui_width()*7/16 {
		dolcen=(dolcen*30+display_get_gui_width()*7/16)/31
		} else {
			dolcen=display_get_gui_width()*7/16
		}
		} else {
			if obj_upgrademenu.onscreen=0 {
				if dolcen<display_get_gui_width()*7/16 {
		dolcen=(dolcen*30+display_get_gui_width()*7/16)/31
		} else {
			dolcen=display_get_gui_width()*7/16
		}
			} else {
		if dolcen>0 {
		dolcen=(dolcen*30)/31
		} else {
			dolcen=0
		}
			}
	}
	} else {
		if dolcen>0 {
		dolcen=(dolcen*30)/31
		} else {
			dolcen=0
		}
	}
if !audio_is_playing(music) {
	if startmusic=0 {
	
	music = audio_play_sound_on(music_emitter,musicintro,0,0,.7*master.musicvol*master.mastervol)
	startmusic=1
	
} else {
if loop=0 {
	music = audio_play_sound_on(music_emitter,musicloop,0,0,.7*master.musicvol*master.mastervol);
	if tutorial=2 {
	
	
				audio_play_sound(imnotsupposedtohave,0,0)
				tutorial=3
			}
	loop=1
}
}
}
if instance_exists(obj_levelselect) {
charselect=obj_levelselect.charselect
}



if charselect!=charselectlast and characters[charselect,0]=1 {
	if obj_levelselect.stageid=0 {
	if audio_is_playing(music) {
	trackposition= audio_sound_get_track_position(music)
	audio_stop_sound(music)
	
	if loop=0 {
		music=audio_play_sound_on(music_emitter,character_music[charselect,0],0,0,.7*master.musicvol*master.mastervol)
		audio_sound_set_track_position(music,trackposition)
		startmusic=1
		loop=0
	} else {
		startmusic=1
		music=audio_play_sound_on(music_emitter,character_music[charselect,1],0,0,.7*master.musicvol*master.mastervol)
		audio_sound_set_track_position(music,trackposition)
		if tutorial=2 {
				audio_play_sound(imnotsupposedtohave,0,0)
				tutorial=3
			}
		loop=1
	}
	} else {
		if loop=1 {
		startmusic=1
		music=audio_play_sound_on(music_emitter,musicloop,0,0,.7*master.musicvol*master.mastervol)
		if tutorial=2 {
				audio_play_sound(imnotsupposedtohave,0,0)
				tutorial=3
			}
		}
	}
	}
}
//change music when cycling at top
if instance_exists(obj_levelselect) {
	
	if obj_levelselect.stageid=1 {
		if startmusic=1 {
		if audio_is_playing(music) {
		audio_stop_sound(music)
		startmusic=0
		loop=0
		}
		if !audio_is_playing(music) {
		music = audio_play_sound(glory,0,0)
		}
	}
	
}
	if obj_levelselect.stageid=0 {
		if startmusic=0 {
			audio_stop_sound(music)
			music = audio_play_sound_on(music_emitter,musicloop,1,0,.7*master.musicvol*master.mastervol)
			//make play ive never played som
			if tutorial=2 {
				audio_play_sound(imnotsupposedtohave,1,0)
				tutorial=3
			}
			loop=1
		}	
		startmusic=1
		}
	} else {
	//	if startmusic=0 {
			if !instance_exists(obj_jayarnoldlogo) {
			if !audio_is_playing(music) {
			music = audio_play_sound_on(music_emitter,musicloop,1,0,.7*master.musicvol*master.mastervol)
			if instance_exists(obj_boss) {
				if obj_boss.bossid=14 {
				bossmusic=audio_play_sound(ceasedub,1,0)
				}
			}	
			//make play ive never played som
			if tutorial=2 {
				audio_play_sound(imnotsupposedtohave,1,0)
				tutorial=3
			}
			loop=1
		
			//}
			}
	}
	}
	
}



//WEAPONS 
//DEM1 = ID;
//0name, 
//1 type, 0=base, 1=evolution, 2=superevo, 3=fusion
//2obtained?, 
//3discovered?, 
//4level, 
//5max level, 
//6passive requirement1, -1 = none
//7passive requirement2, -1 = none 
//8weapon requirement1, -1 = none
//9weapon requirement 2 -1 = none,
//10require max passives? 0 or 1
//11image, 
//12description
//13unlocked? (found in randomizer)

osc+=.05

if checkwep=1  and instance_exists(yeancat) {
	
//spawnweapons
for (i=0; i<array_length(weapons); i++) {
	//nerdblaster
		if i=0 {
			
		if weapons[i,2]=1 {
			if !instance_exists(obj_nerdblaster) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_nerdblaster)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-2
				}
			}
		}
	}
	//cellphone
	if i=2 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_cellphone) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_cellphone)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//gospel choir
	if i=4 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_gospelchoir) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_gospelchoir)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//808 Drum 6
	if i=6 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_808drum) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_808drum)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//chains 8
	if i=8 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_chains) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_chains)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//holywater 10
	if i=10 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_holywater) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_holywater)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//chakra 13
	if i=13 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_chakra) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_chakra)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//thestorm 15
	if i=15 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_thestorm) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_thestorm)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//pisces 17
	if i=17 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_pisces) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_pisces)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//moon 18
	if i=18 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_moon) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_moon)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//m1911 19
	if i=19 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_m1911) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_m1911)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//st pablo shield 21
	if i=21 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_stpabloshield) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_stpabloshield)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//st pablo sword 22
	if i=22 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_stpablosword) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_stpablosword)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//fire 23
	if i=23 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_fire) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_fire)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//gemini 25
	if i=25 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_gemini) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_gemini)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//wolf 27
	if i=27 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_wolf) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_wolf)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//flashing lights 29
	if i=29 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_flashinglights) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_flashinglights)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
	//fantasy 32
	if i=32 {
		if weapons[i,2]=1 {
			if !instance_exists(obj_fantasy) {
				var weapp = instance_create_layer(yeancat.x,yeancat.y,"player",obj_fantasy)
				weapp.wid=i
				var itemiddd=i+40
				if master.collection[itemiddd,1]<2 {
					master.collection[itemiddd,1]=2
					master.collection[itemiddd,7]=-1
				}
			}
		}
	}
}

checkwep=0

}

//PASSIVES
//DEM1 = ID;
//0name, 
//1obtained?, 
//2discovered?, 
//3level, 
//4max level, 
//5image, 
//6description
//7unlocked? (found in randomizer)

//upgrades=[
//[clamp(master.notice[0,1]-1,0,1),master.notice[0,2],master.notice[0,3],master.passives[0,5],"+"+string(5*leinstein)+"% Luck\n("+string(((master.lluck+.05*leinstein)*(master.luck*einstein)-1)*100)+"%)",0,1,"Luck",master.notice[0,0]],
//[clamp(master.notice[1,1]-1,0,1),master.notice[1,2],master.notice[1,3],master.passives[1,5],"+"+string(5*leinstein)+"% Chance to Dodge Attacks\n("+string(((1-master.lchampion)*(.05*(master.passives[1,3]+1))*einstein*master.luck)*100)+"%)",1,1,"Champion",master.notice[1,0]],
//[clamp(master.notice[2,1]-1,0,1),master.notice[2,2],master.notice[2,3],master.passives[2,5],"+"+string(5*leinstein)+"% Enemy Health, Quantity, & Speed\n("+string((master.lcurse+1)*(.05*(master.passives[2,3]+1))*einstein*100)+"%)",2,1,"Curse",master.notice[2,0]],
//[clamp(master.notice[3,1]-1,0,1),master.notice[3,2],master.notice[3,3],master.passives[3,5],"Deal +"+string(20*leinstein)+"% Damage\nWhen below half Health\n("+string(20+10*(master.passives[3,3]))+"%)",3,0,master.passives[0,3],master.notice[3,0]],
//[clamp(master.notice[4,1]-1,0,1),master.notice[4,2],master.notice[4,3],master.passives[4,5],"+"+string(5*leinstein)+"% Damage Resistance\n("+string((1-((1-(.05*(master.passives[4,3]+1)*einstein))/master.lresist))*100)+"%)",4,1,master.passives[4,0],master.notice[4,0]],
//[clamp(master.notice[5,1]-1,0,1),master.notice[5,2],master.notice[5,3],master.passives[5,5],"Heal "+string(2*leinstein)+"% of Damage Dealt\n("+string((0+(.02*(master.passives[6,3]+1))*einstein)*100)+"%)",5,1,master.passives[5,0],master.notice[5,0]],
//[clamp(master.notice[6,1]-1,0,1),master.notice[6,2],master.notice[6,3],master.passives[6,5],"+"+string(10*leinstein)+"% Weapon & Ability Range\n("+string((master.range-1+.10*einstein)*100)+"%)",6,1,master.passives[6,0],master.notice[6,0]],
//[clamp(master.notice[7,1]-1,0,1),master.notice[7,2],master.notice[7,3],master.passives[7,5],"+"+string(5*leinstein)+"% Movement\nSpeed & Handling\n("+string(((master.lfreewill+1)/2*leinstein+(.05*(master.passives[7,3]))*einstein/2)*100)+")",7,1,master.passives[7,0],master.notice[7,0]],
//[clamp(master.notice[8,1]-1,0,1),master.notice[8,2],master.notice[8,3],master.passives[8,5],"+"+string(5*leinstein)+"% XP\n("+string((master.lgraduate*(.05*(master.passives[8,3]+1))*einstein)*100)+"%)",8,1,master.passives[8,0],master.notice[8,0]],
//[clamp(master.notice[9,1]-1,0,1),master.notice[9,2],master.notice[9,3],master.passives[9,5],"Heal "+string(1*leinstein)+" Health\nEvery "+string(master.heartseconds)+" Seconds",9,1,master.passives[9,0],master.notice[9,0]],
//[clamp(master.notice[10,1]-1,0,1),master.notice[10,2],master.notice[10,3],master.passives[10,5],"+"+string(5*leinstein*master.damage)+"% Retalitory Damage\n("+string((master.heartbreak+.05*einstein*master.damage)*100)+"%)",10,1,master.passives[10,0],master.notice[10,0]],
//[clamp(master.notice[11,1]-1,0,1),master.notice[11,2],master.notice[11,3],master.passives[11,5],"+"+string(10*leinstein*master.range)+"% Attractor Pickup Range\n("+string((master.lattract*(1+(.1*(master.passives[11,3]+1))*master.range*einstein)-1)*100)+"%)",11,1,master.passives[11,0],master.notice[11,0]],
//[clamp(master.notice[12,1]-1,0,1),master.notice[12,2],master.notice[12,3],master.passives[12,5],"+"+string(10*leinstein)+"% Attack Rate\n("+string((master.attackrate-1+.10*einstein)*100)+"%)",12,1,master.passives[12,0],master.notice[12,0]],
//[clamp(master.notice[13,1]-1,0,1),master.notice[13,2],master.notice[13,3],master.passives[13,5],"+"+string(10*leinstein)+"% Attack Duration\n("+string((master.duration-1+.10*einstein)*100)+"%)",13,1,master.passives[13,0],master.notice[13,0]],
//[clamp(master.notice[14,1]-1,0,1),master.notice[14,2],master.notice[14,3],master.passives[14,5],"+"+string(round(5*leinstein))+" Max Health\n("+string(round(10+master.love+5*einstein))+"HP)",14,1,master.passives[14,0],master.notice[14,0]],
//[clamp(master.notice[15,1]-1,0,1),master.notice[15,2],master.notice[15,3],master.passives[15,5],"Every Minute,\n Take "+string(round(50/leinstein*100)/100)+"% Damage for "+string(5*(master.passives[15,3]+1))+" Seconds)",15,0,master.passives[15,0],master.notice[15,0]],
//[clamp(master.notice[16,1]-1,0,1),master.notice[16,2],master.notice[16,3],master.passives[16,5],"+"+string(1)+" Revive\nWith "+string(clamp(50*leinstein,0,100))+"% Health",16,1,master.passives[16,0],master.notice[16,0]],
//[clamp(master.notice[17,1]-1,0,1),master.notice[17,2],master.notice[17,3],master.passives[17,5],"+"+string(2*leinstein)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((master.criticalchance+.02*einstein)*100)+"%]",17,1,master.passives[17,0],master.notice[17,0]],
//[clamp(master.notice[18,1]-1,0,1),master.notice[18,2],master.notice[18,3],master.passives[18,5],"+"+string(10*leinstein)+"% Damage\n("+string(master.ldamage*((.1*(master.passives[18,3]+1))*einstein)*100)+"%)",18,1,master.passives[18,0],master.notice[18,0]],
//[clamp(master.notice[19,1]-1,0,1),master.notice[19,2],master.notice[19,3],master.passives[19,5],"OxyContin Spawns\nEvery 3 Minutes","OxyContin Spawns\nEvery 2 Min: 30 Sec",19,0,master.passives[19,0],master.notice[19,0]],
//[clamp(master.notice[20,1]-1,0,1),master.notice[20,2],master.notice[20,3],master.passives[20,5],"+"+string(10*leinstein)+"% Projectile Size\n("+string((master.projectilesize-1+.10*einstein)*100)+"%)",20,1,master.passives[20,0],master.notice[20,0]],
//[clamp(master.notice[21,1]-1,0,1),master.notice[21,2],master.notice[21,3],master.passives[21,5],"+"+string(5*leinstein)+"% Money Value & Frequency\n("+string((((master.lwealth+.05*leinstein))*(1+.05*(master.passives[21,3]))*einstein-1)*100)+"%)",21,1,master.passives[21,0],master.notice[21,0]],
//[clamp(master.notice[22,1]-1,0,1),master.notice[22,2],master.notice[22,3],master.passives[22,5],"Item Pickups:\n+"+string(5*leinstein)+"% Duration & Effect ("+string(((master.passives[22,3]+1)*.05*einstein)*100)+"%)",22,1,master.passives[22,0],master.notice[22,0]],
//[clamp(master.notice[23,1]-1,0,1),master.notice[23,2],master.notice[23,3],master.passives[23,5],"+"+string(10*leinstein)+"% Projectile Speed\n("+string((master.projectilespeed-1+.10*einstein)*100)+"%)",23,1,master.passives[23,0],master.notice[23,0]],
//[clamp(master.notice[24,1]-1,0,1),master.notice[24,2],master.notice[24,3],master.passives[24,5],"+"+string(floor(1*leinstein))+" Projectile Amount\n(+"+string((floor(master.passives[25,3]+1)*einstein))+")",24,1,master.passives[24,0],master.notice[24,0]],
//[clamp(master.notice[25,1]-1,0,1),master.notice[25,2],master.notice[25,3],master.passives[25,5],"-"+string((((1-(.05*(master.passives[25,3])*einstein))/(master.lvanish)))*100-(((1-(.05*(master.passives[25,3])*einstein))/(master.lvanish+.05*leinstein)))*100)+"% Enemy Eyesight\n("+string((((1-(.05*(master.passives[25,3])*einstein))/(master.lvanish+.05)))*100)+"%)",25,1,master.passives[25,0],master.notice[25,0]],
//[clamp(master.notice[26,1]-1,0,1),master.notice[26,2],master.notice[26,3],master.passives[26,5],"+2% Passives' Potency\n("+string((leinstein-1+.02)*100)+"%)",26,1,master.passives[26,0],master.notice[26,0]]
//]
if audio_is_playing(music) {
trackposition= audio_sound_get_track_position(music)
}

if updatestats=1 {
	for (i=0 ; i< array_length(weapons) ;i++) {
		if weapons[i,13]=0 and weapons[i,1]=0 {
	if weapons[i,4] >= weapons[i,5] {
				var starw = 0
				for (ii=0 ; ii< array_length(collection) ;ii++) {
					if collection[ii,15]=1 {
						starw=ii
						break
					}
				}
						var noti= instance_create_layer(room_width/2,10,"uii",obj_notification)
						//type is task
						noti.typee=5
						//set to complete
						noti.namee=master.collection[starw+i,0]
						noti.desc="Weapon Maxed!"
						noti.namee2="New Weapon Unlocked"
						noti.desc2=master.collectiontext[starw+i,2]
						var itemiddd=i+40
						if master.collection[starw+i,1]<2 {
							master.collection[starw+i,1]=2
							master.collection[starw+i,7]=-2
						}
						noti.reward=1
						noti.image=master.collection[starw+i,8]
						noti.imageind=master.collection[starw+i,11]
						noti.durationset=10
						noti.duration=10*(1000000)
						noti.clickable=1
						noti.relativeid=i
				weapons[i,13]=1
			}
		}
	}
	//}
	for (i=0 ; i< array_length(passives) ;i++) {
		if notice[i,0] < 1 {
			if passives[i,1] > 0 {
				notice[i,0] = 1 
			}
		}
		//if passives[i,7]=0 {
		if notice[i,1] < 1 {
		if passives[i,3] >= passives[i,4] {		
				var starp = 0
				for (ii=0 ; ii< array_length(collection) ;ii++) {
					if collection[ii,15]=2 {
						starp=ii
						break
					}
				}
						var noti= instance_create_layer(room_width/2,10,"uii",obj_notification)
						//type is task
						noti.typee=5
						//set to complete
						
						noti.reward=2
						noti.namee="Ability Maxed!"
						noti.desc="New Upgrade Available!"
						noti.namee2=master.collection[starp+i,0]
						noti.desc2=master.collectiontext[starp+i,2]
						//master.collection[starp+i,0]+" Unlocked"
						noti.image=master.collection[starp+i,8]
						noti.imageind=master.collection[starp+i,11]
						noti.durationset=10
						noti.duration=10*(1000000)
						noti.clickable=1
						noti.relativeid=i
				notice[i,1] = 1
				//passives[i,7] = 1
				}
			}
		//}
		//} //else {
			//passives[i,7] = 1
		//}
		
	}
	
	
	
	leinstein=1+.02*master.notice[26,2]
	lluck=1+.05*master.notice[0,2]*leinstein
	lchampion=.02*master.notice[1,2]*leinstein*lluck
	lcurse=.05*master.notice[2,2]*leinstein
	lresist=1+.05*master.notice[4,2]*leinstein
	lfaith=.02*master.notice[5,2]*leinstein
	lrange=1+.1*master.notice[6,2]*leinstein
	lfreewill=.05*master.notice[7,2]*leinstein
	lgraduate=1+.05*master.notice[8,2]*leinstein
	lheart=.5+.5*master.notice[9,2]*leinstein

	
	lheartbreak=.02*master.notice[10,2]*leinstein
	lattract=.05*master.notice[11,2]*leinstein
	lrate=1+.05*master.notice[12,2]*leinstein
	lduration=1+.05*master.notice[13,2]*leinstein
	llove=5*master.notice[14,2]*leinstein
	lrevives=1*master.notice[16,2]
	lcrit=(1+.02*master.notice[17,2]*leinstein)*lluck
	ldamage=1+.1*master.notice[18,2]*leinstein
	lsize=1+(.1*power(clamp(master.notice[20,2],0,99999),.70))*leinstein
	lwealth=1+.05*master.notice[21,2]*leinstein
	lwisdom=.05*master.notice[22,2]*leinstein
	lspeed=1+.1*master.notice[23,2]*leinstein
	lclone=1*master.notice[24,2]
	lvanish=1+.05*master.notice[25,2]*leinstein
	
	
	
	
	if passives[26,3] > 0 {
	einstein=1+(.02*passives[26,3]);
	}
	if instance_exists(obj_upgrademenu) {
		obj_upgrademenu.einstein=einstein
		obj_upgrademenu.leinstein=leinstein
	}
	
	damage=ldamage*(1+(.1*passives[18,3])*einstein); //power
	luck=lluck*(1+(.05*passives[0,3])*einstein); //bound2fortune
	attackrate=lrate*(1+(.1*passives[12,3])*einstein);
	range=lrange*(1+(.1*passives[6,3])*einstein);//fame area of effect
	projectilespeed=lspeed*(1+(.1*passives[23,3])*einstein); //wonder
	projectilesize=lsize*(1+(.1*power(clamp(passives[20,3],0,99999),.70))*einstein);//spectacle
	criticalchance=(1-(1/(1+(.02*passives[17,3]*luck*einstein)*(lcrit)))); //monster
	//criticalamount=(2+.5*lcamount)*einstein;

	criticalamount=(2*(.95+.05*clamp(master.passives[17,3],1,99999)))*einstein*((.95+.05*(clamp(master.notice[17,2],1,99999))*leinstein))
	duration=lduration*(1+(.1*passives[13,3])*einstein);//longevity

	attraction=lattract+(1+(.05*(passives[11,3]))*range*einstein);
	magnet=175*attraction
	pickuppotency=(1+lwisdom)*(1+(.05*passives[22,3])*einstein); //wisdom
	mercy=(passives[15,3]); //half damage
	resistance=1-((1-(.05*passives[4,3]*einstein))/lresist);//0none 1=invincible
	curse=(lcurse+1)*(1+.05*passives[2,3]*einstein)
	freewill=lfreewill+(.05*passives[7,3])*einstein
	faith=lfaith+(.02*passives[6,3])*einstein; //heal damage dealt
	love=0; //max health
	if passives[14,3]<5 {
		love=round((5*passives[14,3])*einstein)+llove
	} else {
		love=round((20+10*(passives[14,3]-4))*einstein)+llove
	}
	if instance_exists(yeancat) {
		yeancat.maxhealth=10+love
	} 
	//+string(floor((clamp(master.passives[9,3],0,1)+clamp(master.passives[9,3]-4,0,10000)+clamp(master.notice[9,2],0,1))*einstein+(.5*master.notice[9,2]*leinstein)))+" HP\nEvery "+string((5-clamp(master.passives[9,3],0,4))/(1+.05*master.notice[9,2]*leinstein))+" Seconds+\n("+string(floor((clamp(master.passives[9,3],0,1)+clamp(master.passives[9,3]-4,0,10000)+clamp(master.notice[9,2],0,1))*einstein+(.5*master.notice[9,2]*leinstein))/((5-clamp(master.passives[9,3],0,4))/(1+.05*master.notice[9,2]*leinstein)))+" HP/Second)",//
	heart=floor((clamp(passives[9,3],0,1)+clamp(passives[9,3]-4,0,10000)+clamp(master.notice[9,2],0,1))*einstein+lheart); //heal per second
	heartseconds=(5-clamp(passives[9,3],0,4))/(1+.05*master.notice[9,2]*leinstein)
	heartbreak=(.05*passives[10,3])*einstein*damage+lheartbreak*ldamage; //retalitory damage
	revives=passives[16,3]+lrevives; //miracle
	prescription=passives[19,3]
	wealth=(lwealth)*(1+.05*passives[21,3])*einstein //1=normal 2= twice as frequent
	if passives[3,3]>0 {
	dondasblessing=1
	} else {
	dondasblessing=1.1+.1*passives[3,3]; //damage buff when half health
	}
	//(1-(1/(1+.02*((master.passives[1,3]+1)*einstein*master.luck)+(.02*(master.notice[1,2])*leinstein*master.lluck))))*100
	champion=(1-(1/((1+(.02*(passives[1,3]))*einstein*luck)+lchampion)))//chance to dodge
	graduate=lgraduate*(1+.05*passives[8,3])*einstein; //xp mult
	wisdom=lwisdom+passives[22,3]*.05*einstein
	clone=floor(passives[24,3]*einstein)+lclone
	vanish=1-((1-(.05*passives[25,3]*einstein))/lvanish)

	
	//if einstein>0 {
		for (i=0 ; i< array_length(passives)-1 ;i++) {
			{
				if i=3 or i = 14 or i =19 or i=15 {
					passives[i,6] = passivetext2[i,passives[i,3]]
				
				} else {
					if passives[i,3]<passives[i,4] {
				passives[i,6] = passivetext[i]
				}
					
				}
			}
		}
	updatestats=0
}

if instance_exists(yeancat) {
	if global.pause=0 {
if dondadollarsprevious != dondadollars  and master.moneynumbers = 1 {
	if (floor(dondadollars)-dondadollarsprevious) > 0 {
	var money= instance_create_layer(yeancat.x,yeancat.y,"uiitop", obj_moneycount);
	money.damage=floor(dondadollars)-dondadollarsprevious
	dollarfade=1
	}
	
	
	
}
	dondadollarsprevious=dondadollars
	} else {
		global.madj=((master.speedd+20)/60)/(1+obj_terrain.playeraltitude/5000)
	}
}
//if xpbuff/xpto > dolmove {
//	dolmove+=.05
//	if dolmove>xpbuff/xpto {
//		dolmove=xpbuff/xpto
//	}
//} else {
//	if dolmove != xpbuff/xpto {
//		dolmove-=.05
//		if dolmove<xpbuff/xpto {
//		dolmove=xpbuff/xpto
//	}
//	}
//}


if xpprev!=xp {
	xpprev=xp
	if xp!=0 {
		xpcount=2
	}
}
if xpcount>0 {
	xpcount-=.01;
}
if xpbuff<xp {
	xpbuff+=.05*(1+(xp-xpbuff)/2)
	if xpbuff>xp {
		xpbuff=xp;
	}
}
if levellast!=level {
	levellast=level
}


	//show in collection
for (var tt=0; tt<array_length(tasks); tt++) {
	//check not completed
//	if tasks[tt,3] = 0 {
			//check is passive
			if tasks[tt,6] = 2 {
				//check collection is not discovered
			if collection[tasks[tt,7]+15,1] <1 {
				//check that task is visible
				if tasks[tt,5] = 1 {
			
				collection[tasks[tt,7]+15,1]=1
			}
			}
			//check is weapon
			if tasks[tt,6] = 1 {
				//check collection is not discovered
				if collection[tasks[tt,7]+40,1] <1 {
				//check that task is visible
				if tasks[tt,5] = 1 {
				collection[tasks[tt,7]+40,1]=1
			}
			}
			}
			//check is music
			if tasks[tt,6] = 5 {
				//check collection is not discovered
				if collection[tasks[tt,7]+78,1] <1 {
				//check that task is visible
				if tasks[tt,5] = 1 {
				collection[tasks[tt,7]+78,1]=1
			}
			}
			}
		}
}
//}

//TASK COMPLETE
if ti!=tiprev {// only every second
check_tasks()//this script runs though the tasks and checks if requirements are met it will need to be optimized and expanded to handle new task ovehaul which will allow for randomly generated tasks.
}

//PLAYTIME
playtimegame=playtime+ti
overallkillsgame=overallkills+killcount
if killcount>recordkill {
	recordkill=killcount
}
chartotalkillgame[charselect]=chartotalkill[charselect]+killcount

//character level record
if master.charrecordlevel[master.charselect]<master.level {
	master.charrecordlevel[master.charselect]=master.level
}
//character kill record
if master.charrecordkill[master.charselect]<master.killcount {
	master.charrecordkill[master.charselect]=master.killcount
}
//character time record
if master.charrecordtime[master.charselect]<master.ti {
	master.charrecordtime[master.charselect]=master.ti
}


charselectlast=charselect

if instance_exists(obj_jayarnoldlogo) {
	if obj_jayarnoldlogo.playing=1 {
		if audio_is_playing(music) {
			audio_pause_all();
		}
	} else {
		if !audio_is_playing(music) {
			audio_resume_all();
		}
	}
	
} else {
	if start=0 {
	if !audio_is_playing(music) {
			audio_resume_all();
		}
	}
}

File: Step_2.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if instance_exists(obj_pausemenu) or instance_exists(obj_levelup) or instance_exists(obj_pickupq) or instance_exists(obj_reviveq) {
			if master.camscale>1 {
	master.camscale=(master.camscale*50+1)/51
} else {
	master.camscale=1
}
}

if lower>=700 {
	startmusic=0;
			if instance_exists(enemy) {
		with (enemy) {
			instance_destroy()
		}
	}
	if instance_exists(obj_weaponitem) {
		with (obj_weaponitem) {
			instance_destroy()
		}
	}
	if instance_exists(obj_passiveitem) {
		with (obj_passiveitem) {
			instance_destroy()
		}
	}
		if instance_exists(obj_item) {
			with (obj_item) {
				instance_destroy()
			}
		}

	

if !instance_exists(restar) {
	audio_stop_all();
	master.camscale=1;
	instance_create_layer(x,y,"uii",restar)
} else {
	if restar.falling !=-1 {
		if restar.falling =1 {
		if lower>1250 {
		lower=1250
	} else {
		lower=(lower*20+1250)/21
	}
		} else {
			if lower>1250 {
		lower=1250
	} else {
		lower=(lower*20+1250)/21
	}
		}
	} else {
		if lower>2000 {
		lower=2000
	} else {
		lower+=1
	}
	}
}
	
} else {
	if lower>1 {
		if instance_exists(enemy) {
		 {
			direction=point_direction(room_width/2,room_height/2,x,y)
			speed+=.3*(global.room_speed_set/1000000*delta_time)
		}
	}
	if instance_exists(obj_weaponitem) {
		with (obj_weaponitem) {
			direction=point_direction(room_width/2,room_height/2,x,y)
			speed+=.3*(global.room_speed_set/1000000*delta_time)
		}
	}
	if instance_exists(obj_passiveitem) {
		with (obj_passiveitem) {
			direction=point_direction(room_width/2,room_height/2,x,y)
			speed+=.3*(global.room_speed_set/1000000*delta_time)
		}
	}
		if instance_exists(obj_item) {
		with (obj_item) {
			direction=point_direction(room_width/2,room_height/2,x,y)
			speed+=.3*(global.room_speed_set/1000000*delta_time)
		}
		}
			if master.camscale>1 {
	master.camscale=(master.camscale*50+1)/51
} else {
	master.camscale=1
}
	}
}

// Ensure to update global.last_frame_time at the end of each frame
global.last_frame_time = current_time;


File: Draw_0.gml
Code:
/// @description Insert description here
// You can write your code in this editor
/// @description Insert description here
// You can write your code in this editor

if instance_exists(obj_jayarnoldlogo) {
	if obj_jayarnoldlogo.playing=1 {
		exit
	}
}

if instance_exists(obj_levelup) or instance_exists(obj_pickupq) or instance_exists(obj_reviveq) or instance_exists(obj_pausemenu) {
	
	var xxx=camera_get_view_x(cam)
	var yyy=camera_get_view_y(cam)
	

draw_set_font(Font2);
//draw_text(x,y-20,"vert: "+string(vert));
//draw_text(x,y+20,"horz: "+string(horz));
var gwidth = display_get_gui_width()
var gheight = display_get_gui_height()


if mainmenu = 0 {
	
	//slots
	//weapons
	if instance_exists(yeancat) {
	for (i=1; i<clamp(master.wepcount+1,clamp(maxweapons,6,999)+1,999); i++) {
		
		draw_sprite_ext(spr_barslot,0,xxx+sss*(scaleg*((i-1) % 6)*(gwidth/2-scaleg*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+scaleg*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5),yyy+sss*(scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui),scaleg*sss*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*sss*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,0,c_white,1);
		if weap[i-1] > -1 {
		draw_sprite_ext(weapons[weap[i-1],11],0,xxx+sss*(scaleg*((i-1) % 6)*(gwidth/2-scaleg*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+scaleg*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5),yyy+sss*(scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui),scaleg*sss*.85*100/(max(sprite_get_width(weapons[weap[i-1],11]),sprite_get_height(weapons[weap[i-1],11])))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*sss*.85*100/(max(sprite_get_width(weapons[weap[i-1],11]),sprite_get_height(weapons[weap[i-1],11])))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,0,c_white,1);
		draw_set_font(Font2)
		draw_set_color(c_black)
		draw_set_halign(fa_center)
		draw_set_valign(fa_middle);
		draw_set_alpha(1);
		//draw_text_transformed(((i-1) % 6)*(gwidth/2-150)/6+50,60+floor((i-1)/6)*110,string(weapons[i,4]),5/(4+string_length(string(weapons[i,4]))),5/(4+string_length(string(weapons[i,4]))),0)
		draw_set_color(c_white);
		draw_text_transformed(xxx+sss*(scaleg*((i-1) % 6)*(gwidth/2-scaleg*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+scaleg*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5),yyy+sss*(scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui),string(weapons[weap[i-1],4]),scaleg*sss*5/(4+string_length(string(weapons[weap[i-1],4])))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*sss*5/(4+string_length(string(weapons[weap[i-1],4]))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6),0)
		//draw_text_transformed(((i-1) % 6)*(gwidth/2-160)/6+40,50+floor((i-1)/6)*110,string(weap[i-1]),6/(4+string_length(string(weapons[i,4]))),5/(4+string_length(string(weapons[i,4]))),0)
		}
		if i>maxweapons {
			draw_sprite_ext(spr_barslot,1,xxx+sss*(scaleg*((i-1) % 6)*(gwidth/2-scaleg*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+scaleg*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5),yyy+sss*(scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui),scaleg*sss*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*sss*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,0,c_white,1);
		}
		}
		//passives
	for (i=1; i<clamp(array_length(master.pass)+1,clamp(6,6,999)+1,999); i++) {
		
		draw_sprite_ext(spr_barslot,0,xxx+sss*(gwidth-(scaleg*((i-1) % 6)*(gwidth*1/2-(scaleg)*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+(scaleg)*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5)),yyy+sss*(scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui),scaleg*sss*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*sss*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,0,c_white,1);
		if pass[i-1] > -1 {
		draw_sprite_ext(passives[pass[i-1],5],0,xxx+sss*(gwidth-(scaleg*((i-1) % 6)*(gwidth/2-(scaleg)*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+(scaleg)*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5)),yyy+sss*(scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui),scaleg*sss*.85*100/(max(sprite_get_width(passives[pass[i-1],5]),sprite_get_height(passives[pass[i-1],5])))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*sss*.85*100/(max(sprite_get_width(passives[pass[i-1],5]),sprite_get_height(passives[pass[i-1],5])))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,0,c_white,1);
		draw_set_font(Font2)
		draw_set_color(c_black)
		draw_set_halign(fa_center)
		draw_set_valign(fa_middle);
		draw_set_alpha(1);
		//draw_text_transformed(((i-1) % 6)*(gwidth/2-150)/6+50,60+floor((i-1)/6)*110,string(weapons[i,4]),5/(4+string_length(string(weapons[i,4]))),5/(4+string_length(string(weapons[i,4]))),0)
		draw_set_color(c_white);
		draw_text_transformed(xxx+sss*(gwidth-(scaleg*((i-1) % 6)*(gwidth/2-(scaleg)*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+(scaleg)*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5)),yyy+sss*(scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui),string(passives[pass[i-1],3]),scaleg*sss*5/(4+string_length(string(passives[pass[i-1],4])))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*sss*5/(4+string_length(string(passives[pass[i-1],3]))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6),0)
		//draw_text_transformed(((i-1) % 6)*(gwidth/2-160)/6+40,50+floor((i-1)/6)*110,string(weap[i-1]),6/(4+string_length(string(weapons[i,4]))),5/(4+string_length(string(weapons[i,4]))),0)
		}
		}
	}
	

//healthbar
if instance_exists(yeancat) {
	draw_set_font(Font1);
			var nxxx= xxx+sss*(-power(clamp(2*(scaleg-.5),0,1),2.08)*29.7*4*clamp(.35-abs(scaleg-.75),0,.35)+(1920/(2)-power(clamp(.25-abs(scaleg-.75),0,.25),.28)*123.6/(clamp(abs(scaleg-.75),.1,.25)*18.70)-sqr(1/scaleg)*16-(scaleg)*91*(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3))-(1/scaleg)*280))
	var nxxxx= room_width-nxxx
	draw_healthbar(nxxx,yyy+scaleg*sss*(8*(8-(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/7-200+200*dropgui),nxxxx,yyy+(scaleg)*sss*(90*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-1-200+200*dropgui),yeancat.healthh/yeancat.maxhealth*100,c_black,c_red,make_color_hsv(color_get_hue(c_green)*(1-clamp((yeancat.maxhealth-10)/400,0,1))+color_get_hue(c_lime)*(clamp((yeancat.maxhealth-10)/400,0,1)),color_get_saturation(c_green)*(1-clamp((yeancat.maxhealth-10)/400,0,1))+color_get_saturation(c_lime)*clamp((yeancat.maxhealth-10)/400,0,1),color_get_value(c_green)*(1-clamp((yeancat.maxhealth-10)/400,0,1))+color_get_value(c_lime)*(clamp((yeancat.maxhealth-10)/400,0,1))),0,1,1);
draw_set_color(c_black)
draw_set_valign(fa_top);
draw_text_transformed(xxx+sss*(1920/2-280+3),yyy+scaleg*sss*(7-3+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*sss,scaleg*sss,0)
draw_text_transformed(xxx+sss*(1920/2-280+3),yyy+scaleg*sss*(7+3+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*sss,scaleg*sss,0)
draw_text_transformed(xxx+sss*(1920/2-280-3),yyy+scaleg*sss*(7-3+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*sss,scaleg*sss,0)
draw_text_transformed(xxx+sss*(1920/2-280-3),yyy+scaleg*sss*(7+3+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*sss,scaleg*sss,0)
draw_set_color(c_white)
draw_text_transformed(xxx+sss*(1920/2-280),yyy+scaleg*sss*(7+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*sss,scaleg*sss,0)
//debug
//draw_text_transformed(xxx-300+sss*(1920/2-280),yyy+scaleg*sss*(7+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(debugvar),scaleg*sss,scaleg*sss,0)
//draw_text_transformed(xxx+300+sss*(1920/2-280),yyy+scaleg*sss*(7+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(debugvar2),scaleg*sss,scaleg*sss,0)

}

var killc = killcount
var centr=-(100-clamp(abs(lower-700)/2,0,100))
draw_set_alpha(1);
draw_set_font(Font3);
draw_set_color(c_black)
draw_set_valign(fa_top);
draw_set_halign(fa_right);
draw_text_transformed(xxx+sss*(1920/2-280+3)/scaleg,yyy+scaleg*(centr+(280-.4*abs(lower-700))+sss*(-3-205+300*dropgui)),string(killc),scaleg*1/sss,scaleg*1/sss,0)
draw_text_transformed(xxx+sss*(1920/2-280+3)/scaleg,yyy+scaleg*(centr+(280-.4*abs(lower-700))+sss*(+3-205+300*dropgui)),string(killc),scaleg*1/sss,scaleg*1/sss,0)
draw_text_transformed(xxx+sss*(1920/2-280-3)/scaleg,yyy+scaleg*(centr+(280-.4*abs(lower-700))+sss*(+3-205+300*dropgui)),string(killc),scaleg*1/sss,scaleg*1/sss,0)
draw_text_transformed(xxx+sss*(1920/2-280-3)/scaleg,yyy+scaleg*(centr+(280-.4*abs(lower-700))+sss*(-3-205+300*dropgui)),string(killc),scaleg*1/sss,scaleg*1/sss,0)
draw_set_color(c_white)
draw_text_transformed(xxx+sss*(1920/2-280)/scaleg,yyy+scaleg*(centr+(280-.4*abs(lower-700))+sss*(-205+300*dropgui)),string(killc),scaleg*1/sss,scaleg*1/sss,0)
draw_sprite_ext(spr_killcount,0,xxx+sss*(1920/2-280)/scaleg+30+string_length(string(killc))*15,yyy+scaleg*(centr+(280-.4*abs(lower-700))+sss*(-170+300*dropgui)),scaleg*.75*sss,scaleg*.75*sss,0,c_white,1)
draw_sprite_ext(spr_killcount,1,xxx+sss*(1920/2-280)/scaleg+30+string_length(string(killc))*15,yyy+scaleg*(centr+(280-.4*abs(lower-700))+sss*(-170+300*dropgui)),scaleg*.75*sss,scaleg*.75*sss,0,c_white,0+clamp(kps/1000,0,1))


////xpbar
//if instance_exists(yeancat) {
//	draw_healthbar(xxx+0,yyy+sss*(750+200-200*dropgui),xxx+sss*(gwidth),yyy+sss*(800+200-200*dropgui),xpbuff/xpto*100,c_black,c_blue,c_aqua,0,1,1)
//	draw_set_font(Font2);
	
//	draw_set_valign(fa_middle);
//	//left
//	draw_set_color(c_blue)
//	draw_set_alpha(1-(sqr(1-(xpbuff/xpto*clamp(xpcount,0,1)*power(clamp(abs(gwidth/2-clamp((gwidth-250)*(xpbuff/xpto),0,gwidth-250))/100,0,1),3)))))
//	draw_text_transformed(xxx+sss*clamp((gwidth-250)*(xpbuff/xpto),0,gwidth-250)*(xpbuff/xpto)+(1-xpbuff/xpto)*(gwidth*xpbuff/xpto),yyy+sss*(776+200-200*dropgui),string(round(xpbuff)),sss*(.2+xpcount/1.8)*1.1,sss*(.2+xpcount/1.8)*1.1,0)
//	draw_set_color(make_color_hsv(color_get_hue(c_aqua)*(xpbuff/xpto)+color_get_hue(c_teal)*(1-xpbuff/xpto),color_get_saturation(c_aqua)*(xpbuff/xpto)+color_get_saturation(c_teal)*(1-xpbuff/xpto),color_get_value(c_aqua)*(xpbuff/xpto)+color_get_value(c_teal)*(1-xpbuff/xpto)))
//	draw_text_transformed(xxx+sss*clamp((gwidth-250)*(xpbuff/xpto),0,gwidth-250)*(xpbuff/xpto)+(1-xpbuff/xpto)*(gwidth*xpbuff/xpto),yyy+sss*(776+200-200*dropgui),string(round(xpbuff)),sss*(.2+xpcount/1.8)*1.05,sss*(.2+xpcount/1.8)*1.05,0)
//	draw_set_color(c_white)
//	draw_text_transformed(xxx+sss*clamp((gwidth-250)*(xpbuff/xpto),0,gwidth-250)*(xpbuff/xpto)+(1-xpbuff/xpto)*(gwidth*xpbuff/xpto),yyy+sss*(776+200-200*dropgui),string(round(xpbuff)),sss*(.2+xpcount/1.8),sss*(.2+xpcount/1.8),0)
//	//right
//	draw_set_alpha(clamp(xpcount,0,1))
//	draw_set_color(c_blue)
//	draw_text_transformed(xxx+sss*clamp(gwidth-250,0,gwidth-250),yyy+sss*(776+200-200*dropgui),string(round(xpto)),sss*(.2+xpcount/1.8)*1.1,sss*(.2+xpcount/1.8)*1.1,0)
//	draw_set_color(make_color_hsv(color_get_hue(c_aqua)*(xpbuff/xpto)+color_get_hue(c_teal)*(1-xpbuff/xpto),color_get_saturation(c_aqua)*(xpbuff/xpto)+color_get_saturation(c_teal)*(1-xpbuff/xpto),color_get_value(c_aqua)*(xpbuff/xpto)+color_get_value(c_teal)*(1-xpbuff/xpto)))
//	draw_text_transformed(xxx+sss*clamp(gwidth-250,0,gwidth-250),yyy+sss*(776+200-200*dropgui),string(round(xpto)),sss*(.2+xpcount/1.8)*1.05,sss*(.2+xpcount/1.8)*1.05,0)
//	draw_set_color(c_white)
//	draw_text_transformed(xxx+sss*clamp(gwidth-250,0,gwidth-250),yyy+sss*(776+200-200*dropgui),string(round(xpto)),sss*(.2+xpcount/1.8),sss*(.2+xpcount/1.8),0)
//	draw_set_alpha(1);
//	draw_set_font(Font5);
//	draw_set_valign(fa_middle);
//	draw_set_color(c_black)
//	draw_text_transformed_color(xxx+sss*(1920/2-765+5+70*clamp(sqrt(levelheat/1000000)/10,0,1)),yyy+sss*(750+200-200*dropgui+5-40*clamp(sqrt(levelheat/1000000)/10,0,1)),"LEVEL "+string(level),sss*lvlscal*1.01,sss*lvlscal*1.01,0,lc1,lc2,lc3,lc4,lca);
//	draw_text_transformed_color(xxx+sss*(1920/2-765-5+70*clamp(sqrt(levelheat/1000000)/10,0,1)),yyy+sss*(750+200-200*dropgui+5-40*clamp(sqrt(levelheat/1000000)/10,0,1)),"LEVEL "+string(level),sss*lvlscal*1.01,sss*lvlscal*1.01,0,lc1,lc2,lc3,lc4,lca);
//	draw_text_transformed_color(xxx+sss*(1920/2-765-5+70*clamp(sqrt(levelheat/1000000)/10,0,1)),yyy+sss*(750+200-200*dropgui-5-40*clamp(sqrt(levelheat/1000000)/10,0,1)),"LEVEL "+string(level),sss*lvlscal*1.01,sss*lvlscal*1.01,0,lc1,lc2,lc3,lc4,lca);
//	draw_text_transformed_color(xxx+sss*(1920/2-765+5+70*clamp(sqrt(levelheat/1000000)/10,0,1)),yyy+sss*(750+200-200*dropgui-5-40*clamp(sqrt(levelheat/1000000)/10,0,1)),"LEVEL "+string(level),sss*lvlscal*1.01,sss*lvlscal*1.01,0,lc1,lc2,lc3,lc4,lca);

//	draw_text_transformed_color(xxx+sss*(1920/2-765+5+70*clamp(sqrt(levelheat/1000000)/10,0,1)),yyy+sss*(750+200-200*dropgui-5-40*clamp(sqrt(levelheat/1000000)/10,0,1)),"LEVEL "+string(level),sss*lvlscal*.99,sss*lvlscal*.99,0,make_color_hsv(255-color_get_hue(lc4),255*clamp((levelheat/1000000)/10,0,1),255-color_get_value(lc4)),make_color_hsv(255-color_get_hue(lc3),255*clamp((levelheat/1000000)/10,0,1),255-color_get_value(lc3)),make_color_hsv(255-color_get_hue(lc2),255*clamp((levelheat/1000000)/10,0,1),255-color_get_value(lc2)),make_color_hsv(255-color_get_hue(lc1),255*clamp((levelheat/1000000)/10,0,1),255-color_get_value(lc1)),1);
//draw_set_valign(fa_top);
	
//}
//draw_set_font(Font1);

//if hour<10 {
//var stringhour = "0"+string(hour);
//} else {
//	var stringhour = string(hour);
//}

//if minute<10 {
//var stringminute = "0"+string(minute);
//} else {
//	var stringminute = string(minute);
//}

//if second<10 {
//var stringsecond = "0"+string(second);
//} else {
//	var stringsecond = string(second);
//}

//draw_set_color(c_black)
//draw_text(xxx+sss*(1920/2-278+3),yyy+sss*(756+200-200*dropgui-3-clamp(lower*.75,0,350)),stringhour+":"+stringminute+":"+stringsecond)
//draw_text(xxx+sss*(1920/2-278+3),yyy+sss*(756+200-200*dropgui+3-clamp(lower*.75,0,350)),stringhour+":"+stringminute+":"+stringsecond)
//draw_text(xxx+sss*(1920/2-278-3),yyy+sss*(756+200-200*dropgui-3-clamp(lower*.75,0,350)),stringhour+":"+stringminute+":"+stringsecond)
//draw_text(xxx+sss*(91920/2-278-3),yyy+sss*(756+200-200*dropgui-3-clamp(lower*.75,0,350)),stringhour+":"+stringminute+":"+stringsecond)
//draw_set_color(c_white)
//draw_text(xxx+sss*(1920/2-278),yyy+sss*(756+200-200*dropgui-clamp(lower*.75,0,350)),stringhour+":"+stringminute+":"+stringsecond)


//if !instance_exists(obj_levelup) and !instance_exists(obj_pickupq) {
//draw_set_alpha(.4)
//draw_set_color(c_black);
//if global.pause=1 {
//	draw_rectangle(xxx+0,yyy+0,sss*room_width,sss*room_height,0)
//}
//}
//draw_set_alpha(1);


//}


//if loading>0 {
//	draw_set_alpha(clamp(loading,0,1))
//	draw_set_color(c_black);
//		draw_rectangle(xxx+0,yyy+0,sss*(2000),sss*(1500),0)
//}

//draw_set_alpha(1);
//	draw_set_color(c_white);
//	draw_set_font(Font3);
//	draw_text(joystickx,joysticky,string(joystickon))
//joystick

//draw_set_font(Font1);
}
} else {
if joystickon=1 and global.pause=0 {

	draw_sprite_ext(spr_joystick,0,joystickx,joysticky,joysticksize*camscale,joysticksize*camscale,0,c_white,.75);
	draw_sprite_ext(spr_joystick,0,joystickx+lengthdir_x(master.joydist,master.joyangle)*camscale*joysticksize,joysticky+lengthdir_y(master.joydist,master.joyangle)*camscale*joysticksize,joysticksize*camscale/2,joysticksize*camscale/2,0,c_white,1);
	
}
}
if instance_exists(obj_terrain) {
if arrowright=1 {
		draw_sprite_ext(spr_arrowindicator,0,room_width/2+820*camscale,room_height/2,.33+(0.5 * sin(2 * pi * osc / 5) + 0.8)/5*1,.33+(0.5 * sin(2 * pi * osc / 5) + 0.8)/5*1,0,c_white,.35-clamp(obj_terrain.playeraltitude/40000,0,1)*.35)
	}
	if arrowleft=1 {
		draw_sprite_ext(spr_arrowindicator,0,room_width/2-820*camscale,room_height/2,-.33-(0.5 * sin(2 * pi * osc / 5) + 0.8)/5*1,.33+(0.5 * sin(2 * pi * osc / 5) + 0.8)/5*1,0,c_white,.35-clamp(obj_terrain.playeraltitude/40000,0,1)*.35)
	}
}



draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_top);










File: Draw_64.gml
Code:
/// @description Insert description here
// You can write your code in this editor

if instance_exists(obj_jayarnoldlogo) {
	if obj_jayarnoldlogo.playing=1 {
		exit
	}
}

if mainmenu=1 and !instance_exists(obj_levelselect) {
gwidth = display_get_gui_width()
gheight = display_get_gui_height()

}
if mainmenu = 0 {
gwidth = display_get_gui_width()
gheight = display_get_gui_height()
if !instance_exists(obj_levelup) {
		if !instance_exists(obj_pausemenu) {
			draw_set_font(Font2);
			var killc = killcount
var alpp = 1
draw_set_alpha(1);
if instance_exists(obj_pickupq) or instance_exists(obj_reviveq) {
	draw_set_alpha(.1);
	alpp=.1
}
	if !instance_exists(obj_pickupq) {
	if !instance_exists(obj_reviveq) {
draw_set_font(Font3);
draw_set_color(c_black)
draw_set_valign(fa_top);
draw_set_halign(fa_right);

var centr=-(100-clamp(abs(lower-700)/2,0,100))
if !instance_exists(restar) {

draw_text_transformed((1920/2-290+3),-slidegui*300*camscale+scaleg*(centr+(350-4/8*clamp(abs(lower-700),0,920))-3-195+300*dropgui),string(killc),scaleg*.4,scaleg*.4,0)
draw_text_transformed((1920/2-290+3),-slidegui*300*camscale+scaleg*(centr+(350-4/8*clamp(abs(lower-700),0,920))+3-195+300*dropgui),string(killc),scaleg*.4,scaleg*.4,0)
draw_text_transformed((1920/2-290-3),-slidegui*300*camscale+scaleg*(centr+(350-4/8*clamp(abs(lower-700),0,920))+3-195+300*dropgui),string(killc),scaleg*.4,scaleg*.4,0)
draw_text_transformed((1920/2-290-3),-slidegui*300*camscale+scaleg*(centr+(350-4/8*clamp(abs(lower-700),0,920))-3-195+300*dropgui),string(killc),scaleg*.4,scaleg*.4,0)
draw_set_color(c_white)
draw_text_transformed((1920/2-290),-slidegui*300*camscale+scaleg*(centr+(350-4/8*clamp(abs(lower-700),0,920))-195+300*dropgui),string(killc),scaleg*.4,scaleg*.4,0)
draw_sprite_ext(spr_killcount,0,(1920/2-280)+30+string_length(string(killc))*15,-slidegui*300*camscale+scaleg*(centr+(350-4/8*clamp(abs(lower-700),0,920))-170+300*dropgui),scaleg*.75,scaleg*.75,0,c_white,alpp)
draw_sprite_ext(spr_killcount,1,(1920/2-280)+30+string_length(string(killc))*15,-slidegui*300*camscale+scaleg*(centr+(350-4/8*clamp(abs(lower-700),0,920))-170+300*dropgui),scaleg*.75,scaleg*.75,0,c_white,0+clamp(kps/1000,0,alpp))

} else {
	//-73*(restar.stretchy-1)
		if restar.page=0 {
			if restar.xptime<restar.xplength {
	draw_text_transformed((1920/2-290+3),-slidegui*300*camscale+centr-(clamp((-restar.falling)+1,0,1))*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))-3-195+300*1.00,string(killc),.4,.4,0)
draw_text_transformed((1920/2-290+3),-slidegui*300*camscale+centr-(clamp((-restar.falling)+1,0,1))*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))+3-195+300*1.00,string(killc),.4,.4,0)
draw_text_transformed((1920/2-290-3),-slidegui*300*camscale+centr-(clamp((-restar.falling)+1,0,1))*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))+3-195+300*1.00,string(killc),.4,.4,0)
draw_text_transformed((1920/2-290-3),-slidegui*300*camscale+centr-(clamp((-restar.falling)+1,0,1))*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))-3-195+300*1.00,string(killc),.4,.4,0)
draw_set_color(c_white)
draw_text_transformed((1920/2-290),-slidegui*300*camscale+centr-(clamp((-restar.falling)+1,0,1))*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))-195+300*1.00,string(killc),.4,.4,0)
draw_sprite_ext(spr_killcount,0,(1920/2-280)+30+string_length(string(killc))*15,-slidegui*300*camscale+centr-(clamp((-restar.falling)+1,0,1))*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))-170+300*1.00,.75,.75,0,c_white,alpp)
draw_sprite_ext(spr_killcount,1,(1920/2-280)+30+string_length(string(killc))*15,-slidegui*300*camscale+centr-(clamp((-restar.falling)+1,0,1))*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))-170+300*2*(dropgui+(restar.stretchy-1))*(restar.stretchy-1),.75,.75,0,c_white,0+clamp(kps/1000,0,alpp))
			} else {
				draw_text_transformed((1920/2-290+3),-slidegui*300*camscale-(clamp((room_height/2-restar.y)/500,0,1))*500+centr-1*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))-3-195+300*1.00,string(killc),.4,.4,0)
draw_text_transformed((1920/2-290+3),-slidegui*300*camscale-(clamp((room_height/2-restar.y)/500,0,1))*500+centr-1*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))+3-195+300*1.00,string(killc),.4,.4,0)
draw_text_transformed((1920/2-290-3),-slidegui*300*camscale-(clamp((room_height/2-restar.y)/500,0,1))*500+centr-1*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))+3-195+300*1.00,string(killc),.4,.4,0)
draw_text_transformed((1920/2-290-3),-slidegui*300*camscale-(clamp((room_height/2-restar.y)/500,0,1))*500+centr-1*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))-3-195+300*1.00,string(killc),.4,.4,0)
draw_set_color(c_white)
draw_text_transformed((1920/2-290),-slidegui*300*camscale-(clamp((room_height/2-restar.y)/500,0,1))*500+centr-1*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))-195+300*1.00,string(killc),.4,.4,0)
draw_sprite_ext(spr_killcount,0,(1920/2-280)+30+string_length(string(killc))*15,-slidegui*300*camscale-(clamp((room_height/2-restar.y)/500,0,1))*500+centr-1*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))-170+300*1.00,.75,.75,0,c_white,alpp)
draw_sprite_ext(spr_killcount,1,(1920/2-280)+30+string_length(string(killc))*15,-slidegui*300*camscale-(clamp((room_height/2-restar.y)/500,0,1))*500+centr-1*73*(restar.stretchy-1)+(350-4/8*clamp(abs(lower-700),0,920))-170+300*2*(dropgui+(restar.stretchy-1))*(restar.stretchy-1),.75,.75,0,c_white,0+clamp(kps/1000,0,alpp))

			}
		}
}
			if !instance_exists(restar) {
	
			

//draw_text(x,y-20,"vert: "+string(vert));
//draw_text(500,500,"camscale: "+string(camscale));





//	//healthbar
//	if instance_exists(yeancat) {
//			var nxxx= (1920/(2)-power(clamp(.25-abs(scaleg-.75),0,.25),.28)*123.6/(clamp(abs(scaleg-.75),.1,.25)*18.70)-sqr(1/scaleg)*16-(scaleg)*91*(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3))-(1/scaleg)*280)
//	var nxxxx= display_get_gui_width()-nxxx
//	draw_set_halign(fa_center)
//draw_set_alpha(1);
//	draw_set_font(Font1);
//	draw_healthbar(nxxx,scaleg*(8*(8-(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/7-200+200*dropgui),nxxxx,scaleg*(90*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-1-200+200*dropgui),yeancat.healthh/yeancat.maxhealth*100,c_black,c_red,make_color_hsv(color_get_hue(c_green)*(1-clamp((yeancat.maxhealth-10)/400,0,1))+color_get_hue(c_lime)*(clamp((yeancat.maxhealth-10)/400,0,1)),color_get_saturation(c_green)*(1-clamp((yeancat.maxhealth-10)/400,0,1))+color_get_saturation(c_lime)*clamp((yeancat.maxhealth-10)/400,0,1),color_get_value(c_green)*(1-clamp((yeancat.maxhealth-10)/400,0,1))+color_get_value(c_lime)*(clamp((yeancat.maxhealth-10)/400,0,1))),0,1,1);
//draw_set_color(c_black)
//draw_set_valign(fa_top);
//draw_text_transformed((1920/2-280+3),scaleg*(7-3+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*1,scaleg*1,0)
//draw_text_transformed((1920/2-280+3),scaleg*(7+3+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*1,scaleg*1,0)
//draw_text_transformed((1920/2-280-3),scaleg*(7-3+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*1,scaleg*1,0)
//draw_text_transformed((1920/2-280-3),scaleg*(7+3+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*1,scaleg*1,0)
//draw_set_color(c_white)
//draw_text_transformed((1920/2-280),scaleg*(7+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*1,scaleg*1,0)
//}


	//slots
	//weapons
	if instance_exists(yeancat) {
	for (i=1; i<clamp(master.wepcount+1,clamp(maxweapons,6,999)+1,999); i++) {
		//+clamp(slidegui-.5,0,.5)*2*(3+scaleg*50)
		//*(1-clamp(slidegui-.5,0,.5)*2)+clamp(slidegui-.5,0,.5)*2*((scaleg*90)*(i)-20)
		draw_sprite_ext(spr_barslot,0,(scaleg*((i-1) % 6)*(gwidth/2-scaleg*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+scaleg*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5),(scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui),scaleg*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,0,c_white,1);
		
		if weap[i-1] > -1 {
		draw_sprite_ext(weapons[weap[i-1],11],0,(scaleg*((i-1) % 6)*(gwidth/2-scaleg*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+scaleg*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5),(scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui),scaleg*.85*100/(max(sprite_get_width(weapons[weap[i-1],11]),sprite_get_height(weapons[weap[i-1],11])))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*.85*100/(max(sprite_get_width(weapons[weap[i-1],11]),sprite_get_height(weapons[weap[i-1],11])))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,0,c_white,1);
		
		draw_set_font(Font2)
		draw_set_color(c_black)
		draw_set_halign(fa_center)
		draw_set_valign(fa_middle);
		draw_set_alpha(1);
		//draw_text_transformed(((i-1) % 6)*(gwidth/2-150)/6+50,60+floor((i-1)/6)*110,string(weapons[i,4]),5/(4+string_length(string(weapons[i,4]))),5/(4+string_length(string(weapons[i,4]))),0)
		draw_set_color(c_white);
		draw_text_transformed(((i-1) % 6)*(gwidth/2-scaleg*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+scaleg*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5,scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui,string(weapons[weap[i-1],4]),scaleg*5/(4+string_length(string(weapons[weap[i-1],4])))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*5/(4+string_length(string(weapons[weap[i-1],4]))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6),0)
		//draw_text_transformed(((i-1) % 6)*(gwidth/2-160)/6+40,50+floor((i-1)/6)*110,string(weap[i-1]),6/(4+string_length(string(weapons[i,4]))),5/(4+string_length(string(weapons[i,4]))),0)
		}
		if i>maxweapons {
			draw_sprite_ext(spr_barslot,1,scaleg*((i-1) % 6)*(gwidth/2-scaleg*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+scaleg*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5,scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui,scaleg*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,0,c_white,1);
		}
		}
		//passives
	for (i=1; i<clamp(array_length(master.pass)+1,clamp(6,6,999)+1,999); i++) {
		draw_sprite_ext(spr_barslot,0,(gwidth-(scaleg*((i-1) % 6)*(gwidth*1/2-(scaleg)*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+(scaleg)*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5)),(scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui),scaleg*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,0,c_white,1);
		
		draw_sprite_ext(spr_barslot,0,gwidth-(scaleg*((i-1) % 6)*(gwidth/2-scaleg*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+scaleg*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5),scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui,scaleg*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*.85*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,0,c_white,1);
		if pass[i-1] > -1 {
		draw_sprite_ext(passives[pass[i-1],5],0,gwidth-(scaleg*((i-1) % 6)*(gwidth/2-scaleg*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+scaleg*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5),scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui,scaleg*.85*100/(max(sprite_get_width(passives[pass[i-1],5]),sprite_get_height(passives[pass[i-1],5])))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*.85*100/(max(sprite_get_width(passives[pass[i-1],5]),sprite_get_height(passives[pass[i-1],5])))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,0,c_white,1);
		draw_set_font(Font2)
		draw_set_color(c_black)
		draw_set_halign(fa_center)
		draw_set_valign(fa_middle);
		draw_set_alpha(1);
		//draw_text_transformed(((i-1) % 6)*(gwidth/2-150)/6+50,60+floor((i-1)/6)*110,string(weapons[i,4]),5/(4+string_length(string(weapons[i,4]))),5/(4+string_length(string(weapons[i,4]))),0)
		draw_set_color(c_white);
		draw_text_transformed(gwidth-(scaleg*((i-1) % 6)*(gwidth/2-scaleg*50-90*(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/6+3+scaleg*50*(6-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/5),scaleg*(50+floor((i-1)/6)*90)*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-200+200*dropgui,string(passives[pass[i-1],3]),scaleg*5/(4+string_length(string(passives[pass[i-1],4])))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6,scaleg*5/(4+string_length(string(passives[pass[i-1],3]))*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6),0)
		//draw_text_transformed(((i-1) % 6)*(gwidth/2-160)/6+40,50+floor((i-1)/6)*110,string(weap[i-1]),6/(4+string_length(string(weapons[i,4]))),5/(4+string_length(string(weapons[i,4]))),0)
		}
		}
	}
	//healthbar
	if instance_exists(yeancat) {
			var nxxx= -power(clamp(2*(scaleg-.5),0,1),2.08)*29.7*4*clamp(.35-abs(scaleg-.75),0,.35)+(1920/(2)-power(clamp(.25-abs(scaleg-.75),0,.25),.28)*123.6/(clamp(abs(scaleg-.75),.1,.25)*18.70)-sqr(1/scaleg)*16-(scaleg)*91*(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3))-(1/scaleg)*280)
	var nxxxx= display_get_gui_width()-nxxx
	draw_set_halign(fa_center)
draw_set_alpha(1);
	draw_set_font(Font1);
	draw_healthbar(nxxx,scaleg*(8*(8-(clamp(sqrt((yeancat.maxhealth*3+70)/100),1,3)))/7-200+200*dropgui)*(1-slidegui),nxxxx,scaleg*(90*(7-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/6-1-200+200*dropgui)*(1/(slidegui+1)),yeancat.healthh/yeancat.maxhealth*100,c_black,c_red,make_color_hsv(color_get_hue(c_green)*(1-clamp((yeancat.maxhealth-10)/400,0,1))+color_get_hue(c_lime)*(clamp((yeancat.maxhealth-10)/400,0,1)),color_get_saturation(c_green)*(1-clamp((yeancat.maxhealth-10)/400,0,1))+color_get_saturation(c_lime)*clamp((yeancat.maxhealth-10)/400,0,1),color_get_value(c_green)*(1-clamp((yeancat.maxhealth-10)/400,0,1))+color_get_value(c_lime)*(clamp((yeancat.maxhealth-10)/400,0,1))),0,1,1);
draw_set_color(c_black)
draw_set_valign(fa_top);
draw_text_transformed((1920/2-280+3),scaleg*(7-3+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui)*(1/(slidegui+1)),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*1*(1/(slidegui+1)),scaleg*1*(1/(slidegui+1)),0)
draw_text_transformed((1920/2-280+3),scaleg*(7+3+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui)*(1/(slidegui+1)),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*1*(1/(slidegui+1)),scaleg*1*(1/(slidegui+1)),0)
draw_text_transformed((1920/2-280-3),scaleg*(7-3+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui)*(1/(slidegui+1)),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*1*(1/(slidegui+1)),scaleg*1*(1/(slidegui+1)),0)
draw_text_transformed((1920/2-280-3),scaleg*(7+3+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui)*(1/(slidegui+1)),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*1*(1/(slidegui+1)),scaleg*1*(1/(slidegui+1)),0)
draw_set_color(c_white)
draw_text_transformed((1920/2-280),scaleg*(7+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui)*(1/(slidegui+1)),string(round(yeancat.healthh))+"/"+string(round(yeancat.maxhealth)),scaleg*1*(1/(slidegui+1)),scaleg*1*(1/(slidegui+1)),0)

//draw_text_transformed(300+(1920/2-280),scaleg*(7+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(lower),scaleg,scaleg,0)
//draw_text_transformed(-300+(1920/2-280),scaleg*(7+20*(3.5-(clamp(sqrt((yeancat.maxhealth*3+70)/100),0,3)))/2.5-200+200*dropgui),string(centr),scaleg,scaleg,0)

}
	

if !instance_exists(obj_levelup) and !instance_exists(obj_pickupq) {
draw_set_alpha(.4)
draw_set_color(c_black);
if global.pause=1 {
	draw_rectangle(0,0,room_width,room_height,0)
}
}
draw_set_alpha(1);


}



		}
			}
}
}
}
	draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_font(Font1);
	{
moby=0
if os_type=os_ios or os_type=os_android {
	moby=-30
}
	if mainmenu=0 {


if instance_exists(yeancat) {
//xpbar


	draw_healthbar(0,20*(1-scaleg)+moby+750+200-200*dropgui,gwidth,moby+800+200-200*dropgui,xpbuff/xpto*100,c_black,c_blue,c_aqua,0,1,1)
	draw_set_font(Font2);
	
	draw_set_valign(fa_middle);
	//left
	draw_set_color(c_blue)
	draw_set_alpha(1-(sqr(1-(xpbuff/xpto*clamp(xpcount,0,1)*power(clamp(abs(gwidth/2-clamp((gwidth-250+dollarslide*200)*(xpbuff/xpto),0,gwidth-250+dollarslide*200))/100,0,1),3)))))
	draw_text_transformed(clamp((gwidth-250+dollarslide*200)*(xpbuff/xpto),0,gwidth-250+dollarslide*200)*(xpbuff/xpto)+(1-xpbuff/xpto)*(gwidth*xpbuff/xpto),10*(1-scaleg)+moby+776+203-200*dropgui,string(round(xpbuff)),scaleg*(.2+xpcount/1.8)*1.1,scaleg*(.2+xpcount/1.8)*1.1,0)
	draw_set_color(make_color_hsv(color_get_hue(c_aqua)*(xpbuff/xpto)+color_get_hue(c_teal)*(1-xpbuff/xpto),color_get_saturation(c_aqua)*(xpbuff/xpto)+color_get_saturation(c_teal)*(1-xpbuff/xpto),color_get_value(c_aqua)*(xpbuff/xpto)+color_get_value(c_teal)*(1-xpbuff/xpto)))
	draw_text_transformed(clamp((gwidth-250+dollarslide*200)*(xpbuff/xpto),0,gwidth-250+dollarslide*200)*(xpbuff/xpto)+(1-xpbuff/xpto)*(gwidth*xpbuff/xpto),10*(1-scaleg)+moby+776+203-200*dropgui,string(round(xpbuff)),scaleg*(.2+xpcount/1.8)*1.05,scaleg*(.2+xpcount/1.8)*1.05,0)
	draw_set_color(c_white)
	draw_text_transformed(clamp((gwidth-250+dollarslide*200)*(xpbuff/xpto),0,gwidth-250+dollarslide*200)*(xpbuff/xpto)+(1-xpbuff/xpto)*(gwidth*xpbuff/xpto),10*(1-scaleg)+moby+776+203-200*dropgui,string(round(xpbuff)),scaleg*(.2+xpcount/1.8),scaleg*(.2+xpcount/1.8),0)
	//right
draw_set_alpha(1);
	draw_set_font(Font5);
	draw_set_valign(fa_middle);
	draw_set_color(c_black)
	draw_text_transformed_color(-200*(1-scaleg)+1920/2-765+5+scaleg*70*clamp(sqrt(levelheat/1000000)/10,0,1),80*(1-scaleg)+moby+750+200-200*dropgui+5-scaleg*40*clamp(sqrt(clamp(levelheat,0,9999999999)/1000000)/10,0,1),"LEVEL "+string(level),scaleg*lvlscal*1.01,scaleg*lvlscal*1.01,0,lc1,lc2,lc3,lc4,lca);
	draw_text_transformed_color(-200*(1-scaleg)+1920/2-765-5+scaleg*70*clamp(sqrt(levelheat/1000000)/10,0,1),80*(1-scaleg)+moby+750+200-200*dropgui+5-scaleg*40*clamp(sqrt(clamp(levelheat,0,9999999999)/1000000)/10,0,1),"LEVEL "+string(level),scaleg*lvlscal*1.01,scaleg*lvlscal*1.01,0,lc1,lc2,lc3,lc4,lca);
	draw_text_transformed_color(-200*(1-scaleg)+1920/2-765-5+scaleg*70*clamp(sqrt(levelheat/1000000)/10,0,1),80*(1-scaleg)+moby+750+200-200*dropgui-5-scaleg*40*clamp(sqrt(clamp(levelheat,0,9999999999)/1000000)/10,0,1),"LEVEL "+string(level),scaleg*lvlscal*1.01,scaleg*lvlscal*1.01,0,lc1,lc2,lc3,lc4,lca);
	draw_text_transformed_color(-200*(1-scaleg)+1920/2-765+5+scaleg*70*clamp(sqrt(levelheat/1000000)/10,0,1),80*(1-scaleg)+moby+750+200-200*dropgui-5-scaleg*40*clamp(sqrt(clamp(levelheat,0,9999999999)/1000000)/10,0,1),"LEVEL "+string(level),scaleg*lvlscal*1.01,scaleg*lvlscal*1.01,0,lc1,lc2,lc3,lc4,lca);

	draw_text_transformed_color(-200*(1-scaleg)+1920/2-765+5+scaleg*70*clamp(sqrt(levelheat/1000000)/10,0,1),80*(1-scaleg)+moby+750+200-200*dropgui-5-scaleg*40*clamp(sqrt(clamp(levelheat,0,9999999999)/1000000)/10,0,1),"LEVEL "+string(level),scaleg*lvlscal*.99,scaleg*lvlscal*.99,0,make_color_hsv(255-color_get_hue(lc4),255*clamp((levelheat/1000000)/10,0,1),255-color_get_value(lc4)),make_color_hsv(255-color_get_hue(lc3),255*clamp((levelheat/1000000)/10,0,1),255-color_get_value(lc3)),make_color_hsv(255-color_get_hue(lc2),255*clamp((levelheat/1000000)/10,0,1),255-color_get_value(lc2)),make_color_hsv(255-color_get_hue(lc1),255*clamp((levelheat/1000000)/10,0,1),255-color_get_value(lc1)),1);


//SPEED
var speedvis = 1

if instance_exists(obj_levelup) or instance_exists(obj_pickupq) or instance_exists(obj_pausemenu) or instance_exists(restar) or global.pause=1 {
speedvis=0
} else {
speedvis=1
}

draw_set_alpha(speedvis);
	draw_set_font(Font5);
	draw_set_valign(fa_middle);
	draw_set_halign(fa_center);
	draw_set_color(c_black)
	draw_text_transformed_color((1920/2)-275-5,80*(1-scaleg)+moby+875-150*dropgui+5-scaleg*20*clamp(sqrt(clamp(speedheat,0,9999999999)/1000000)/10,0,1),string(round(aspeedshow+abs(obj_terrain.travelspeed*20)))+" MPH",scaleg*speedscal*1.01,scaleg*speedscal*1.01,0,sc1,sc2,sc3,sc4,sca);
	draw_text_transformed_color((1920/2)-275+5,80*(1-scaleg)+moby+875-150*dropgui+5-scaleg*20*clamp(sqrt(clamp(speedheat,0,9999999999)/1000000)/10,0,1),string(round(aspeedshow+abs(obj_terrain.travelspeed*20)))+" MPH",scaleg*speedscal*1.01,scaleg*speedscal*1.01,0,sc1,sc2,sc3,sc4,sca);
	draw_text_transformed_color((1920/2)-275-5,80*(1-scaleg)+moby+875-150*dropgui-5-scaleg*20*clamp(sqrt(clamp(speedheat,0,9999999999)/1000000)/10,0,1),string(round(aspeedshow+abs(obj_terrain.travelspeed*20)))+" MPH",scaleg*speedscal*1.01,scaleg*speedscal*1.01,0,sc1,sc2,sc3,sc4,sca);
	draw_text_transformed_color((1920/2)-275+5,80*(1-scaleg)+moby+875-150*dropgui-5-scaleg*20*clamp(sqrt(clamp(speedheat,0,9999999999)/1000000)/10,0,1),string(round(aspeedshow+abs(obj_terrain.travelspeed*20)))+" MPH",scaleg*speedscal*1.01,scaleg*speedscal*1.01,0,sc1,sc2,sc3,sc4,sca);

	draw_text_transformed_color((1920/2)-275,80*(1-scaleg)+moby+875-150*dropgui-5-scaleg*20*clamp(sqrt(clamp(speedheat,0,9999999999)/1000000)/10,0,1),string(round(aspeedshow+abs(obj_terrain.travelspeed*20)))+" MPH",scaleg*speedscal*.99,scaleg*speedscal*.99,0,make_color_hsv(255-color_get_hue(sc4),255*clamp((speedheat/1000000)/10,0,1),255-color_get_value(sc4)),make_color_hsv(255-color_get_hue(sc3),255*clamp((speedheat/1000000)/10,0,1),255-color_get_value(sc3)),make_color_hsv(255-color_get_hue(sc2),255*clamp((speedheat/1000000)/10,0,1),255-color_get_value(sc2)),make_color_hsv(255-color_get_hue(sc1),255*clamp((speedheat/1000000)/10,0,1),255-color_get_value(sc1)),1);
draw_set_valign(fa_top);


	
}
draw_set_font(Font1);
draw_set_alpha(1);
if hour<10 {
var stringhour = "0"+string(hour);
} else {
	var stringhour = string(hour);
}

if minute<10 {
var stringminute = "0"+string(minute);
} else {
	var stringminute = string(minute);
}

if second<10 {
var stringsecond = "0"+string(second);
} else {
	var stringsecond = string(second);
}

var centr=-(100-clamp(abs(lower-700)/3,0,100))
if !instance_exists(restar) {
draw_set_color(c_black)
draw_text_transformed(1920/2-278+3,30*(1-scaleg)+centr+moby+756+200-200*dropgui-3-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond,sqrt(scaleg),sqrt(scaleg),0)
draw_text_transformed(1920/2-278+3,30*(1-scaleg)+centr+moby+756+200-200*dropgui+3-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond,sqrt(scaleg),sqrt(scaleg),0)
draw_text_transformed(1920/2-278-3,30*(1-scaleg)+centr+moby+756+200-200*dropgui-3-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond,sqrt(scaleg),sqrt(scaleg),0)
draw_text_transformed(1920/2-278-3,30*(1-scaleg)+centr+moby+756+200-200*dropgui-3-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond,sqrt(scaleg),sqrt(scaleg),0)
draw_set_color(c_white)
draw_text_transformed(1920/2-278,30*(1-scaleg)+centr+moby+756+200-200*dropgui-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond,sqrt(scaleg),sqrt(scaleg),0)
} else {
if restar.page=0 {
	if restar.xptime<restar.xplength {
	draw_text(1920/2-278+3,centr-(clamp((-restar.falling)+1,0,1))*81*(restar.stretchy-1)+moby+756+200-200*1.00-3-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond)
draw_text(1920/2-278+3,centr-(clamp((-restar.falling)+1,0,1))*81*(restar.stretchy-1)+moby+756+200-200*1.00+3-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond)
draw_text(1920/2-278-3,centr-(clamp((-restar.falling)+1,0,1))*81*(restar.stretchy-1)+moby+756+200-200*1.00-3-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond)
draw_text(1920/2-278-3,centr-(clamp((-restar.falling)+1,0,1))*81*(restar.stretchy-1)+moby+756+200-200*1.00-3-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond)
draw_set_color(c_white)
draw_text(1920/2-278,centr-(clamp((-restar.falling)+1,0,1))*81*(restar.stretchy-1)+moby+756+200-200*1.00-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond)
	} else {
		
			draw_text(1920/2-278+3,-(clamp((room_height/2-restar.y)/500,0,1))*500+centr-1*81*(restar.stretchy-1)+moby+756+200-200*1.00-3-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond)
draw_text(1920/2-278+3,-(clamp((room_height/2-restar.y)/500,0,1))*500+centr-1*81*(restar.stretchy-1)+moby+756+200-200*1.00+3-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond)
draw_text(1920/2-278-3,-(clamp((room_height/2-restar.y)/500,0,1))*500+centr-1*81*(restar.stretchy-1)+moby+756+200-200*1.00-3-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond)
draw_text(1920/2-278-3,-(clamp((room_height/2-restar.y)/500,0,1))*500+centr-1*81*(restar.stretchy-1)+moby+756+200-200*1.00-3-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond)
draw_set_color(c_white)
draw_text(1920/2-278,-(clamp((room_height/2-restar.y)/500,0,1))*500+centr-1*81*(restar.stretchy-1)+moby+756+200-200*1.00-clamp(lower*127/256,0,2000),stringhour+":"+stringminute+":"+stringsecond)

	}
}
}
	}
}
if dondadollars>0 {
	gwidth = display_get_gui_width()-dolcen

	var dollaram = string(floor(master.dondadollars))
	if frac(round(master.dondadollars*100)/100) != 0 {
	dollarcent = string(frac(round(master.dondadollars*100)/100))
	if string_length(dollarcent) = 3 {
		dollarcent=string_char_at(dollarcent,2)+string_char_at(dollarcent,3)+"0"
	} else {
		dollarcent=string_char_at(dollarcent,2)+string_char_at(dollarcent,3)+string_char_at(dollarcent,4)
	}
	if xcent<100 and centfade=0 {
	xcent+=2
	} else {
		if xcent>100 {
		xcent=100
		}
		if xcent>0{
		xcent-=.5*(1.2-xcent/100)
		centfade=xcent/100
		} else {
			xcent=0
			//centifade=0
		}
		if centfade=0 {
		centfade=-1
		}
	}
	} else {
		
		if xcent>0 {
			dollarcent=".00"
		xcent-=1
		centfade-=.01
		} else {
			xcent=0
			centfade=0
			dollarcent=""
		}
	}

	if instance_exists(obj_upgrademenu) {
		if obj_upgrademenu.onscreen!=0 {
		if upslide<1 {
			upslide+=.05 
		} else {
			upslide=1
		}
		} else {
			if upslide>0 {
			upslide-=.05 
		} else {
			upslide=0
		}
		}
	} else {
		if upslide>0 {
			upslide-=.05 
		} else {
			upslide=0
		}
	}
	draw_set_font(Font1);
	draw_sprite_ext(spr_dondadollar,0,dollarhide+gwidth-87*power(dollarfade,1/3),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight-dollarslide*70,.3*power(dollarfade,1/4),.3*power(dollarfade,1/4),0,c_white,power(dollarfade,1/2));
	draw_set_font(Font1);
	draw_set_color(make_color_hsv(color_get_hue(c_lime)*(1-(1/(clamp(string_length(dollaram)+1,1,99999))))+color_get_hue(c_green)*(1/(clamp(string_length(dollaram)+1,1,99999))),color_get_saturation(c_lime)*(1-(1/(clamp(string_length(dollaram)+1,1,99999))))+color_get_saturation(c_green)*(1/(clamp(string_length(dollaram)+1,1,99999))),color_get_value(c_lime)*(1-(1/(clamp(string_length(dollaram)+1,1,99999))))+color_get_value(c_green)*(1/(clamp(string_length(dollaram)+1,1,99999)))));
	draw_set_valign(fa_middle);
	draw_set_halign(fa_right);
draw_set_alpha(sqrt(dollarfade));
	draw_text_transformed(dollarhide+-(1-mainmenu+upslide)*(clamp(power(string_length(dollaram),.75)*7,0,130))*(dollarfade-.25)-30*sqrt(dollarfade)+gwidth-34-xcent*.9*(.3+dollarfade)+clamp(power(string_length(dollaram),.55)*26,0,150)*sqrt(dollarfade-.1)+5,40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5-5-dollarslide*70,"$"+dollaram,clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-(1-mainmenu+upslide)*(clamp(power(string_length(dollaram),.75)*7,0,130))*(dollarfade-.25)-30*sqrt(dollarfade)+gwidth-34-xcent*.9*(.3+dollarfade)+clamp(power(string_length(dollaram),.55)*26,0,150)*sqrt(dollarfade-.1)+5,40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5+5-dollarslide*70,"$"+dollaram,clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-(1-mainmenu+upslide)*(clamp(power(string_length(dollaram),.75)*7,0,130))*(dollarfade-.25)-30*sqrt(dollarfade)+gwidth-34-xcent*.9*(.3+dollarfade)+clamp(power(string_length(dollaram),.55)*26,0,150)*sqrt(dollarfade-.1)-5,40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5+5-dollarslide*70,"$"+dollaram,clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-(1-mainmenu+upslide)*(clamp(power(string_length(dollaram),.75)*7,0,130))*(dollarfade-.25)-30*sqrt(dollarfade)+gwidth-34-xcent*.9*(.3+dollarfade)+clamp(power(string_length(dollaram),.55)*26,0,150)*sqrt(dollarfade-.1)-5,40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5-5-dollarslide*70,"$"+dollaram,clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
		draw_set_color(c_green);
draw_set_alpha(sqrt(dollarfade));
	draw_text_transformed(dollarhide+-(1-mainmenu+upslide)*(clamp(power(string_length(dollaram),.75)*7,0,130))*(dollarfade-.25)-30*sqrt(dollarfade)+gwidth-34-xcent*.9*(.3+dollarfade)+clamp(power(string_length(dollaram),.55)*26,0,150)*sqrt(dollarfade-.1),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+3+5-dollarslide*70,"$"+dollaram,clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-(1-mainmenu+upslide)*(clamp(power(string_length(dollaram),.75)*7,0,130))*(dollarfade-.25)-30*sqrt(dollarfade)+gwidth-34-xcent*.9*(.3+dollarfade)+clamp(power(string_length(dollaram),.55)*26,0,150)*sqrt(dollarfade-.1),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight-3+5-dollarslide*70,"$"+dollaram,clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)	
	draw_text_transformed(dollarhide+-(1-mainmenu+upslide)*(clamp(power(string_length(dollaram),.75)*7,0,130))*(dollarfade-.25)-30*sqrt(dollarfade)+gwidth-34-xcent*.9*(.3+dollarfade)+3+clamp(power(string_length(dollaram),.55)*26,0,150)*sqrt(dollarfade-.1),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5-dollarslide*70,"$"+dollaram,clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-(1-mainmenu+upslide)*(clamp(power(string_length(dollaram),.75)*7,0,130))*(dollarfade-.25)-30*sqrt(dollarfade)+gwidth-34-xcent*.9*(.3+dollarfade)-3+clamp(power(string_length(dollaram),.55)*26,0,150)*sqrt(dollarfade-.1),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5-dollarslide*70,"$"+dollaram,clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	
draw_set_alpha(sqrt(dollarfade));
	draw_set_color(c_black);
	draw_text_transformed(dollarhide+-(1-mainmenu+upslide)*(clamp(power(string_length(dollaram),.75)*7,0,130))*(dollarfade-.25)-30*sqrt(dollarfade)+gwidth-34-xcent*.9*(.3+dollarfade)-2+clamp(power(string_length(dollaram),.55)*26,0,150)*sqrt(dollarfade-.1),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+2+5-dollarslide*70,"$"+dollaram,clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-(1-mainmenu+upslide)*(clamp(power(string_length(dollaram),.75)*7,0,130))*(dollarfade-.25)-30*sqrt(dollarfade)+gwidth-34-xcent*.9*(.3+dollarfade)+2+clamp(power(string_length(dollaram),.55)*26,0,150)*sqrt(dollarfade-.1),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight-2+5-dollarslide*70,"$"+dollaram,clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-(1-mainmenu+upslide)*(clamp(power(string_length(dollaram),.75)*7,0,130))*(dollarfade-.25)-30*sqrt(dollarfade)+gwidth-34-xcent*.9*(.3+dollarfade)+2+clamp(power(string_length(dollaram),.55)*26,0,150)*sqrt(dollarfade-.1),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+2+5-dollarslide*70,"$"+dollaram,clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-(1-mainmenu+upslide)*(clamp(power(string_length(dollaram),.75)*7,0,130))*(dollarfade-.25)-30*sqrt(dollarfade)+gwidth-34-xcent*.9*(.3+dollarfade)-2+clamp(power(string_length(dollaram),.55)*26,0,150)*sqrt(dollarfade-.1),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight-2+5-dollarslide*70,"$"+dollaram,clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
draw_set_alpha(power(dollarfade,1/4));	
	draw_set_color(c_white);
	draw_text_transformed(dollarhide+-(1-mainmenu+upslide)*(clamp(power(string_length(dollaram),.75)*7,0,130))*(dollarfade-.25)-30*sqrt(dollarfade)+gwidth-34-xcent*.9*(.3+dollarfade)+clamp(power(string_length(dollaram),.55)*26,0,150)*sqrt(dollarfade-.1),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5-dollarslide*70,"$"+dollaram,clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	if xcent>0 {
	draw_set_font(Font1);
	draw_set_color(make_color_hsv(color_get_hue(c_orange)*(1-(1/(clamp(string_length(dollaram+dollarcent)+1,1,99999))))+color_get_hue(c_yellow)*(1/(clamp(string_length(dollaram+dollarcent)+1,1,99999))),color_get_saturation(c_orange)*(1-(1/(clamp(string_length(dollaram+dollarcent)+1,1,99999))))+color_get_saturation(c_yellow)*(1/(clamp(string_length(dollaram+dollarcent)+1,1,99999))),color_get_value(c_orange)*(1-(1/(clamp(string_length(dollaram+dollarcent)+1,1,99999))))+color_get_value(c_yellow)*(1/(clamp(string_length(dollaram+dollarcent)+1,1,99999)))));
	draw_set_valign(fa_middle);
	draw_set_halign(fa_right);
draw_set_alpha(sqrt(dollarfade));
	draw_text_transformed(dollarhide+-25*power(dollarfade,1/3)+gwidth+75-150*(xcent/100)*1+clamp(power(string_length(dollaram+dollarcent),.9)*15,0,77)+5,40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5-5-dollarslide*70,string(dollarcent),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-25*power(dollarfade,1/3)+gwidth+75-150*(xcent/100)*1+clamp(power(string_length(dollaram+dollarcent),.9)*15,0,77)+5,40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5+5-dollarslide*70,string(dollarcent),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-25*power(dollarfade,1/3)+gwidth+75-150*(xcent/100)*1+clamp(power(string_length(dollaram+dollarcent),.9)*15,0,77)-5,40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5+5-dollarslide*70,string(dollarcent),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-25*power(dollarfade,1/3)+gwidth+75-150*(xcent/100)*1+clamp(power(string_length(dollaram+dollarcent),.9)*15,0,77)-5,40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5-5-dollarslide*70,string(dollarcent),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
		draw_set_color(c_orange);
draw_set_alpha(sqrt(dollarfade));
	draw_text_transformed(dollarhide+-25*power(dollarfade,1/3)+gwidth+75-150*(xcent/100)*1+clamp(power(string_length(dollaram+dollarcent),.9)*15,0,77),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+3+5-dollarslide*70,string(dollarcent),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-25*power(dollarfade,1/3)+gwidth+75-150*(xcent/100)*1+clamp(power(string_length(dollaram+dollarcent),.9)*15,0,77),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight-3+5-dollarslide*70,string(dollarcent),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)	
	draw_text_transformed(dollarhide+-25*power(dollarfade,1/3)+gwidth+75-150*(xcent/100)*1+3+clamp(power(string_length(dollaram+dollarcent),.9)*15,0,77),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5-dollarslide*70,string(dollarcent),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-25*power(dollarfade,1/3)+gwidth+75-150*(xcent/100)*1-3+clamp(power(string_length(dollaram+dollarcent),.9)*15,0,77),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5-dollarslide*70,string(dollarcent),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	
draw_set_alpha(sqrt(dollarfade));
	draw_set_color(c_black);
	draw_text_transformed(dollarhide+-25*power(dollarfade,1/3)+gwidth+75-150*(xcent/100)*1-2+clamp(power(string_length(dollaram+dollarcent),.9)*15,0,77),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+2+5-dollarslide*70,string(dollarcent),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-25*power(dollarfade,1/3)+gwidth+75-150*(xcent/100)*1+2+clamp(power(string_length(dollaram+dollarcent),.9)*15,0,77),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight-2+5-dollarslide*70,string(dollarcent),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-25*power(dollarfade,1/3)+gwidth+75-150*(xcent/100)*1+2+clamp(power(string_length(dollaram+dollarcent),.9)*15,0,77),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+2+5-dollarslide*70,string(dollarcent),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_text_transformed(dollarhide+-25*power(dollarfade,1/3)+gwidth+75-150*(xcent/100)*1-2+clamp(power(string_length(dollaram+dollarcent),.9)*15,0,77),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight-2+5-dollarslide*70,string(dollarcent),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	draw_set_alpha(power(dollarfade,1/4));	
	draw_set_color(c_white);
	draw_text_transformed(dollarhide+-25*power(dollarfade,1/3)+gwidth+75-150*(xcent/100)*1+clamp(power(string_length(dollaram+dollarcent),.9)*15,0,77),40*(1-scaleg)+20*(1-dollarfade)+moby+gheight+5-dollarslide*70,string(dollarcent),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),clamp(1.5-(string_length(dollaram)/14),.2+dollarfade/2.1,1.5)*power(dollarfade,1/3),0)
	

	}
}

if mainmenu=0 {
	//xpright
	if instance_exists(yeancat) {
		draw_set_font(Font2);
	draw_set_alpha(clamp(xpcount,0,1))
	draw_set_color(c_blue)
	draw_set_valign(fa_middle)
	draw_text_transformed(clamp(gwidth-250+dollarslide*200,0,gwidth-250+dollarslide*200),moby+776+203-200*dropgui,string(round(xpto)),(.2+xpcount/1.8)*1.1,(.2+xpcount/1.8)*1.1,0)
	draw_set_color(make_color_hsv(color_get_hue(c_aqua)*(xpbuff/xpto)+color_get_hue(c_teal)*(1-xpbuff/xpto),color_get_saturation(c_aqua)*(xpbuff/xpto)+color_get_saturation(c_teal)*(1-xpbuff/xpto),color_get_value(c_aqua)*(xpbuff/xpto)+color_get_value(c_teal)*(1-xpbuff/xpto)))
	draw_text_transformed(clamp(gwidth-250+dollarslide*200,0,gwidth-250+dollarslide*200),moby+776+203-200*dropgui,string(round(xpto)),(.2+xpcount/1.8)*1.05,(.2+xpcount/1.8)*1.05,0)
	draw_set_color(c_white)
	draw_text_transformed(clamp(gwidth-250+dollarslide*200,0,gwidth-250+dollarslide*200),moby+776+203-200*dropgui,string(round(xpto)),.2+xpcount/1.8,.2+xpcount/1.8,0)
}
}

if loading>0 {
	draw_set_alpha(clamp(loading,0,1))
	draw_set_color(c_black);
		draw_rectangle(0,0,room_width,room_height,0)
}
if instance_exists(obj_logo) {
var stx=display_get_gui_width()/2+obj_logo.x-room_width/2+225+clamp((28-string_length(chosensplash))/27,0,1)*130
var sty=display_get_gui_height()/2+obj_logo.y-room_height/2+260-.5*string_width_ext(chosensplash,-1,-1)*sin(degtorad(-(splashangle-13))/2);

if (master.devmode=1 and !keyboard_check(vk_space)) or master.devmode=0 {
for (i=1; i<string_length(chosensplash)+1;i++){
	var splashgrow= (1+.2* sin((2 * pi / (string_length(chosensplash))) * (splashtime+i)))*(1.15-.98*clamp(1-(8/(string_length(chosensplash))),0,1))
		var yoff=10 * sin((2 * pi / (string_length(chosensplash))) * (splashtime+i))-string_width(string_copy(chosensplash,0,i-1))*(1.14-.99*clamp(1-(6/(string_length(chosensplash))),0,1)) * sin(degtorad(splashangle));
	draw_set_color(c_white)
	draw_set_font(Font5)

	draw_set_halign(fa_left)
	draw_set_valign(fa_middle)
	draw_set_alpha(clamp((splashalpha)/(i*2),0,.5));
	draw_set_color(make_color_hsv(.5*255+.5*255 * sin((2 * pi / (string_length(chosensplash))) * (splashtime+i)),255,255));	
	draw_text_transformed(stx+string_width_ext(string_copy(chosensplash,clamp(i-1,0,1),i-1),-1,-1)*(1.14-.99*clamp(1-(6/(string_length(chosensplash))),0,1)),sty+yoff,string_char_at(chosensplash,i),1.35*splashgrow*clamp(splashalpha/(string_length(chosensplash)/2),0,1),1.35*splashgrow*clamp(splashalpha/(string_length(chosensplash)/2),0,1),splashangle)
	//draw_text_transformed((4 * sin((2 * pi / (string_length(chosensplash))) * (splashtime+i+string_length(chosensplash)/2)))+stx+string_width(string_copy(chosensplash,0,i))*(.95-.8*(1-(9/(5+string_length(chosensplash))))),(4 * sin((2 * pi / (string_length(chosensplash))) * (splashtime+i)))+sty+yoff,string_char_at(chosensplash,i),1.25*splashgrow*clamp(splashalpha/(string_length(chosensplash)/2),0,1),1.25*splashgrow*clamp(splashalpha/(string_length(chosensplash)/2),0,1),splashangle)
	//draw_text_transformed(-(4 * sin((2 * pi / (string_length(chosensplash))) * (splashtime+i)))+stx+string_width(string_copy(chosensplash,0,i))*(.95-.8*(1-(9/(5+string_length(chosensplash))))),-(4 * sin((2 * pi / (string_length(chosensplash))) * (splashtime+i+string_length(chosensplash)/2)))+sty+yoff,string_char_at(chosensplash,i),1.25*splashgrow*clamp(splashalpha/(string_length(chosensplash)/2),0,1),1.25*splashgrow*clamp(splashalpha/(string_length(chosensplash)/2),0,1),splashangle)
	//draw_text_transformed(-(4 * sin((2 * pi / (string_length(chosensplash))) * (splashtime+i+string_length(chosensplash)/2)))+stx+string_width(string_copy(chosensplash,0,i))*(.95-.8*(1-(9/(5+string_length(chosensplash))))),(4 * sin((2 * pi / (string_length(chosensplash))) * (splashtime+i)))+sty+yoff,string_char_at(chosensplash,i),1.25*splashgrow*clamp(splashalpha/(string_length(chosensplash)/2),0,1),1.25*splashgrow*clamp(splashalpha/(string_length(chosensplash)/2),0,1),splashangle)
	draw_set_alpha(splashalpha/(i));
	draw_set_color(c_black);
	draw_text_transformed(stx+string_width_ext(string_copy(chosensplash,clamp(i-1,0,1),i-1),-1,-1)*(1.14-.99*clamp(1-(6/(string_length(chosensplash))),0,1)),sty+yoff,string_char_at(chosensplash,i),1.2*splashgrow*clamp(splashalpha/(string_length(chosensplash)/2),0,1),1.2*splashgrow*clamp(splashalpha/(string_length(chosensplash)/2),0,1),splashangle)
	draw_set_color(make_color_hsv(.5*255+.5*255 * sin((2 * pi / (string_length(chosensplash))) * (splashtime*2+i)),255-splashalpha/(string_length(chosensplash))*200-55 * sin((2 * pi / (string_length(chosensplash))) * (splashtime+i)),255));	
	draw_text_transformed(stx+string_width_ext(string_copy(chosensplash,clamp(i-1,0,1),i-1),-1,-1)*(1.14-.99*clamp(1-(6/(string_length(chosensplash))),0,1)),sty+yoff,string_char_at(chosensplash,i),splashgrow*clamp(splashalpha/(string_length(chosensplash)/2),0,1),splashgrow*clamp(splashalpha/(string_length(chosensplash)/2),0,1),splashangle)

}
}
}

draw_sprite_ext(spr_damageoverlay,0,gwidth/2,gheight/2,(2-damef)*damgro*(1+(1-fadedam)),(2-damef)*damgro*(1+(1-fadedam)),0,c_white,power(damef,1.5)*fadedam);

//debugging
draw_set_color(c_white)
draw_set_alpha(1)


	if master.devmode=1 and keyboard_check(ord("V")) {
			draw_set_color(c_white)
	draw_set_alpha(1)
	draw_set_font(Font4)
	draw_set_halign(fa_center)
	draw_set_valign(fa_middle)
	var xxxx=display_get_gui_width()/2
	var yyyy=display_get_gui_height()/2
	if keyboard_check(ord("G")) {
		if keyboard_check(ord("9")) {
draw_text_transformed(xxxx,yyyy,string((bdistplay9)),1,1,0)
}
else if keyboard_check(ord("8")) {
draw_text_transformed(xxxx,yyyy,string((bdistplay8)),1,1,0)
}
else if keyboard_check(ord("7")) {
draw_text_transformed(xxxx,yyyy,string((bdistplay7)),1,1,0)
}
else if keyboard_check(ord("6")) {
draw_text_transformed(xxxx,yyyy,string((bdistplay6)),1,1,0)
}
else if keyboard_check(ord("5")) {
draw_text_transformed(xxxx,yyyy,string((bdistplay5)),1,1,0)
}
else if keyboard_check(ord("4")) {
draw_text_transformed(xxxx,yyyy,string((bdistplay4)),1,1,0)
}
else if keyboard_check(ord("3")) {
draw_text_transformed(xxxx,yyyy,string((bdistplay3)),1,1,0)
}
else if keyboard_check(ord("2")) {
draw_text_transformed(xxxx,yyyy,string((bdistplay2)),1,1,0)
}
else if keyboard_check(ord("1")) {
draw_text_transformed(xxxx,yyyy,string((bdistplay)),1,1,0)
}
else if keyboard_check(ord("0")) {
draw_text_transformed(xxxx,yyyy,string((bdistplay0)),1,1,0)
}
	} else {
	
if keyboard_check(ord("9")) {
draw_text_transformed(xxxx,yyyy,string((distplay9*10)),1,1,0)
}
else if keyboard_check(ord("8")) {
draw_text_transformed(xxxx,yyyy,string((distplay8*10)),1,1,0)
}
else if keyboard_check(ord("7")) {
draw_text_transformed(xxxx,yyyy,string((distplay7*10)),1,1,0)
}
else if keyboard_check(ord("6")) {
draw_text_transformed(xxxx,yyyy,string((distplay6*10)),1,1,0)
}
else if keyboard_check(ord("5")) {
draw_text_transformed(xxxx,yyyy,string((distplay5*10)),1,1,0)
}
else if keyboard_check(ord("4")) {
draw_text_transformed(xxxx,yyyy,string((distplay4*10)),1,1,0)
}
else if keyboard_check(ord("3")) {
draw_text_transformed(xxxx,yyyy,string((distplay3*10)),1,1,0)
}
else if keyboard_check(ord("2")) {
draw_text_transformed(xxxx,yyyy,string((distplay2*10)),1,1,0)
}
else if keyboard_check(ord("1")) {
draw_text_transformed(xxxx,yyyy,string((distplay*10)),1,1,0)
}
else if keyboard_check(ord("0")) {
draw_text_transformed(xxxx,yyyy,string((distplay0)),1,1,0)
}
}
}

File: Other_3.gml
Code:
/// @description Insert description here
// You can write your code in this editor
audio_stop_all();
instance_destroy();


File: KeyPress_49.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if devmode =1 {
	if keyboard_check(vk_control) {
dondadollars+=1
	}


}

File: KeyPress_48.gml
Code:
/// @description Insert description here
// You can write your code in this editor
//alt=option
if devmode =1 {
	if keyboard_check(vk_control) {
		if keyboard_check(vk_shift) {
			dondadollars*=2
		} else {
			dondadollars+=1000000000
		}
	}
}

randomchoice=0

File: KeyPress_76.gml
Code:
/// @description Insert description here
// You can write your code in this editor
//exit
if devmode=1 {
			if instance_exists(obj_unlockmenu) {
			if obj_unlockmenu.colsel=-1 {
	for (i=0; i<array_length(collection); i++) {

	collection[i,1]+=1
	if collection[i,1]>2 {
	collection[i,1]=0
	}
}
			} else {
					collection[obj_unlockmenu.colsel,1]+=1
	if collection[obj_unlockmenu.colsel,1]>2 {
	collection[obj_unlockmenu.colsel,1]=0
	}
			}
			}
if !instance_exists(obj_levelup) and !instance_exists(obj_pickupq) {

updatetext=1
	
	if updatetext=1 {
weapontext=[
["A Toy Gun","+10% Attack Rate\n+33% Aim Speed","x2 Damage","+1 Penetration","+15% Attack Rate\n+33% Aim Speed","+50% Damage","+20 Degrees Range\n+50% Aim Speed","+20% Attack Rate\n+50% Projectile Speed","+25% Projectile Size\n+50% Damage\n+15% Attack Rate","+1 Projectile",""],
["","","","","","","","","","",""],
["The Twitter Machine","x2 Damage","+1 Projectile","+10% Attack Rate\nand + 50% Projectile Speed","Grabs 2 Enemies","x2 Damage","+1 Projectile","+15% Attack Rate","+50% Projectile Size","x2 Damage",""],
["","","","","","","","","","",""],
["Hallelujah","50% Damage\n+1 Harmony","+20% Attack Rate\n+1 Penetration","+1 Harmony\n25% Volume (Size)","+50% Damage\n+33% Duration","+20% Attack Rate\n+1 Harmony","+25% Volume\n+33% Duration","+33% Damage","+1 Harmony\n+1 Penetration","x2 Damage\n+25% Volume",""],
["","","","","","","","","","",""],
["Bass Bumpin'","x1.5 Damage","+33% Range","+50% Rate","+66% Damage","+25% Range","+33% Rate","+50% Damage","+15% Range","x2 Damage",""],
["","","","","","","","","","",""],
["Break Free","+10% Range\n+25% Rotation Speed","+25% Duration\n+10% Rotationspeed","+10% Attack Rate","+25% Damage\n+25% Duration","+25% Rotation Speed","+15% Attack Rate","+50% Damage","+50% Rotation Speed","+25% Range",""],
["","","","","","","","","","",""],
["In the Name of the Father","+10% Rate","+25% Range","+1 Amount","+50% Damage","+25% Range","+15% Rate","+1 Amount","+25% Range","x2 Damage",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["Enter Zen","2nd Chakra\n+50% Damage","3rd Chakra\n+25% Range","4th Chakra","5th Chakra\n+50% Damage","6th Chakra\n+25% Range","7th Chakra","+33% Duration","+50% Orb Speed","+1 Penetration",""],
["","","","","","","","","","",""],
["It's a Brewin'","+25% Range","+25% Damage","+33% Attack Rate","+1 Chain Length","+25% Duration","+50% Damage","+33% Attack Rate","+25% Range","+1 Chain Length",""],
["","","","","","","","","","",""],
["I'm a Sensitive Person","+33% Fish Speed","+25% Duration","+10% Attack Rate","+50% Damage\n+25% Fish Size","+25% Duration","+10% Attack Rate","+33% Fish Speed","+25% Duration\n+10% Attack Rate","+50% Damage\n+25% Fish Size",""],
["I wanna go there","+50% Damage\n+50% Orbit Speed","+25% Radius\n+25% Size","+50% Oscilation Rate\nx2 Oscillation Range","x2 Damage","+25% Radius\n+50% Orbit Speed","+50% Oscilation Rate\nx2 Oscillation Range","x2 Damage","+25% Radius\n+50% Size","x3 Damage",""],
["Blacka Blacka!","+50% Fire Rate","+50% Damage\n+50% Aim Speed","+50% Fire Rate\n+50% Projectile Speed","+1 Penetration","+50% Damage/n+50% Projectile Speed","+50% Fire Rate\n+50% Aim Speed","+50% Projectile Speed\n+50% Fire Rate","+50% Projectile Size\n+20% Attack Rate\n+20% Damage","+50% Fire Rate",""],
["","","","","","","","","","",""],
["Defensive Weapon","20% Move Speed","+25% Range\n+50% Size","+20% Move Speed","Spikes","+25% Range\n+10% Move Speed","+20% Move Speed","More Spikes","+25% Range\n+50% Size","x2 Damage",""],
["Give them Scars","+50% Movement Speed","+25% Range\n+25% Size","+50% Attack Rate\nx2 Range","x2 Damage","+25% Range\n+50% Movement Speed","+50% Attack Rate\nx2 Range","x2 Damage","+25% Range\n+25% Size","x3 Damage",""],
["La Flame","+33% Fire Speed","+25% Duration","+10% Attack Rate","+50% Damage\n+25% Projectile Size","+25% Duration","+15% Attack Rate","+33% Fire Speed","+50% Damage","+25% Size\n+25% Duration",""],
["","","","","","","","","","",""],
["Look in my Eye","+50% Damage\n+10% Move Speed","+25% Range\n+50% Size","+50% Blink Rate","x2 Damage","+25% Range\n+10% Move Speed","+50% Blink Rate","+50% Damage","+25% Range\n+50% Size","x2 Damage",""],
["","","","","","","","","","",""],
["Howl at the Moon","+50% Damage","+50% Duration","+10% Rate","+50% Wolf Speed","+25% Duration","+25% Wolf Speed\n+1 Attack Count","+33% Duration","+10% Rate\n+50% Damage","+33% Wolf Speed\n+1 Attack Count",""],
["","","","","","","","","","",""],
["That S**t is Bright","x2 Damage","+33% Range","+33% Rate","+50% Damage","+25% Range","+33% Rate","+50% Damage","+15% Range","x2 Damage",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["Imagination","+50% Damage","+25% Range","+50% Damage","+25% Range","+50% Damage","+25% Range","+50% Damage","+25% Range","+50% Damage",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""]
]

//ldamage*(1+(.1*passives[18,3])*einstein)
passivetext=[
"+"+string((((1+.05*(master.notice[0,2])*leinstein)*(1+(.05*(master.passives[0,3]+1))*einstein)-1)-((1+.05*(master.notice[0,2])*leinstein)*(1+(.05*master.passives[0,3])*einstein)-1))*100)+"% Luck\n("+string((((1+.05*(master.notice[0,2])*leinstein)*(1+.05*(master.passives[0,3]+1)*einstein))-1)*100)+"%)",
"+"+string(((1-(1/(1+.02*((master.passives[1,3]+1)*einstein*master.luck)+(.02*(master.notice[1,2])*leinstein*master.lluck))))-(1-(1/(1+.02*(master.passives[1,3]*einstein*master.luck)+(.02*(master.notice[1,2])*leinstein*master.lluck)))))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/(1+.02*((master.passives[1,3]+1)*einstein*master.luck)+(.02*(master.notice[1,2])*leinstein*master.lluck))))*100)+"%)",
"+"+string((((1+.05*(master.notice[2,2])*leinstein)*(1+.05*(master.passives[2,3]+1))*einstein)-((1+.05*(master.notice[2,2])*leinstein)*(1+.05*master.passives[2,3])*einstein))*100)+"% Enemy Health, Quantity, & Speed\n("+string((((1+.05*(master.notice[2,2])*leinstein)*(1+.05*(master.passives[2,3]+1))*einstein)-1)*100)+"%)",
"Deal +"+string((((master.notice[3,2])*10*leinstein+20*clamp((master.passives[3,3]+1),0,1)+10*(clamp(master.passives[3,3]-1+1,0,99999))*einstein)-(master.notice[3,2]*10*leinstein+20*clamp(master.passives[3,3],0,1)+10*(clamp(master.passives[3,3]-1,0,99999))*einstein)))+"% Damage\nWhen below half Health\n("+string(((master.notice[3,2])*10*leinstein+20*clamp((master.passives[3,3]+1),0,1)+10*(clamp((master.passives[3,3]-1+1),0,99999))*einstein))+"%)",
"+"+string(((1-((1-(.05*(master.passives[4,3]+1)*einstein))/(1+.05*(master.notice[4,2])*leinstein)))-((1-((1-(.05*(master.passives[4,3])*einstein))/(1+.05*(master.notice[4,2])*leinstein)))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(master.passives[4,3]+1)*einstein))/(1+.05*(master.notice[4,2])*leinstein)))*100)+"%)",
"Heal "+string(((((1+.02*(master.notice[5,2])*leinstein)*(1+.02*(master.passives[5,3]+1))*einstein)-1)-(((1+.02*(master.notice[5,2])*leinstein)*(1+.02*master.passives[5,3])*einstein)-1))*100)+"% of Damage Dealt\n("+string((((1+.02*(master.notice[5,2])*leinstein)*(1+.02*(master.passives[5,3]+1))*einstein)-1)*100)+"%)",
"+"+string((((1+.1*(master.notice[6,2])*leinstein)*(1+.1*(master.passives[6,3]+1)*einstein)-1)-((1+.1*(master.notice[6,2])*leinstein)*(1+(.1*master.passives[6,3])*einstein)-1))*100)+"% Weapon & Ability Range\n("+string(((1+.1*(master.notice[6,2])*leinstein)*(1+(.1*(master.passives[6,3]+1))*einstein)-1)*100)+"%)",
"+"+string((((.05*(master.notice[7,2])*leinstein)+(.05*(master.passives[7,3]+1))*einstein)-((.05*(master.notice[7,2])*leinstein)+(.05*master.passives[7,3])*einstein))*100)+"% Movement\nSpeed & Handling ("+string(((.05*(master.notice[7,2])*leinstein)+(.05*(master.passives[7,3]+1))*einstein)*100)+"%)",
"+"+string((((1+.05*(master.notice[8,2])*leinstein)*(1+.05*(master.passives[8,3]+1))*einstein-1)-((1+.05*(master.notice[8,2])*leinstein)*(1+.05*master.passives[8,3])*einstein-1))*100)+"% XP\n("+string(((1+.05*(master.notice[8,2])*leinstein)*(1+.05*(master.passives[8,3]+1))*einstein-1)*100)+"%)",
"(Heal "+string((floor((clamp(master.passives[9,3]+1,0,1)+clamp(master.passives[9,3]-4+1,0,10000)+clamp(master.notice[9,2],0,1))*einstein+(.5*(master.notice[9,2])*leinstein))))+" HP Every "+string((5-clamp(master.passives[9,3],0,4))/(1+.05*master.notice[9,2]*leinstein))+" Seconds+\n("+string(floor((clamp((master.passives[9,3]+1),0,1)+clamp((master.passives[9,3]-4+1),0,10000)+clamp(master.notice[9,2],0,1))*einstein+(.5*master.notice[9,2]*leinstein))/((5-clamp((master.passives[9,3]+1),0,4))/(1+.05*master.notice[9,2]*leinstein)))+" HP/Second)",
"+"+string(((.02*(master.passives[10,3]+1))*einstein*master.damage+(.02*(master.notice[10,2])*leinstein*master.ldamage)-(.02*master.passives[10,3])*einstein*master.damage+(.02*master.notice[10,2]*leinstein*master.ldamage))*100)+"% Retalitory Damage\n("+string(((.02*(master.passives[10,3]+1))*einstein*master.damage+(.02*(master.notice[10,2])*leinstein*master.ldamage))*100)+"%)",
"+"+string((((.05*(master.notice[11,2])*leinstein*master.lrange)+(1+.05*(master.passives[11,3]+1)*master.range*einstein))-((.05*master.notice[11,2]*leinstein*master.lrange)+(1+(.05*(master.passives[11,3]))*master.range*einstein)))*100)+"% Attractor Pickup Range\n("+string(((.05*(master.notice[11,2])*leinstein*master.lrange)+(1+(.05*(master.passives[11,3]+1))*master.range*einstein)-1)*100)+"%)",
"+"+string((((1+.05*(master.notice[12,2])*leinstein)*(1+.1*(master.passives[12,3]+1)*einstein)-1)-((1+.05*(master.notice[12,2])*leinstein)*(1+(.1*master.passives[12,3])*einstein)-1))*100)+"% Attack Rate\n("+string(((1+.05*(master.notice[12,2])*leinstein)*(1+(.1*(master.passives[12,3]+1))*einstein)-1)*100)+"%)",
"+"+string((((1+.05*(master.notice[13,2])*leinstein)*(1+.1*(master.passives[13,3]+1)*einstein)-1)-((1+.05*(master.notice[13,2])*leinstein)*(1+(.1*master.passives[13,3])*einstein)-1))*100)+"% Attack Duration\n("+string(((1+.05*(master.notice[13,2])*leinstein)*(1+(.1*(master.passives[13,3]+1))*einstein)-1)*100)+"%)",
"+"+string(round(5*leinstein))+" Max Health\n("+string(round(10+master.love+5*leinstein))+"HP)",
"Every Minute,\n Take "+string(round(50/leinstein*100)/100)+"% Damage for "+string(5*(master.passives[15,3]+1))+" Seconds)",
"+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(master.revives+1)+")",
"+"+string(((1-(1/(1+.02*(master.passives[17,3]+1)*master.luck*einstein))/(1+(.02*(master.notice[17,2])*leinstein*(1+.05*master.notice[0,2]*leinstein)))-1)-(1-(1/(1+.02*(master.passives[17,3])*master.luck*einstein))/(1+(.02*(master.notice[17,2])*leinstein*(1+.05*master.notice[0,2]*leinstein)))-1))*100)+"% Critical Chance (x"+string((2*(.95+.05*clamp(master.passives[17,3],1,99999)))*einstein*(((.95+.05*(clamp(master.notice[17,2],1,99999)))*leinstein)))+" Damage)\n["+string((1-(1/(1+.02*(master.passives[17,3]+1)*master.luck*einstein))/(1+(.02*(master.notice[17,2])*leinstein*(1+.05*master.notice[0,2]*leinstein))))*100)+"%]",
"+"+string((((1+.1*(master.notice[18,2])*leinstein)*(1+(.1*(master.passives[18,3]+1))*einstein)-1)-((1+.1*master.notice[18,2]*leinstein)*(1+(.1*master.passives[18,3])*einstein)-1))*100)+"% Damage\n("+string(((1+.1*(master.notice[18,2])*leinstein)*(1+(.1*(master.passives[18,3]+1))*einstein)-1)*100)+"%)",
"OxyContin Spawns\nEvery 3 Minutes",
"+"+string((((1+.1*(master.notice[20,2])*leinstein)*(1+(.1*(master.passives[20,3]+1))*einstein)-1)-((1+.1*(master.notice[20,2])*leinstein)*(1+(.1*master.passives[20,3])*einstein)-1))*100)+"% Projectile Size\n("+string(((1+.1*(master.notice[20,2])*leinstein)*(1+(.1*(master.passives[20,3]+1))*einstein)-1)*100)+"%)",
"+"+string(((((1+.05*(master.notice[21,2])*leinstein)*(1+.05*(master.passives[21,3]+1))*einstein)-1)-((1+.05*(master.notice[21,2])*leinstein)*(1+.05*master.passives[21,3])*einstein-1))*100)+"% Money Value & Frequency\n("+string((((1+.05*(master.notice[21,2])*leinstein)*(1+.05*(master.passives[21,3]+1))*einstein)-1)*100)+"%)",
"Item Pickups:\n+"+string((((1+.05*(master.notice[22,2])*leinstein)*(1+.05*(master.passives[22,3]+1)*einstein)-1)-((1+.05*(master.notice[22,2])*leinstein)*(1+(.05*master.passives[22,3])*einstein)-1))*100)+"% Duration & Effect ("+string(((1+.05*(master.notice[22,2])*leinstein)*(1+(.05*(master.passives[22,3]+1))*einstein)-1)*100)+"%)",
"+"+string(((1+.1*(master.notice[23,2])*leinstein)*(1+.1*(master.passives[23,3]+1)*einstein)-(1+.1*(master.notice[23,2])*leinstein)*(1+(.1*master.passives[23,3])*einstein))*100)+"% Projectile Speed\n("+string(((1+.1*(master.notice[23,2])*leinstein)*(1+(.1*(master.passives[23,3]+1))*einstein)-1)*100)+"%)",
"+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor((master.passives[24,3]+1)*einstein+master.notice[24,2]*leinstein)))+")",
"-"+string(((((1-(.05*(master.passives[25,3]+1)*einstein))/(master.lvanish)))-(((1-(.05*(master.passives[25,3])*einstein))/(master.lvanish))))*100)+"% Enemy Eyesight\n("+string((((1-(.05*(master.passives[25,3]+1)*einstein))/(master.lvanish)))*100)+"%)",
]

passivetext2=[
["+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","",""],
["+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)"],
["+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)"],
["Deal +"+string(20*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)"],
["+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)"],
["Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)"],
["+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","",""],
["+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")"],
["+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)",""],
["Heal "+string(1*einstein)+" Health\nEvery "+string(heartseconds)+" Seconds","-1 Second\n(+"+string(heart)+" HP / "+string(heartseconds-1)+" Seconds)","-1 Second\n(+"+string(heart)+" HP / "+string(heartseconds-1)+" Seconds)","-1 Second\n(+"+string(heart)+" HP / "+string(heartseconds-1)+" Second)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)"],
["+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","",""],
["+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","",""],
["+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","",""],
["+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","",""],
["+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(10*einstein))+" Max Health\n("+string(round(10+love+10*einstein))+")","+"+string(round(10*einstein))+" Max Health\n("+string(round(10+love+10*einstein))+")","+"+string(round(10*einstein))+" Max Health\n("+string(round(10+love+10*einstein))+")","+"+string(round(10*einstein))+" Max Health\n("+string(round(10+love+10*einstein))+")","",""],
["Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","","","","","",""],
["+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(revives+1)+")","+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(revives+1)+")","+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(revives+1)+")","+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(revives+1)+")","","","","","","","",""],
["+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]"],
["+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","",""], //power
["OxyContin Spawns\nEvery 3 Minutes","OxyContin Spawns\nEvery 2 Min: 30 Sec","OxyContin Spawns\nEvery 2 Minutes","OxyContin Spawns\nEvery 1 Min: 30 Sec","OxyContin Spawns\nEvery 1 Minute","OxyContin Spawns\nEvery 30 Seconds","","","","","",""],
["+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)",""],
["+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)"],
["Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")"],
["+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","",""],
["+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")"],
["-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","",""]
]

eintext=["+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)","+2% Passives' Potency\n("+string((einstein-1+.02)*100)+"%)"]

updatetext=0
}

	level++
		if mainmenu=0 {
	

        audio_pause_sync_group(sg);
		audio_pause_all()
		global.pause=1
	instance_create_layer(room_width/2,0,"uiitop",obj_levelup)
	levelheat+=1*1000000;
	xpto=level+1
		
		exit
	}
}
}

File: Create_0.gml
Code:
/// CREATE OF master
global.control_type=0
// In the Create event of your master object
global.lastControllerState = gamepad_is_connected(0);  // Initialize with the current state

wpm=0
shownmessage=0
showad=0
noad=1
init=0
playername= ""
if !instance_exists(obj_Client) {
	instance_create_layer(0,0,"uiitop",obj_Client);
}
playernumber=-1
infouppdate=0
newest_version="Beta 1.5.0"
version=newest_version
legacyversion="Beta 1.5.0"
if os_type=os_ios or os_type=os_android {

AdMob_SetTestDeviceId(); // <----- this is OPTIONAL (development only)

//AdMob_Targeting_UnderAge(false);

//AdMob_Targeting_COPPA(false);

AdMob_Targeting_MaxAdContentRating(AdMob_ContentRating_GENERAL);


AdMob_Initialize();

}
global.target_bpm=100
global.current_bpm=115
global.pitch = 1;          // Pitch starts at 1 (normal speed)
global.pitch_duration = 2096;  // Steps per beat
global.last_frame_time = current_time; 


// WEAPON REVAMP: //"Theory Name", "Length", "Description", duration
rate_array = [
    ["Maxima", "8 Bars", "Eternal Pace", 32],
    ["Longa", "4 Bars", "Prolonged Stride", 16],
    ["Triple Breve", "3 1/2 Bars", "Leisurely Stretch", 14],
    ["Double Breve", "3 Bars", "Expansive Step", 12],
    ["Dotted Breve", "2 1/2 Bars", "Graceful Glide", 10],
    ["Breve", "2 Bars", "Broad Step", 8],
    ["Dotted Whole Note", "1 3/4 Bars", "Measured Sweep", 7],
    ["Whole Note", "1 1/2 Bars", "Wide Leap", 6],
    ["Whole Note Triplet", "1 1/3 Bars", "Smooth Transition", 5.333],
    ["Dotted Half Note", "1 1/4 Bars", "Sustained Pace", 5],
    ["Whole Note", "1 Bar", "Full Stride", 4],
    ["Dotted Half Note", "3/4 Bar", "Extended Beat", 3],
    ["Half Note Triplet", "2/3 Bar", "Harmonious Flow", 2.667],
    ["Half Note", "1/2 Bar", "Steady Beat", 2],
    ["Dotted Quarter Note", "3/8 Bar", "Quick Step", 1.5],
    ["Quarter Note Triplet", "1/3 Bar", "Brisk Stride", 1.333],
    ["Quarter Note", "1/4 Bar", "Regular Step", 1],
    ["Dotted Eighth Note", "3/16 Bar", "Energetic Dash", 3/4],
    ["Eighth Note Triplet", "1/6 Bar", "Agile Movement", 2/3],
    ["Eighth Note", "1/8 Bar", "Swift Move", 1/2],
    ["Dotted Sixteenth Note", "3/32 Bar", "Rapid Motion", 3/8],
    ["Sixteenth Note Triplet", "1/12 Bar", "Fleet Footed", 1/3],
    ["Sixteenth Note", "1/16 Bar", "Fast Pace", 1/4],
    ["Dotted Thirty-Second Note", "3/64 Bar", "Very Fast", 3/16],
    ["Thirty-Second Note Triplet", "1/24 Bar", "Hasty Beats", 1/6],
    ["Thirty-Second Note", "1/32 Bar", "Scurry", 1/8],
    ["Dotted Sixty-Fourth Note", "3/128 Bar", "Blazing Speed", 3/32],
    ["Sixty-Fourth Note Triplet", "1/48 Bar", "Ultra Rapid", 1/12],
    ["Sixty-Fourth Note", "1/64 Bar", "Lightning Fast", 1/16],
    ["Dotted One Hundred Twenty-Eighth Note", "3/256 Bar", "Fleeting", 3/64],
    ["One Hundred Twenty-Eighth Note Triplet", "1/96 Bar", "Instant Flicker", 1/24],
    ["One Hundred Twenty-Eighth Note", "1/128 Bar", "Almost Instant", 1/32],
    ["Dotted Two Hundred Fifty-Sixth Note", "3/512 Bar", "Blink Fast", 3/128],
    ["Two Hundred Fifty-Sixth Note Triplet", "1/192 Bar", "Rapid Twitch", 1/48],
    ["Two Hundred Fifty-Sixth Note", "1/256 Bar", "Immediate", 1/64],
    ["Dotted Five Hundred Twelfth Note", "3/1024 Bar", "Quick Flash", 3/256],
    ["Five Hundred Twelfth Note Triplet", "1/384 Bar", "Micro Beat", 1/96],
    ["Five Hundred Twelfth Note", "1/512 Bar", "Ultra Snap", 1/128],
    ["SemiHemiDemiSemiHemiDemiSemiQuaver", "1/768 Bar", "Whirlwind", 1/192],
    ["SemiHemiDemiSemiHemiDemiSemiQuaver", "1/1024th Bar", "Instantaneous", 1/256]
];






// Note: Adjustments made for clarity and logical progression in gameplay. 
//       Descriptions and terms are simplified to aid player understanding.




reviving=0
osc=0

master_cutoff=48000
master_highpass=0
master_reverb=0
start=0;
window_set_fullscreen(true);
upslide=0
splash=[
"Playing since Beta 1.0.0",
"Jewish Lives Matter",
"Not the 6 God, but close enough!",
"Kissing Through the Phone",
"Cloning... 99% complete!",
"Not a Dropout",
"I'm Feline Good",
"Beta 1.0.0",
"That's Not Nice!",
"More Colors than 6ix9ine's Hair!",
"Stronger, better, faster, meow-er!",
"I Miss the old Ye",
"Rainbows don't Die",
"Open on Sundays",
"Rap-Tarts",
"Hurry up with my damn croissants!",
"Yean Season Approaching!",
"16,777,216 Different Colors!",
"It's the Dawn of the New Wave",
"I'm not a shark, I'm a blowfish.",
"Beyoncé be dancing in heels and shit.",
"I am the number one human being in music",
"Not #2",
"I'm like a machine. I'm a robot",
"What's a B+ mean?",
"George Bush Doesn't Care About This Game.",
"People look at me like im insane.",
"Kim doesn’t understand what a blessing I am to her.",
"Pimpin’ is whatev… Love is that shit!",
"I am a proud nonreader of books",
"I'm like a tree",
"I'm a pop enigma",
"I'm a go get that",
"Yo Taylor, I'm really happy for you",
"Please corporations. Can you please support me, please?",
"Just for 3 million dollars",
"What's my public rating right now?",
"Are people liking me again?",
"You may be talented, but you’re not Kanye West",
"The media crucify me like they did Christ",
"Im owed some Chex, Cereal"
]

splashtime=0
scaleg=1
scalegg=scaleg



debugvar=.6
debugvar2=29
splashangle=13
splashalpha=0
countdi=0
soundmanager=[
//character sounds
[0,0,0,0,0,0],
//star sounds
[0,0,0,0,0,0],
//Razi A sounds
[0,0,0,0,0,0],
//bear sounds
[0,0,0,0,0,0],
//Razi B sounds
[0,0,0,0,0,0],
//5 Music Executive
[0,0,0,0,0,0],
//6
[0,0,0,0,0,0],
//7
[0,0,0,0,0,0],
//8
[0,0,0,0,0,0],
//9music executive
[0,0,0,0,0,0],
//10
[0,0,0,0,0,0],
//11
[0,0,0,0,0,0],
//12
[0,0,0,0,0,0],
//13
[0,0,0,0,0,0],
//14
[0,0,0,0,0,0],
//15
[0,0,0,0,0,0],
//16
[0,0,0,0,0,0],
//17
[0,0,0,0,0,0],
//18
[0,0,0,0,0,0],
//19
[0,0,0,0,0,0],
//20
[0,0,0,0,0,0],
//21
[0,0,0,0,0,0],
//22
[0,0,0,0,0,0],
//23
[0,0,0,0,0,0],
//24
[0,0,0,0,0,0],
//25
[0,0,0,0,0,0],
//26
[0,0,0,0,0,0],
//27
[0,0,0,0,0,0],
//28
[0,0,0,0,0,0],
//29
[0,0,0,0,0,0],
//30
[0,0,0,0,0,0],
//31
[0,0,0,0,0,0],
//32
[0,0,0,0,0,0],
//33
[0,0,0,0,0,0],
//34
[0,0,0,0,0,0],
//35
[0,0,0,0,0,0],
//36
[0,0,0,0,0,0],
//37
[0,0,0,0,0,0],
//38
[0,0,0,0,0,0],
//39
[0,0,0,0,0,0],
//40
[0,0,0,0,0,0],
//41
[0,0,0,0,0,0],
//42
[0,0,0,0,0,0],
//43
[0,0,0,0,0,0],
//44
[0,0,0,0,0,0],
//45
[0,0,0,0,0,0],
//46
[0,0,0,0,0,0],
//47
[0,0,0,0,0,0],
//48
[0,0,0,0,0,0],
//49
[0,0,0,0,0,0],
//50
[0,0,0,0,0,0],
//51
[0,0,0,0,0,0],
//52
[0,0,0,0,0,0],
//53
[0,0,0,0,0,0],
//54
[0,0,0,0,0,0],
//55
[0,0,0,0,0,0],
//56
[0,0,0,0,0,0],
//57
[0,0,0,0,0,0],
//58
[0,0,0,0,0,0],
//59
[0,0,0,0,0,0],
//60
[0,0,0,0,0,0],
//61
[0,0,0,0,0,0],
//62
[0,0,0,0,0,0],
//63
[0,0,0,0,0,0],
//64
[0,0,0,0,0,0],
//65
[0,0,0,0,0,0],
//66
[0,0,0,0,0,0],
//67
[0,0,0,0,0,0],
//68
[0,0,0,0,0,0],
//69
[0,0,0,0,0,0],
//70Other sounds
[0,0,0,0,0,0],
//71boss1
[0,0,0,0,0,0],
//72
[0,0,0,0,0,0],
//73
[0,0,0,0,0,0],
//74
[0,0,0,0,0,0],
//75
[0,0,0,0,0,0],
//76
[0,0,0,0,0,0],
//77
[0,0,0,0,0,0],
//78
[0,0,0,0,0,0],
//79
[0,0,0,0,0,0],
//80
[0,0,0,0,0,0],
//81
[0,0,0,0,0,0],
//82
[0,0,0,0,0,0],
//83
[0,0,0,0,0,0],
//84
[0,0,0,0,0,0]
]

responsecount=[
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0]
]

//snds=[
////yeancat
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
////ghost
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
////stardavid
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
////razzia
//[razziA1,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[razziA2,razziA2,razziA2,razziA2,razziA2,razziA2,razziA2,razziA2,razziA2,razziA2,razziA2,razziA2],
//[razziA5,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[razziA4,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[razziA6,razziA6,razziA6,razziA6,razziA6,razziA6,razziA6,razziA6,razziA6,razziA6,razziA6,razziA6],
//[razziA3,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
////razzib
//[razziF2,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,razziF1,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,razziF3,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[razziF4,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
////blackball
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
//[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound]

//]

//MACRO Variables
global.macro1=-85
global.macro2=30
global.macro3=.5
global.macro4=0
global.macro5=0
global.macro6=0
global.macro7=0
global.macro8=0
global.macro9=0
global.macro10=0

audio_listener_orientation(0,1,0,0,0,1);
cam=view_camera[0]
camscale=1
focusonboss=0
focustime=0
camovx=0
camovy=0
focusonbosss=0
camovxx=0
camovyy=0
moby=0

global.room_speed_set=60
rspeed=60
loading=2
if !audio_group_is_loaded(agMusic) {
	audio_group_load(agMusic);
}
if !audio_group_is_loaded(agSFX) {
audio_group_load(agSFX);
}
if !audio_group_is_loaded(agUI) {
audio_group_load(agUI);
}
if !audio_group_is_loaded(agDialouge) {
audio_group_load(agDialouge);
}
if !audio_group_is_loaded(agVocals) {
audio_group_load(agVocals);
}
if !audio_group_is_loaded(agMelodies) {
audio_group_load(agMelodies);
}
if !audio_group_is_loaded(agDrums) {
audio_group_load(agDrums);
}
if !audio_group_is_loaded(agBass) {
audio_group_load(agBass);
} else {
	start=1
}
music_emitter = audio_emitter_create();
music_bus = audio_bus_create();
audio_emitter_position(music_emitter,room_width/2,room_height/2,0)
audio_emitter_bus(music_emitter, music_bus);


_hp_effect = audio_effect_create(AudioEffectType.HPF2);
_lp_effect = audio_effect_create(AudioEffectType.LPF2);
_reverb = audio_effect_create(AudioEffectType.Reverb1);

//_comp_effect = audio_effect_create(AudioEffectType.Compressor);
//_comp_effect.gain = -3; // No change to input gain
//_comp_effect.threshold = -6; // -18 dB
//_comp_effect.ratio = 2.5; // 3:1 ratio
//_comp_effect.attack = .020; // 20 ms
//_comp_effect.release = .150; // 150 ms
//_comp_effect.outgain = 3; // +3 dB make-up gain
//_comp_effect.mix = 1; // Assuming 100% is full compression effect
//audio_bus_main.effects[0] = _comp_effect;

//_comp_effect.bypass



_lp_effect.cutoff = master_cutoff;
_hp_effect.cutoff = master_highpass;
_reverb.mix = master_reverb;
music_bus.effects[0] = _hp_effect;
music_bus.effects[1] = _lp_effect;


speedgui=1
slidegui=0
hidecompletedunlocks=0
hidelockedcol=0

//tasks
//what it unlocks, 1requirement,2progress,3completed?,4image,5visible?,6rewardtype, 7collectionid (if item), 8 seen, 9cumulative?,10 instruction, 11 collection id
//requirement id: 0= time survived, 1certain enemy killed
//rewardtype //type: 0=character, 1=weapon, 2=passive, 3=item, 4=stage, 5=music, 6=gamemode, 7=planet, 8=font, 9=trail, 10=body, 11=head, 12=hat, 13=perk unlock, 14=other, 

tasks = [
["Life of the Party","Survive 3 Minutes",0,0,spr_lifeoftheparty,0,2,12,0,0,"You Unlocked a New Ability!"],
["Glory","Survive 10 Minutes\nWith Yean Cat",0,0,spr_album,0,5,0,0,0,"You Unlocked a New Song!"],
["Love","Kill 500 Enemies\nIn 1 Game",0,0,spr_love,0,2,14,0,0,"You Unlocked a New Ability!"],
["Taylor Swan","Defeat Taylor Swan",0,0,spr_love,0,0,1,0,0,"You Unlocked a New Character!"],

["Spectacle","Survive 10 Minutes\nWith Taylor Swan",0,0,spr_graduate,0,2,20,0,0,"You Unlocked a New Ability!"],
["Cancelled","Kill 100 Blackballs",0,0,spr_album,0,5,1,0,0,"You Unlocked a New Song!"],
["Wealth","Kill 100 Gold Diggers",0,0,spr_wealth,0,2,21,0,0,"You Unlocked a New Ability!"],
["Futurtle","Defeat Futurtle",0,0,spr_nyan,0,0,2,0,0,"You Unlocked a New Character!"],

["Graduate","Kill 300 Graduates",0,0,spr_graduate,0,2,8,0,0,"You Unlocked a New Ability!"],
["Water into Drank","Survive 10 Minutes\nWith Futurtle",0,0,spr_album,0,5,2,0,0,"You Unlocked a New Song!"],
["Fame","Kill 3000 Enemies\nWith Futurtle",0,0,spr_fame,0,2,6,0,0,"You Unlocked a New Ability!"],
["Kim Chameleon","Defeat Kim Chameleon",0,0,spr_nyan,0,0,3,0,0,"You Unlocked a New Character!"],

["Law of Attraction","Survive 10 Minutes\nWith Kim Chameleon",0,0,spr_lawofattraction,0,2,11,0,0,"You Unlocked a New Ability!"],
["Winter's Cold","Kill 300 Frozen Hearts\nIn 1 Game",0,0,spr_album,0,5,3,0,0,"You Unlocked a New Song!"],
["Heartbreak","Kill 1000 Broken Rings",0,0,spr_heartbreak,0,2,10,0,0,"You Unlocked a New Ability!"],
["Travis Squawk","Defeat Travis Squawk",0,0,spr_nyan,0,0,4,0,0,"You Unlocked a New Character!"],

["Power","Kill 5000 Enemies\nWith Travis Squawk",0,0,spr_power,0,2,18,0,0,"You Unlocked a New Ability!"],
["Freeing Christ","Survive 15 Minutes\nWith Travis Squawk",0,0,spr_album,0,5,4,0,0,"You Unlocked a New Song!"],
["Monster","Kill 500 Monsters\nIn 1 Game",0,0,spr_monster,0,2,17,0,0,"You Unlocked a New Ability!"],
["Bee-yonce","Defeat Bee-yonce",0,0,spr_nyan,0,0,5,0,0,"You Unlocked a New Character!"],

["Ego","Kill 100,000 Enemies",0,0,spr_ego,0,2,4,0,0,"You Unlocked a New Ability!"],
["Majestic","Survive 15 Minutes\nWith Bee-yonce",0,0,spr_album,0,5,5,0,0,"You Unlocked a New Song!"],
["Wisdom","Amass 2 Hours\nof Play Time",0,0,spr_wisdom,0,2,22,0,0,"You Unlocked a New Ability!"],
["Peacocky 96","Defeat Peacocky 96",0,0,spr_nyan,0,0,6,0,0,"You Unlocked a New Character!"],

["Mercy","Survive 15 Minutes\nWith Peacocky 96",0,0,spr_mercy,0,2,15,0,0,"You Unlocked a New Ability!"],
["Lucille","Kill 200,000 Enemies",0,0,spr_album,0,5,8,0,0,"You Unlocked a New Song!"],
["Donda's Blessing","Amass 3 Hours\nof Play Time",0,0,spr_dondasblessing,0,2,3,0,0,"You Unlocked a New Ability!"],
["Lil Hump","Defeat Lil Hump",0,0,spr_nyan,0,0,7,0,0,"You Unlocked a New Character!"],

["Free Will","Amass 4 Hours\nof Play Time",0,0,spr_freewill,0,2,7,0,0,"You Unlocked a New Ability!"],
["808s and Heartbreaks","Kill 300,000 Enemies",0,0,spr_album,0,5,7,0,0,"You Unlocked a New Song!"],
["Prescription","Survive 15 Minutes\nWith Lil Hump",0,0,spr_prescription,0,2,19,0,0,"You Unlocked a New Ability!"],
["Rehino","Defeat Rehino",0,0,spr_nyan,0,0,8,0,0,"You Unlocked a New Character!"],

["Heart","Survive 15 Minutes\nWith Rehino",0,0,spr_heart,0,2,9,0,0,"You Unlocked a New Ability!"],
["Ella y El","Kill 400,000 Enemies",0,0,spr_album,0,5,6,0,0,"You Unlocked a New Song!"],
["Einstein","Amass 5 Hours\nof Play Time",0,0,spr_einstein,0,2,26,0,0,"You Unlocked a New Ability!"],
["Emunem","Defeat Emunem",0,0,spr_nyan,0,0,9,0,0,"You Unlocked a New Character!"],

["Faith","Survive 20 Minutes\nWith Emunem",0,0,spr_faith,0,2,5,0,0,"You Unlocked a New Ability!"],
["Ye of Little Faith","Kill 500,000 Enemies",0,0,spr_album,0,5,9,0,0,"You Unlocked a New Song!"],
["Miracle","Amass 6 Hours\nof Play Time",0,0,spr_miracle,0,2,16,0,0,"You Unlocked a New Ability!"],
["21 Salamander","Defeat 21 Salamander",0,0,spr_nyan,0,0,10,0,0,"You Unlocked a New Character!"],

["Vanish Mode","Amass 8 Hours\nof Play Time",0,0,spr_vanishmode,0,2,25,0,0,"You Unlocked a New Ability!"],
["Chasing Ghosts","Kill 600,000 Enemies",0,0,spr_album,0,5,10,0,0,"You Unlocked a New Song!"],
["Curse","Survive 20 Minutes\nWith 21 Salamander",0,0,spr_curse,0,2,2,0,0,"You Unlocked a New Ability!"],
["Lil Sheep","Defeat Lil Sheep",0,0,spr_nyan,0,0,11,0,0,"You Unlocked a New Character!"],

["Longevity","Survive 25 Minutes\nWith Lil Sheep",0,0,spr_longevity,0,2,13,0,0,"You Unlocked a New Ability!"],
["40 Years","Kill 750,000 Enemies",0,0,spr_album,0,5,11,0,0,"You Unlocked a New Song!"],
["Bound 2 Fortune","Have $3,000,000\at Once",0,0,spr_bound2fortune,0,2,0,0,0,"You Unlocked a New Ability!"],
["Squid Cudi","Defeat Squid Cudi",0,0,spr_nyan,0,0,12,0,0,"You Unlocked a New Character!"],

["Clone","Amass 10 Hours\nof Play Time",0,0,spr_clone,0,2,24,0,0,"You Unlocked a New Ability!"],
["Praise God","Kill 1,000,000 Enemies",0,0,spr_album,0,5,12,0,0,"You Unlocked a New Song!"],
["Wonder","Survive 25 Minutes\nWith Squid Cudi",0,0,spr_wonder,0,2,23,0,0,"You Unlocked a New Ability!"],
["Kid Boo","Defeat Kid Boo",0,0,spr_nyan,0,0,13,0,0,"You Unlocked a New Character!"],

["Champion","Survive 30 Minutes\nWith Kid Boo",0,0,spr_champion,0,2,1,0,0,"You Unlocked a New Ability!"],
["In the End","Kill 2,000,000 Enemies",0,0,spr_album,0,5,13,0,0,"You Unlocked a New Song!"],
["Dracoon","Defeat Dracoon",0,0,spr_nyan,0,0,14,0,0,"You Unlocked a New Character!"]
]

visitedplanets=[0,0,0,0,0,0,0,0,0,0,0,0,0,0]// store which planets have been visited and unlocked.

//achievements
//name, 1requirement, 2achieved?, 3visible?, 4rarity, 5image, 6seen, 7 progress
//rarity: 1=bronze, 2=silver, 3=gold, 4=platinum
achievements = [
["Through the Wire","Last 10 Minutes in a Game",0,1,1,spr_throwaway,0,0],
["Late Registration","Play for 1 Hour",0,1,1,spr_throwaway,0,0],
["Lyrical Resilience","Die 10 Times",0,1,1,spr_throwaway,0,0],
["Penny for Your Thoughts","Get Hit by 100 Pennies",0,1,1,spr_throwaway,0,0],
["Yeezus Unleashed","Reach Level 100 in a Game",0,1,1,spr_throwaway,0,0]
]

//shop// NOT BEING USED YET. THE CURRENT SHOP ONLY HAS 1 THING FOR PURCHASE: ADDITIONAL WEAPON SLOTS
//name, type, bought?, price, collectionid, seen, image
//rewardtype //type: 0=character, 1=weapon, 2=passive, 3=item, 4=stage, 5=music, 6=gamemode, 7=other, 
shop=[
["Shades", 3, 0, 500, 5,0,spr_shades,4],
["Kim K", 0, 0, 1000, -1,0,spr_kimk,2],
["Bee-yonce", 0, 0, 100000, -1,0,spr_beeyonce,5]
] //UNUTILLIZED
//SHOP RELATED STATS//NOT USED JUST SET UP AS CONCEPT// 
//PLAYERS MIGHT BE ABLE TO CREATE THEIR OWN ARMY OF ENEMIES WHICH PLAYERS CAN TACKLE, ENDED WITH A CUSTOM BOSS. PLAYERS ARE REWARDED WHEN OTHERS FAIL TO BEAT THEIR GAME RULES, AND PENALIED WHEN OTHER PLAYERS SUCCEED.
idle_war= [
[0,0,0,0,0,0],//pid=
[0,0,0,0,0,0],//plvl=
[0,0,0,0,0,0],//wid=
[0,0,0,0,0,0],//wlvl=
[0,0,0,0,0,0],//idle_enem_id
[0,0,0,0,0,0],//idle_enem_rarity
[0,0,0,0,0,0],//idle_enem_lvl
[0,0,0,0,0,0],//idle_enem_modifier
[0,0,0,0,0,0],//idle_enem_health
[0,0,0,0,0,0],//idle_enem_damage
[0,0,0,0,0,0],//idle_enem_rate
[0,0,0,0,0,0]//idle_enem_resistance
] //UNUTILLIZED

max_character=0 //UNUTILLIZED
max_char_level=0 //UNUTILLIZED

idle_war_herolvl=1 //UNUTILLIZED
idle_war_champion=0 //UNUTILLIZED

lasttimedefeated=0 //UNUTILLIZED
lastvictory=0 //UNUTILLIZED

//options
mastervol=.9
mastervolset=.9
uiscale=1
musicvol=.7
sfxvol=.8
dialougevol=.8
uivol=.8

optionarray=[
["mastervolset","MASTER VOLUME",master],
["musicvol","MUSIC VOLUME",master],
["sfxvol","SFX VOLUME",master],
["dialougevol","DIALOUGE VOLUME",master],
["uivol","UI VOLUME",master],
["uiscale","UI SCALE",master]
]

damagenumbers=1
moneynumbers=1
muteall=0

dollarhide=0
specialfx=1
//mobile
joystick=0
if os_type=os_ios or os_type=os_android {
joystick=1
}
joystickx=0
joysticky=0
joystickon=0
joydist=0
joyangle=0
joysticksize=2.5

//0discovered:0no1yes,2YES  1unlocked: 0no, 1yes, 2,YES, 2level,3levelcap
notice=[
[0,0,0,10],
[0,0,0,10],
[0,0,0,10],
[0,0,0,-1],
[0,0,0,10],
[0,0,0,10],
[0,0,0,10],
[0,0,0,10],
[0,0,0,10],
[0,0,0,10],
[0,0,0,10],
[0,0,0,10],
[0,0,0,10],
[0,0,0,10],
[0,0,0,10],
[0,0,0,-1],
[0,0,0,3],
[0,0,0,10],
[0,0,0,10],
[0,0,0,-1],
[0,0,0,10],
[0,0,0,10],
[0,0,0,10],
[0,0,0,10],
[0,0,0,3],
[0,0,0,10],
[0,0,0,25]
]

upgradetot=0;

mainmenu=1
//looking for trouble (hard mode)
lookingfortrouble=0
//No cap (unlimited upgrade)
nocap=0
//no time limit
endurance=0
//spawnitems
cantgivemenothing=0

dondadollars=0;
dondadollarsprevious=dondadollars;
dolcen=display_get_gui_width()/2
choiceluck=10
luck=1
dollarfade=1
modes=[
1,
1,
1,
1
]

//stages
//0name,1id, 2xp mult, 3dollar mult, 4enemy quantity, 5enemy health,6length seconds, 7 unlocked?
//8 desc
stages=[
["Yean Cat",1,1,1,1,1,1800,1,""],
["Donda 3",2,1,1,1,1,2013,1,""]
]
fullscreen=1
selectedstage=0

if mainmenu=1 {
	instance_create_layer(room_width, room_height/2-50, "uii", obj_start);
	instance_create_layer(room_width, room_height/2-350, "uiitop", obj_logo);
	instance_create_layer(0, 0, "uiitop", obj_gear);
	instance_create_layer(0, 0, "uiitop", quit_button);
		instance_create_layer(0, 0, "uiitop", obj_stats);
	instance_create_layer(0, 0, "uiitop", obj_grammyicon);
	
	instance_create_layer(room_width, room_height/2+125, "uii", obj_upgrade);
	instance_create_layer(room_width, room_height/2+300, "uii", obj_unlock);
}


tiprev=0;
stemplay=0
stemtime=0
record=0;

if record=1 {
drumvol=1
bassvol=1
melodyvol=1
vocalvol=1
} else {
drumvol=0
bassvol=0
melodyvol=0
vocalvol=0
}
checkwep=0

sg = audio_create_sync_group(true);
sound1=dondavocals
sound2=dondamelody
sound3=dondadrums
sound4=dondabass

damef=0
damgro=1
fadedam=0
gwidth = display_get_gui_width()
gheight = display_get_gui_height()
sss=1

global.pause=0
global.upg=0


sfx=[
eatsound,gun1,gun2,gun3,flash1,flash2,flash3,hurt1,hurt2,hurt3,levelupsound,xp1,xp2,xp3,xp4,xp5,xp6,xp7,yehurt1,yehurt2,yehurt3
]
musik=[
yeancat_music_intro,yeancat_music_loop,yeealittle,winterscold,waterintodrank,praisegod,majestic,lucille,intheend,heartache,glory,freeingchrist,fourtyyears,ellayel,chasingghosts,cancelled
]

track1=glory
track2=cancelled
track3=waterintodrank
track4=winterscold
track5=freeingchrist
track6=majestic
track7=ellayel
track8=heartache
track9=lucille
track10=yeealittle
track11=chasingghosts
track12=fourtyyears
track13=praisegod
track14=intheend

dialouge=[
pennyhitsound,pennymisssound,defconscream,kanyreremark1,kanyreremark2,kanyreremark3,kanyreremark4,kanyreremark5,kanyreremark6,kanyreremark7,
razziA1,razziA2,razziA3,razziA4,razziB1,razziB2,razziB3,razziB4,razziF1,razziF2,razziF3,razziF4
]

vocal=[dondavocals]
melody=[dondamelody]
drum=[dondadrums]
bass=[dondabass]

control = false
sfx_loaded=false;
stems_loaded=false;
revani=0
speedd=10
magnet=100
time=0
vert=0
horz=0
ti=0


level=1
levellast=level;
xp=0
xpprev=0
xpto=2
xpcount=0
xpbuff=0;

spawnthings=false;

//key for xp
keypitch=1
key=0
//F#Major/EbMinor
//key=0
//GMajor/EMinor
//key=1
//G#Major/FMinor
//key=2
//AMajor/F#Minor
//key=3
//A#Major/GMinor
//key=4
//BMajor/G#Minor
//key=5
//CMajor/AMinor
//key=6
//DbMajor/A#Minor
//key=7
//DMajor/BMinor
//key=8
//EbMajor/CMinor
//key=9
//EMajor/C#Minor
//key=10
//FMajor/DMinor
//key=11

dollarslide=0

devmode=0
bboo=0




spawnitem=0
dondaunlocked=0
donda3=0
track=1

loop=1
delta_second = 1000000;
second=0;
minute=0;
hour=0;
lower=0


startmusic=1;

charscreams=[
defconscream,
nothingsound,
nothingsound,
nothingsound,
nothingsound,
nothingsound,
nothingsound,
nothingsound,
rehinoscream,
emunemscream,
nothingsound,
nothingsound,
nothingsound,
nothingsound
]

soundscream=audio_play_sound(nothingsound,0,0);
music=audio_play_sound(nothingsound,0,0);
bossmusic=audio_play_sound(nothingsound,0,0);
audio_stop_all();

bossp=1

mobfreqset=100
mobfreq=mobfreqset

foodfreqset=450
foodchance=30
foodfreq=foodfreqset

itemfrequencyset=5
rampitem=0;
itemfrequency=itemfrequencyset*1000000

dirmov=0
dirmovs=0
//ENEMIES
//position //1name //2health //3resistance0-1invincible /4/rate //5attacktype //6damage //7movetype //8 //9image //10released //11appearance [0=character,1=boss] //12appearanceid //13planetid
spaceboss=[
[7.5,"Futurtle",1000,.25,1,1,1,4,1,spr_boss1,0,0,2,13],
[27.5,"Travis Squawk",3333,.35,1,1,1,4,1,spr_boss1,0,0,4,12],
[50,"Peacocky 69",6969,.45,1,1,1,4,1,spr_boss1,0,0,6,11],
[70,"Rehino",13000,.65,1,1,1,4,1,spr_boss1,0,0,8,10],
[90,"22 Salamander",22222,.75,1,1,1,4,1,spr_boss1,0,0,10,9],
[122,"Squid Cudi",100000,.85,1,1,1,4,1,spr_boss1,0,0,12,8],
[163,"Dracoon",666666,.9,1,1,1,4,1,spr_boss1,0,0,14,7],
[212,"Kid Boo",111111,.9,1,1,1,4,1,spr_boss1,0,0,13,6],
[257,"Lil Sheep",66666,.8,1,1,1,4,1,spr_boss1,0,0,11,5],
[280,"Emunem",40000,.7,1,1,1,4,1,spr_boss1,0,0,9,4],
[300,"Lil Hump",40000,.6,1,1,1,4,1,spr_boss1,0,0,7,3],
[320,"Bee-Yonce",10000,.5,1,1,1,4,1,spr_boss1,0,0,5,2],
[337,"Kim Chameleon",5000,.4,1,1,1,4,1,spr_boss1,0,0,3,1],
[352,"Taylor Swan",500,.3,1,1,1,4,1,spr_boss1,0,0,1,0]
]


groundboss=[
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0]
]

//0object, 1spawning?, 2size (1 normal), 3resistance (none,0-1,invincible), 4damage (1 normal),5speed (1 normal),6xp(0none,1,normal),7rarity,8 dollars,9health,	
//10=direction 0=left,1r,2u,3d,4dl,5ul,6ru,7rd,8random
//11=gravity?
//12: 1=onlylr,2=only ud
//13:flying
	mob = [
		[ghost,1,.75,0,1,1,1,1,1,1,0,0,0,1],
		[stardavid,1,.6,0,1,1.5,1,3,1,1,3,0,0,1],
		[razziA,1,1,0,1,.5,1,10,1,1,8,1,1,0],
		[razziF,1,1,0,.7,.7,1,10,1,1,8,1,1,0],
		[ghost,1,.75,0,1,1,1,1,1,1,0,0,0,1],
		[stardavid,1,.6,0,1,1.5,1,3,1,1,3,0,0,1],
		[razziA,1,1,0,1,.5,1,10,1,1,8,1,1,0],
		[razziF,1,1,0,.7,.7,1,10,1,1,8,1,1,0],
		[ghost,1,.75,0,1,1,1,1,1,1,0,0,0,1],
		[stardavid,1,.6,0,1,1.5,1,3,1,1,3,0,0,1]
	];
	mobarray = [		//SP? SZ,R	,Dam,Speed	,XP	,Rar,Dol,HP	,Dir,Grv,H/V,Fly?
	//earth
		[stardavid		,1,.6	,0	,1	,1.5	,1	,3	,1	,1	,3	,0	,0	,1],//0
		[razziA			,1,1.1	,.2	,1	,.5		,1	,10	,1	,3	,8	,1	,1	,0],
		[bearenemy		,1,1.1	,.3	,2,.7		,1	,20	,2	,4	,8	,1	,1	,0],
		[razziF			,1,1.1	,.2	,1	,.6		,1	,10	,1	,3	,8	,1	,1	,0],
		[musicexec		,1,1.1	,.3	,2,.7		,1	,20	,2	,4	,8	,1	,1	,0],
	//goldmines
		[grammyenemy	,1,.75	,0	,1	,1		,1	,1	,1	,2	,0	,0	,0	,1],//5
		[taylorfan		,1,1.1	,.2	,1	,.5		,1	,10	,1	,3	,8	,1	,1	,0],
		[golddigger		,1,1.1	,.2	,.7	,.6		,1	,10	,1	,4	,8	,1	,1	,0],
		[blackball		,1,1	,.8 ,4	,1		,4  ,50 ,4  ,3	,8	,0	,0	,1],
		[musicexec		,1,1.1	,.3	,1.2,.7		,1	,20	,2	,4.5,8	,1	,1	,0],//REPLACE with x boyfriend
	//university
		[capenemy		,1,.75	,0	,1	,1		,1	,1	,1	,3	,0	,0	,0	,1],//10
		[graduateenemy	,1,1.1	,.2	,1	,.5		,1	,10	,1	,4	,8	,1	,1	,0],
		[fiftycent		,1,.75	,0	,1	,1		,1	,1	,1	,3	,0	,0	,0	,1],
		[fpaper			,1,1	,.8 ,4	,1		,4  ,50 ,4  ,5	,8	,0	,0	,1],
		[professor		,1,1.1	,.3	,1.2,.7		,1	,20	,2	,6	,8	,1	,1	,0],
	//icyheart
		[frozenrose		,1,.6	,0	,1	,1.5	,1	,3	,1	,3	,3	,0	,0	,1],//15
		[frozenheart	,1,.75	,0	,1	,1		,1	,1	,1	,4	,0	,0	,0	,1],
		[graduateenemy	,1,1.1	,.2	,1	,.5		,1	,10	,1	,6	,8	,1	,1	,0],//replace
		[brokenring		,1,1	,.8 ,4	,1		,4  ,50 ,4  ,3	,8	,0	,0	,1],
		[surgeon		,1,1.1	,.2	,.7	,.6		,1	,10	,1	,7	,8	,1	,1	,0],		
	//fantasia
		[monsterenemy	,1,1.1	,.2	,1	,.5		,1	,10	,1	,5	,8	,1	,1	,0],//20
		[liquorbottle	,1,.75	,0	,1	,1		,1	,1	,1	,4	,0	,0	,0	,1],
		[devilinadress	,1,1.1	,.2	,1	,.5		,1	,10	,1	,7	,8	,1	,1	,0],
		[blackball		,1,1	,.8 ,4	,1		,4  ,50 ,4  ,4	,8	,0	,0	,1],//replace
		[nightdemon		,1,1.1	,.2	,.7	,.6		,1	,10	,1	,8	,8	,1	,1	,0],	
	//kingdom
		[monsterenemy	,1,1.1	,.2	,1	,.5		,1	,10	,1	,3	,8	,1	,1	,0],//25
		[liquorbottle	,1,.75	,0	,1	,1		,1	,1	,1	,1	,0	,0	,0	,1],
		[devilinadress	,1,1.1	,.2	,1	,.5		,1	,10	,1	,3	,8	,1	,1	,0],
		[blackball		,1,1	,.8 ,4	,1		,4  ,50 ,4  ,5	,8	,0	,0	,1],//replace
		[nightdemon		,1,1.1	,.2	,.7	,.6		,1	,10	,1	,3	,8	,1	,1	,0],
	//lucy
		[cancelledsign	,1,.6	,0	,1	,1.5	,1	,2	,1	,1	,3	,0	,0	,1],//30
		[razziA			,1,1.1	,.2	,1	,.5		,1	,10	,1	,3	,8	,1	,1	,0],
		[blackball		,1,1	,.8 ,4	,1		,4  ,50 ,4  ,5	,8	,0	,0	,1],
		[razziF			,1,1.1	,.2	,1	,.6		,1	,10	,1	,3	,8	,1	,1	,0],
		[musicexec		,1,1.1	,.3	,2,.7		,1	,20	,2	,4	,8	,1	,1	,0],
	//yetopia
		[cancelledsign	,1,.6	,0	,1	,1.5	,1	,2	,1	,1	,3	,0	,0	,1],//35
		[razziA			,1,1.1	,.2	,1	,.5		,1	,10	,1	,3	,8	,1	,1	,0],
		[blackball		,1,1	,.8 ,4	,1		,4  ,50 ,4  ,5	,8	,0	,0	,1],
		[razziF			,1,1.1	,.2	,1	,.6		,1	,10	,1	,3	,8	,1	,1	,0],
		[musicexec		,1,1.1	,.3	,2,.7		,1	,20	,2	,4	,8	,1	,1	,0],
	//pablo
		[cancelledsign	,1,.6	,0	,1	,1.5	,1	,2	,1	,1	,3	,0	,0	,1],//40
		[razziA			,1,1.1	,.2	,1	,.5		,1	,10	,1	,3	,8	,1	,1	,0],
		[blackball		,1,1	,.8 ,4	,1		,4  ,50 ,4  ,5	,8	,0	,0	,1],
		[razziF			,1,1.1	,.2	,1	,.6		,1	,10	,1	,3	,8	,1	,1	,0],
		[musicexec		,1,1.1	,.3	,2,.7		,1	,20	,2	,4	,8	,1	,1	,0],
	//divinedomain
		[cancelledsign	,1,.6	,0	,1	,1.5	,1	,2	,1	,1	,3	,0	,0	,1],//45
		[razziA			,1,1.1	,.2	,1	,.5		,1	,10	,1	,3	,8	,1	,1	,0],
		[blackball		,1,1	,.8 ,4	,1		,4  ,50 ,4  ,5	,8	,0	,0	,1],
		[razziF			,1,1.1	,.2	,1	,.6		,1	,10	,1	,3	,8	,1	,1	,0],
		[musicexec		,1,1.1	,.3	,2,.7		,1	,20	,2	,4	,8	,1	,1	,0],
	//ghosttown
		[ghost			,1,.75	,0	,1	,1		,1	,1	,1	,1	,0	,0	,0	,1],//50
		[liquorbottle	,1,.75	,0	,1	,1		,1	,1	,1	,1	,0	,0	,0	,1],//REPLACe
		[devilinadress	,1,1.1	,.2	,1	,.5		,1	,10	,1	,3	,8	,1	,1	,0],//replace
		[blackball		,1,1	,.8 ,4	,1		,4  ,50 ,4  ,5	,8	,0	,0	,1],//replace
		[nightdemon		,1,1.1	,.2	,.7	,.6		,1	,10	,1	,3	,8	,1	,1	,0],//replace
	//stormysand
		[stardavid		,1,.6	,0	,1	,1.5	,1	,3	,1	,2	,3	,0	,0	,1],//55
		[razziA			,1,1.1	,.2	,1	,.5		,1	,10	,1	,3	,8	,1	,1	,0],
		[blackball		,1,1	,.8 ,4	,1		,4  ,50 ,4  ,5	,8	,0	,0	,1],
		[razziF			,1,1.1	,.2	,1	,.6		,1	,10	,1	,3	,8	,1	,1	,0],
		[musicexec		,1,1.1	,.3	,2,.7		,1	,20	,2	,4	,8	,1	,1	,0],
	//vulture
		[cancelledsign	,1,.6	,0	,1	,1.5	,1	,2	,1	,1	,3	,0	,0	,1],//60
		[razziA			,1,1.1	,.2	,1	,.5		,1	,10	,1	,3	,8	,1	,1	,0],
		[vulture		,1,1.1	,.3	,2,.7		,1	,20	,2	,4	,8	,1	,1	,0],//61
		[razziF			,1,1.1	,.2	,1	,.6		,1	,10	,1	,3	,8	,1	,1	,0],
		[musicexec		,1,1.1	,.3	,2,.7		,1	,20	,2	,4	,8	,1	,1	,0],
	//theendonda
		[cancelledsign	,1,.6	,0	,1	,1.5	,1	,2	,1	,1	,3	,0	,0	,1],//65
		[razziA			,1,1.1	,.2	,1	,.5		,1	,10	,1	,3	,8	,1	,1	,0],
		[blackball		,1,1	,.8 ,4	,1		,4  ,50 ,4  ,5	,8	,0	,0	,1],
		[razziF			,1,1.1	,.2	,1	,.6		,1	,10	,1	,3	,8	,1	,1	,0],
		[musicexec		,1,1.1	,.3	,2,.7		,1	,20	,2	,4	,8	,1	,1	,0],
	//??
		[cancelledsign	,1,.6	,0	,1	,1.5	,1	,2	,1	,1	,3	,0	,0	,1],//70
						//SP? SZ,R	,Dam,Speed	,XP	,Rar,Dol,HP	,Dir,Grv,H/V,Fly?
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
	];
	mobground=[
	[70,1,2,3,4],//earth
	[10,11,12,13,14],//university
	[20,21,22,23,24],//fantasia
	[70,31,32,33,34],//lucy
	[70,41,42,43,44],//pablo
	[70,51,52,53,54],//ghostown
	[70,61,62,63,64],//vulture
	[70,66,67,68,69],//theendonda
	[0,56,57,58,59],//stormysand
	[70,46,47,48,49],//divinedomain
	[70,36,37,38,39],//yetopia
	[70,26,27,28,29],//kingdom
	[15,16,17,18,19],//icyheart
	[5,6,7,8,9],//goldmines
	[70,1,2,3,-1]
	]
//0,5,8,10,12,15,16,18,21,
	mobspace=[
	[70,5,8,70,5],//earth
	[5,8,10,12,8],//university
	[12,5,8,18,21],//fantasia
	[15,16,18,21,5],//lucy
	[5,16,18,21,8],//pablo
	[50,16,50,21,50],//ghostown
	[5,8,50,21,8],//vulture
	[5,50,8,21,8],//theendonda
	[5,8,50,21,70],//stormysand
	[5,8,0,21,8],//divinedomain
	[5,8,50,21,8],//yetopia
	[15,5,18,21,8],//kingdom
	[12,15,16,18,21],//icyheart
	[5,8,10,12,15],//goldmines
	[70,5,8,0,5]
	]
	mobscharacters=[
	[70,1,2,3,0],
	[5,6,7,8,9],
	[10,11,12,13,14],
	[15,16,17,18,19],
	[20,21,22,23,24],
	[25,26,27,28,29],
	[30,31,32,33,34],
	[35,36,37,38,39],
	[40,41,42,43,44],
	[45,46,47,48,49],
	[50,51,52,53,54],
	[55,56,57,58,59],
	[60,61,62,63,64],
	[65,66,67,68,69],
	[70,1,2,3,-1]
	]

//killtrack
//thisrun
runkills= [
0, //0star of david
0, //1razzi Male
0, //2 bear
0, //3razzi female
0, //4blackball
0, //5executive
0,	//6
0,	//7 golddigger
0,	//8 blackball
0,	//9 music exec
0,	//10 cap
0,	//11 graduate
0,	//12 50cent
0,	//13 paper
0,	//14 professor
0,	//15 rose
0,	//16 heart
0,	//17
0,	//18 brokenring
0,	//19 surgeon
0,	//20 monster
0,	//21 liquor
0,	//22 devil in a dress
0,	//23
0,	//24 night demon
0,	//25
0,	//26
0,	//27
0,	//28
0,	//29
0,	//30
0,	//31
0,	//32
0,	//33
0,	//34
0,	//35
0,	//36
0,	//37
0,	//38
0,	//39
0,	//40
0,	//41
0,	//42
0,	//43
0,	//44
0,	//45
0,	//46
0,	//47
0,	//48
0,	//49
0,	//50 ghost
0,	//51
0,	//52
0,	//53
0,	//54
0,	//55
0,	//56
0,	//57
0,	//58
0,	//59
0,	//60
0,	//61
0,	//62
0,	//63
0,	//64
0,	//65
0,	//66
0,	//67
0,	//68
0,	//69
0	//70
]

killrec=0
overallkills=0
overallkillsgame=0
killcount=0
killcountlast=0
kps=0



//alltime
allkills= [
0, //0star of david
0, //1razzi Male
0, //2 bear
0, //3razzi female
0, //4blackball
0, //5executive
0,	//6
0,	//7 golddigger
0,	//8 blackball
0,	//9 music exec
0,	//10 cap
0,	//11 graduate
0,	//12 50cent
0,	//13 paper
0,	//14 professor
0,	//15 rose
0,	//16 heart
0,	//17
0,	//18 brokenring
0,	//19 surgeon
0,	//20 monster
0,	//21 liquor
0,	//22 devil in a dress
0,	//23
0,	//24 night demon
0,	//25
0,	//26
0,	//27
0,	//28
0,	//29
0,	//30
0,	//31
0,	//32
0,	//33
0,	//34
0,	//35
0,	//36
0,	//37
0,	//38
0,	//39
0,	//40
0,	//41
0,	//42
0,	//43
0,	//44
0,	//45
0,	//46
0,	//47
0,	//48
0,	//49
0,	//50 ghost
0,	//51
0,	//52
0,	//53
0,	//54
0,	//55
0,	//56
0,	//57
0,	//58
0,	//59
0,	//60
0,	//61
0,	//62
0,	//63
0,	//64
0,	//65
0,	//66
0,	//67
0,	//68
0,	//69
0	//70
]

recordkill=0
recordtime=0
recordlevel=0

playtime=0
playtimegame=0
chartotalkill=[
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
]
chartotalkillgame=[
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
]
charrecordkill=[
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1
]
charrecordtime=[
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1
]
charrecordlevel=[
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1
]


//CHECKING KILL COUNT OF AN ENEMY

////check total kills
//var enid = "INSERT ID"
//var tarkil = "TARGET NUMBER"
//if runkills[enid]+allkills[enid] >= tarkil {
//	//RUN TASK COMPLETION CODE
//}

////check run kills
//var enid = "INSERT ID"
//var tarkil = "TARGET NUMBER"
//if runkills[enid] >= tarkil {
//	//RUN TASK COMPLETION CODE
//}


//0object,
//1can spawn,
//2has spawned
//3collected?
//4rarity(1=100%,2=50%)
//5variant
//6 good=1, bad=-1; neutral=0 (for determining luck)
ite=noone
xcent=0
centfade=-1
dollarcent=""
//ITEMS
itemsload = [
[penny,1,0,0,20,0,0],
[dondadollar,0,0,0,1,1,1],
[bigmac,1,0,0,10,0,1],
[bigmac,0,0,0,10,1,1],
[defcon,1,0,0,100,1,1],
[defcon,0,0,0,200,2,1],
[defcon,0,0,0,300,3,1],
[defcon,0,0,0,400,4,1],
[defcon,0,0,0,500,5,1],
[shades,0,0,0,600,0,1],
[obj_oxycontin,1,0,0,100,1,1],
[obj_oxycontin,0,0,0,200,2,1],
[obj_oxycontin,0,0,0,300,3,1],
[obj_oxycontin,0,0,0,400,4,1],
[obj_oxycontin,0,0,0,500,5,1],
[obj_passiveitem,0,0,0,250,0,1],
[obj_passiveitem,0,0,0,250,1,1],
[obj_passiveitem,0,0,0,250,2,1],
[obj_passiveitem,0,0,0,250,3,1],
[obj_passiveitem,0,0,0,250,4,1],
[obj_passiveitem,0,0,0,250,5,1],
[obj_passiveitem,0,0,0,250,6,1],
[obj_passiveitem,0,0,0,250,7,1],
[obj_passiveitem,0,0,0,250,8,1],
[obj_passiveitem,0,0,0,250,9,1],
[obj_passiveitem,0,0,0,250,10,1],
[obj_passiveitem,0,0,0,250,11,1],
[obj_passiveitem,0,0,0,250,12,1],
[obj_passiveitem,0,0,0,250,13,1],
[obj_passiveitem,0,0,0,250,14,1],
[obj_passiveitem,0,0,0,250,15,1],
[obj_passiveitem,0,0,0,250,16,1],
[obj_passiveitem,0,0,0,250,17,1],
[obj_passiveitem,0,0,0,250,18,1],
[obj_passiveitem,0,0,0,250,19,1],
[obj_passiveitem,0,0,0,250,20,1],
[obj_passiveitem,0,0,0,250,21,1],
[obj_passiveitem,0,0,0,250,22,1],
[obj_passiveitem,0,0,0,250,23,1],
[obj_passiveitem,0,0,0,250,24,1],
[obj_passiveitem,0,0,0,250,25,1],
[obj_passiveitem,0,0,0,250,26,1],
[obj_weaponitem,0,0,0,100,0,1],
[obj_weaponitem,0,0,0,100,1,1],
[obj_weaponitem,0,0,0,100,2,1],
[obj_weaponitem,0,0,0,100,3,1],
[obj_weaponitem,0,0,0,100,4,1],
[obj_weaponitem,0,0,0,100,5,1],
[obj_weaponitem,0,0,0,100,6,1],
[obj_weaponitem,0,0,0,100,7,1],
[obj_weaponitem,0,0,0,100,8,1],
[obj_weaponitem,0,0,0,100,9,1],
[obj_weaponitem,0,0,0,100,10,1],
[obj_weaponitem,0,0,0,100,11,1],
[obj_weaponitem,0,0,0,100,12,1],
[obj_weaponitem,0,0,0,100,13,1],
[obj_weaponitem,0,0,0,100,14,1],
[obj_weaponitem,0,0,0,100,15,1],
[obj_weaponitem,0,0,0,100,16,1],
[obj_weaponitem,0,0,0,100,17,1],
[obj_weaponitem,0,0,0,100,18,1],
[obj_weaponitem,0,0,0,100,19,1],
[obj_weaponitem,0,0,0,100,20,1],
[obj_weaponitem,0,0,0,100,21,1],
[obj_weaponitem,0,0,0,100,22,1],
[obj_weaponitem,0,0,0,100,23,1],
[obj_weaponitem,0,0,0,100,24,1],
[obj_weaponitem,0,0,0,100,25,1],
[obj_weaponitem,0,0,0,100,26,1],
[obj_weaponitem,0,0,0,100,27,1],
[obj_weaponitem,0,0,0,100,28,1],
[obj_weaponitem,0,0,0,100,29,1],
[obj_weaponitem,0,0,0,100,30,1],
[obj_weaponitem,0,0,0,100,31,1],
[obj_weaponitem,0,0,0,100,32,1],
[obj_weaponitem,0,0,0,100,33,1],
[obj_weaponitem,0,0,0,100,34,1],
[obj_weaponitem,0,0,0,100,35,1],
[obj_weaponitem,0,0,0,100,36,1],
[obj_weaponitem,0,0,0,100,37,1],
[album,0,0,0,1000,1,1],
[album,0,0,0,1000,2,1],
[album,0,0,0,1000,3,1],
[album,0,0,0,1000,4,1],
[album,0,0,0,1000,5,1],
[album,0,0,0,1000,6,1],
[album,0,0,0,1000,7,1],
[album,0,0,0,1000,8,1],
[album,0,0,0,1000,9,1],
[album,0,0,0,1000,10,1],
[album,0,0,0,1000,11,1],
[album,0,0,0,1000,12,1],
[album,0,0,0,1000,13,1],
[album,0,0,0,1000,14,1],
[stemplayer,0,0,0,500,0,1]
]

//collectibles
//0name,1state, 2amount collected, 3amount til next,4enabled,5upgradeprice,6level,7seen,i8mage, 9can disable, 10item id, 11image_index, 12unlocks what, 13 requirement(s) 14text color, 15object type, 16 rarity, 17variant, 18 good or bad, 19 in shop? 
//state: 0 =locked, 1=unlocked, 2=obtained.
//type //type: 0=s, 1=weapon, 2=passive, 3=item, 4=healing, 5=boost, 6=music, 7=collectible, 8=other,9=currency, 10=equipable, 11=drug, 12=questitem

collection=[
["Penny"	,	0,	0,	-1,   1,  -1,		 -1,  0,spr_penny		,0	,0	,0	,1	,-1	,c_orange	,9	,1,		0,	-1, 0],//0
["Dollar"	,	0,	0,	-1,   1,  -1,		-1,  0,spr_dondadollar	,1	,1	,0	,-1	,0	,c_green	,9	,10,	0,	1, 0],
["Cheeseburger"	,0,	0,	50,   1,  -1,		-1,  0,spr_bigmac		,1	,2	,0	,3	,-1	,c_yellow	,4	,2,		0,	1, 0],
["Double Cheeseburger",	0,0,-1,0, -1,		-1,  0,spr_bigmac		,1	,2	,1	,-1	,2	,c_yellow	,4	,2,		1,	1, 0],
["Defcon"	,	0,	0,	5,    1,  100,		-1,  0,spr_defcon		,1	,3	,0	,5	,-1	,c_orange	,5	,50,	1,	1, 0],
["Defcon 2",	0,	0,	10,   0,  1000,		 -1,  0,spr_defcon		,1	,3	,1	,6	,5	,c_red		,5	,100,	2,	1, 0],
["Defcon 3",	0,	0,	25,   0,  10000,	-1,  0,spr_defcon		,1	,3	,2	,7	,6	,c_yellow	,5 	,200,	3,	1, 0],
["Defcon 4",	0,	0,	50,   0,  100000,	 -1,  0,spr_defcon		,1	,3	,3	,8	,7	,c_green	,5	,350,	4,	1, 0],
["Defcon 5",	0,	0,	-1,  0,  -1,		 -1,  0,spr_defcon		,1	,3	,4	,-1	,8	,c_blue		,5	,500,	5,	1, 0],
["Shades",		0,	0,	-1,   1,  -1,		-1,  0,spr_shades		,1	,4	,0	,-1	,-1	,c_black	,10	,50,	0,	1, 0],
["OxyContin",	0,	0,	31,   0,  1000,		 -1,  0,spr_oxy			,1	,5	,0	,11	,-1	,c_white	,11	,100,	1,	1, 0],//10
["OxyContin 2",	0,	0,	31,   0,  10000,		-1,  0,spr_oxy		,1	,5	,0	,12	,10	,c_white	,11	,200,	2,	1, 0],
["OxyContin 3",	0,	0,	31,   0,  100000,		 -1,  0,spr_oxy		,1	,5	,0	,13	,11	,c_white	,11	,300,	3,	1, 0],
["OxyContin 4",	0,	0,	31,   0,  1000000,		 -1,  0,spr_oxy		,1	,5	,0	,14	,12	,c_white	,11	,400,	4,	1, 0],
["OxyContin 5",	0,	0,	-1,   0,  10000000,		 -1,  0,spr_oxy		,1	,5	,0	,-1	,13	,c_white	,11	,500,	5,	1, 0],
["Bound to Fortune", 0, 0, -1, 0, -1, -1, 0, spr_bound2fortune, 1, 6, 0, -1, -1, c_white, 2, 50, 0, 1, 0],
["Champion", 0, 0, -1, 0, -1, -1, 0, spr_champion, 1, 6, 0, -1, -1, c_white, 2, 50, 1, 1, 0],
["Curse", 0, 0, -1, 0, -1, -1, 0, spr_curse, 1, 6, 0, -1, -1, c_white, 2, 50, 2, 1, 0],
["Donda's Blessing", 0, 0, -1, 0, -1, -1, 0, spr_dondasblessing, 1, 6, 0, -1, -1, c_white, 2, 50, 3, 1, 0],
["Ego", 0, 0, -1, 0, -1, -1, 0, spr_ego, 1, 6, 0, -1, -1, c_white, 2, 50, 4, 1, 0],
["Faith", 0, 0, -1, 0, -1, -1, 0, spr_faith, 1, 6, 0, -1, -1, c_white, 2, 50, 5, 1, 0],//20
["Fame", 0, 0, -1, 0, -1, -1, 0, spr_fame, 1, 6, 0, -1, -1, c_white, 2, 50, 6, 1, 0],
["Free Will", 0, 0, -1, 0, -1, -1, 0, spr_freewill, 1, 6, 0, -1, -1, c_white, 2, 50, 7, 1, 0],
["Graduate", 0, 0, -1, 0, -1, -1, 0, spr_graduate, 1, 6, 0, -1, -1, c_white, 2, 50, 8, 1, 0],
["Heart", 0, 0, -1, 0, -1, -1, 0, spr_heart, 1, 6, 0, -1, -1, c_white, 2, 50, 9, 1, 0],
["Heartbreak", 0, 0, -1, 0, -1, -1, 0, spr_heartbreak, 1, 6, 0, -1, -1, c_white, 2, 50, 10, 1, 0],
["Law of Attraction", 0, 0, -1, 0, -1, -1, 0, spr_lawofattraction, 1, 6, 0, -1, -1, c_white, 2, 50, 11, 1, 0],
["Life of the Party", 0, 0, -1, 0, -1, -1, 0, spr_lifeoftheparty, 1, 6, 0, -1, -1, c_white, 2, 50, 12, 1, 0],
["Longevity", 0, 0, -1, 0, -1, -1, 0, spr_longevity, 1, 6, 0, -1, -1, c_white, 2, 50, 13, 1, 0],
["Love", 0, 0, -1, 0, -1, -1, 0, spr_love, 1, 6, 0, -1, -1, c_white, 2, 50, 14, 1, 0],
["Mercy", 0, 0, -1, 0, -1, -1, 0, spr_mercy, 1, 6, 0, -1, -1, c_white, 2, 50, 15, 1, 0],//30
["Miracle", 0, 0, -1, 0, -1, -1, 0, spr_miracle, 1, 6, 0, -1, -1, c_white, 2, 50, 16, 1, 0],
["Monster", 0, 0, -1, 0, -1, -1, 0, spr_monster, 1, 6, 0, -1, -1, c_white, 2, 50, 17, 1, 0],
["Power", 0, 0, -1, 0, -1, -1, 0, spr_power, 1, 6, 0, -1, -1, c_white, 2, 50, 18, 1, 0],
["Prescription", 0, 0, -1, 0, -1, -1, 0, spr_prescription, 1, 6, 0, -1, -1, c_white, 2, 50, 19, 1, 0],
["Spectacle", 0, 0, -1, 0, -1, -1, 0, spr_spectacle, 1, 6, 0, -1, -1, c_white, 2, 50, 20, 1, 0],
["Wealth", 0, 0, -1, 0, -1, -1, 0, spr_wealth, 1, 6, 0, -1, -1, c_white, 2, 50, 21, 1, 0],
["Wisdom", 0, 0, -1, 0, -1, -1, 0, spr_wisdom, 1, 6, 0, -1, -1, c_white, 2, 50, 22, 1, 0],
["Wonder", 0, 0, -1, 0, -1, -1, 0, spr_wonder, 1, 6, 0, -1, -1, c_white, 2, 50, 23, 1, 0],
["Clone", 0, 0, -1, 0, -1, -1, 0, spr_clone, 1, 6, 0, -1, -1, c_white, 2, 50, 24,1, 0],
["Nerd Blaster", 0, 0, -1, 0, -1, -1, 0, spr_nerdblaster, 1, 7, 0, -1, -1, c_white, 1, 100, 0, 1, 0],//40
["Nerd Blaster 3000", 0, 0, -1, 0, -1, -1, 0, spr_nerdblaster3000, 1, 7, 0, -1, -1, c_white, 1, 100, 1, 1, 0],
["Cellphone", 0, 0, -1, 0, -1, -1, 0, spr_cellphone, 1, 7, 0, -1, -1, c_white, 1, 100, 2, 1, 0],
["2 Phones", 0, 0, -1, 0, -1, -1, 0, spr_2phones, 1, 7, 0, -1, -1, c_white, 1, 100, 3, 1, 0],
["Gospel Choir", 0, 0, -1, 0, -1, -1, 0, spr_gospelchoir, 1, 7, 0, -1, -1, c_white, 1, 100, 4, 1, 0],
["Symphony", 0, 0, -1, 0, -1, -1, 0, spr_symphony, 1, 7, 0, -1, -1, c_white, 1, 100, 5, 1, 0],
["808 Drum", 0, 0, -1, 0, -1, -1, 0, spr_808drum, 1, 7, 0, -1, -1, c_white, 1, 100, 6, 1, 0],
["RoboCop", 0, 0, -1, 0, -1, -1, 0, spr_robocop, 1, 7, 0, -1, -1, c_white, 1, 100, 7, 1, 0],
["Chains", 0, 0, -1, 0, -1, -1, 0, spr_chains, 1, 7, 0, -1, -1, c_white, 1, 100, 8, 1, 0],
["Gold Chains", 0, 0, -1, 0, -1, -1, 0, spr_goldchains, 1, 7, 0, -1, -1, c_white, 1, 100, 9, 1, 0],
["Holy Water", 0, 0, -1, 0, -1, -1, 0, spr_holywater, 1, 7, 0, -1, -1, c_white, 1, 100, 10, 1, 0],//50
["Blood of Christ", 0, 0, -1, 0, -1, -1, 0, spr_bloodofchrist, 1, 7, 0, -1, -1, c_white, 1, 100, 11, 1, 0],
["Yeezus", 0, 0, -1, 0, -1, -1, 0, spr_yeezus, 1, 7, 0, -1, -1, c_white, 1, 100, 12, 1, 0],
["Chakra", 0, 0, -1, 0, -1, -1, 0, spr_chakra, 1, 7, 0, -1, -1, c_white, 1, 100, 13, 1, 0],
["Yandhi", 0, 0, -1, 0, -1, -1, 0, spr_yandhi, 1, 7, 0, -1, -1, c_white, 1, 100, 14, 1, 0],
["The Storm", 0, 0, -1, 0, -1, -1, 0, spr_thestorm, 1, 7, 0, -1, -1, c_white, 1, 100, 15, 1, 0],
["Hurricane", 0, 0, -1, 0, -1, -1, 0, spr_hurricane, 1, 7, 0, -1, -1, c_white, 1, 100, 16, 1, 0],
["Pisces", 0, 0, -1, 0, -1, -1, 0, spr_pisces, 1, 7, 0, -1, -1, c_white, 1, 100, 17, 1, 0],
["Moon", 0, 0, -1, 0, -1, -1, 0, spr_moon, 1, 7, 0, -1, -1, c_white, 1, 100, 18, 1, 0],
["M1911", 0, 0, -1, 0, -1, -1, 0, spr_m1911, 1, 7, 0, -1, -1, c_white, 1, 100, 19, 1, 0],
["Golden M1911", 0, 0, -1, 0, -1, -1, 0, spr_goldenm1911, 1, 7, 0, -1, -1, c_white, 1, 100, 20, 1, 0],//60
["Saint Pablo Shield", 0, 0, -1, 0, -1, -1, 0, spr_saintpabloshield, 1, 7, 0, -1, -1, c_white, 1, 100, 21, 1, 0],
["Saint Pablo Sword", 0, 0, -1, 0, -1, -1, 0, spr_saintpablosword, 1, 7, 0, -1, -1, c_white, 1, 100, 22, 1, 0],
["Fire", 0, 0, -1, 0, -1, -1, 0, spr_fire, 1, 7, 0, -1, -1, c_white, 1, 100, 23, 1, 0],
["Self-Immolation", 0, 0, -1, 0, -1, -1, 0, spr_selfimmolation, 1, 7, 0, -1, -1, c_white, 1, 100, 24, 1, 0],
["Gemini", 0, 0, -1, 0, -1, -1, 0, spr_gemini, 1, 7, 0, -1, -1, c_white, 1, 100, 25, 1, 0],
["Sun", 0, 0, -1, 0, -1, -1, 0, spr_sun, 1, 7, 0, -1, -1, c_white, 1, 100, 26, 1, 0],
["Wolf", 0, 0, -1, 0, -1, -1, 0, spr_wolf, 1, 7, 0, -1, -1, c_white, 1, 100, 27, 1, 0],
["Wolves", 0, 0, -1, 0, -1, -1, 0, spr_wolves, 1, 7, 0, -1, -1, c_white, 1, 100, 28, 1, 0],
["Flashing Lights", 0, 0, -1, 0, -1, -1, 0, spr_flashinglights, 1, 7, 0, -1, -1, c_white, 1, 100, 29, 1, 0],
["Ultralight Beam", 0, 0, -1, 0, -1, -1, 0, spr_ultralightbeam, 1, 7, 0, -1, -1, c_white, 1, 100, 30, 1, 0],//70
["All of the Lights", 0, 0, -1, 0, -1, -1, 0, spr_allofthelights, 1, 7, 0, -1, -1, c_white, 1, 100, 31, 1, 0],
["Fantasy", 0, 0, -1, 0, -1, -1, 0, spr_fantasy, 1, 7, 0, -1, -1, c_white, 1, 100, 32, 1, 0],
["Dark Fantasy", 0, 0, -1, 0, -1, -1, 0, spr_darkfantasy, 1, 7, 0, -1, -1, c_white, 1, 100, 33, 1, 0],
["Sunday Service", 0, 0, -1, 0, -1, -1, 0, spr_sundayservice, 1, 7, 0, -1, -1, c_white, 1, 100, 34, 1, 0],
["I am a God", 0, 0, -1, 0, -1, -1, 0, spr_iamagod, 1, 7, 0, -1, -1, c_white, 1, 100, 35, 1, 0],
["Ultimate Gemini", 0, 0, -1, 0, -1, -1, 0, spr_ultimategemini, 1, 7, 0, -1, -1, c_white, 1, 100, 36, 1, 0],
["Mirage Breaker", 0, 0, -1, 0, -1, -1, 0, spr_miragebreaker, 1, 7, 0, -1, -1, c_white, 1, 100, 37, 1, 0],
["Glory",	0,	0,	-1,   0,  -1, -1,  0,spr_album,0	,0	,0	,-1	,-1	,c_white	,6	,1000,		0,	1, 0],
["Cancelled",	0,	0,	-1,   0,  -1, -1,  0,spr_album,0	,0	,1	,-1	,-1	,c_white	,6	,1000,		1,	1, 0],
["Water Into Drank",	0,	0,	-1,   0,  -1, -1,  0,spr_album,0	,0	,2	,-1	,-1	,c_white	,6	,1000,		2,	1, 0],//80
["Winter's Cold",	0,	0,	-1,   0,  -1, -1,  0,spr_album,0	,0	,3	,-1	,-1	,c_white	,6	,1000,		3,	1, 0],
["Freeing Christ",	0,	0,	-1,   0,  -1, -1,  0,spr_album,0	,0	,4	,-1	,-1	,c_white	,6	,1000,		4,	1, 0],
["Majestic",	0,	0,	-1,   0,  -1, -1,  0,spr_album,0	,0	,5	,-1	,-1	,c_white	,6	,1000,		5,	1, 0],
["Ella y El",	0,	0,	-1,   0,  -1, -1,  0,spr_album,0	,0	,6	,-1	,-1	,c_white	,6	,1000,		6,	1, 0],
["808s and Heartaches",	0,	0,	-1,   0,  -1, -1,  0,spr_album,0	,0	,7	,-1	,-1	,c_white	,6	,1000,		7,	1, 0],
["Lucille",	0,	0,	-1,   0,  -1, -1,  0,spr_album,0	,0	,8	,-1	,-1	,c_white	,6	,1000,	 8,	1, 0],
["Yee a Little Faith",	0,	0,	-1,   0,  -1, -1,  0,spr_album,0	,0	,9	,-1	,-1	,c_white	,6	,1000,		9,	1, 0],
["Chasing Ghosts",	0,	0,	-1,   0,  -1, -1,  0,spr_album,0	,10	,0	,-1	,-1	,c_white	,6	,1000,		10,	1, 0],
["40 Years",	0,	0,	-1,   0,  -1, -1,  0,spr_album,0	,0	,11	,-1	,-1	,c_white	,6	,1000,		11,	1, 0],
["Praise God",	0,	0,	-1,   0,  -1, -1,  0,spr_album,0	,0	,12	,-1	,-1	,c_white	,6	,1000,		12,	1, 0],//90
["In the End",	0,	0,	-1,   0,  1000, -1,  0,spr_album,0	,0	,13	,-1	,-1	,c_white	,6	,1000,		13,	1, 0],
["Stem Player",	0,	0,	-1,   0,  -1, -1,  0,spr_stemplayer,0	,0	,0	,-1	,-1	,c_white	,7	,500,		0,	1, 0]//92
]

//0name, 1how to unlock, 2description, 3Effect
collectiontext=[
["Penny","Collect this Item","Somebody Just Threw\na F**kin' Penny at Me","Valued at 1 Cent"],
["Dollar","Collect this Item","In Ye We Trust","Currency"],
["Cheeseburger","Collect this Item","Can I Get Uhhhhh","Heals 3 Health"],
["Double Cheeseburger","Collect this Item","Can I Get Uhhhhh","Heals 6 Health"],
["Defcon","","As soon as I wake up\nthey're gonna get it","Pulls out an AK-47"],
["Defcon 2","","This is the last Straw","Pulls out an AK-47"],
["Defcon 3","","I meant hop on stream\nand play COD","Pulls out an AK-47"],
["Defcon 4","","I meant hop on stream\nand play COD","Pulls out an AK-47"],
["Defcon 5","","I meant hop on stream\nand play COD","Pulls out an AK-47"],
["Shades","","Tiny Sunglasses are Going to be Huge","Take Half Damage from Papparazzi"],
["OxyContin","","That's the good stuff","Slower Time, Faster Attack"],
["OxyContin 2","","That's the good stuff","Slower Time, Faster Attack"],
["OxyContin 3","","That's the good stuff","Slower Time, Faster Attack"],
["OxyContin 4","","That's the good stuff","Slower Time, Faster Attack"],
["OxyContin 5","","That's the good stuff","Slower Time, Faster Attack"],
["Bound to Fortune","","",""],
["Champion","","",""],
["Curse","","",""],
["Donda's Blessing","","",""],
["Ego","","",""],
["Faith","","",""],
["Fame","","",""],
["Free Will","","",""],
["Graduate","","",""],
["Heart","","",""],
["Heartbreak","","",""],
["Law of Attraction","","",""],
["Life of the Party","","mhm, 'til I almost Cry","Increases Attack Speed"],
["Longevity","","",""],
["Love","","",""],
["Mercy","","",""],
["Miracle","","",""],
["Monster","","",""],
["Power","","I'm tripping off the power","Increases Damage"],
["Prescription","","",""],
["Spectacle","","",""],
["Wealth","","",""],
["Wisdom","","",""],
["Wonder","","",""],
["Clone","","",""],
["Nerd Blaster","Max this Weapon","Stand up to those 'Nerd Ass' Jocks","Fires Projectiles"],
["Nerd Blaster 3000","","",""],
["Cellphone","","",""],
["2 Phones","","",""],
["Gospel Choir","","",""],
["Symphony","","",""],
["808 Drum","","",""],
["RoboCop","","",""],
["Chains","","",""],
["Gold Chains","","",""],
["Holy Water","","",""],
["Blood of Christ","","",""],
["Yeezus","","",""],
["Chakra","","",""],
["Yandhi","","",""],
["The Storm","","",""],
["Hurricane","","",""],
["Pisces","","",""],
["Moon","","",""],
["M1911","","",""],
["Golden M1911","","",""],
["Saint Pablo Shield","","",""],
["Saint Pablo Sword","","",""],
["Fire","","",""],
["Self-Immolation","","",""],
["Gemini","","",""],
["Sun","","",""],
["Wolf","","",""],
["Wolves","","",""],
["Flashing Lights","","",""],
["Ultralight Beam","","",""],
["All of the Lights","","",""],
["Fantasy","","",""],
["Dark Fantasy","","",""],
["Sunday Service","","",""],
["I am a God","","",""],
["Ultimate Gemini","","",""],
["Mirage Breaker","","",""],
["Glory","","",""],
["Cancelled","","",""],
["Water Into Drank","","",""],
["Winter's Cold","","",""],
["Freeing Christ","","",""],
["Majestic","","",""],
["Ella y El","","",""],
["808s and Heartaches","","",""],
["Lucille","","",""],
["Yee a Little Faith","","",""],
["Chasing Ghosts","","",""],
["40 Years","","",""],
["Praise God","","",""],
["In the End","","",""],
["Stem Player","","",""],
]


								
items = [
[penny,1,0,0,20,0,0],
[dondadollar,1,0,0,1,1,1],
[bigmac,1,0,0,1,0,1],
[bigmac,0,0,0,10,1,1],
[defcon,1,0,0,100,1,1],
[defcon,0,0,0,200,2,1],
[defcon,0,0,0,300,3,1],
[defcon,0,0,0,400,4,1],
[defcon,0,0,0,500,5,1],
[shades,0,0,0,500,0,1],
[obj_oxycontin,0,0,0,10,1,1],
[obj_oxycontin,0,0,0,20,2,1],
[obj_oxycontin,0,0,0,30,3,1],
[obj_oxycontin,0,0,0,40,4,1],
[obj_oxycontin,0,0,0,50,5,1],
[obj_passiveitem,0,0,0,250,0,1],
[obj_passiveitem,0,0,0,250,1,1],
[obj_passiveitem,0,0,0,250,2,1],
[obj_passiveitem,0,0,0,250,3,1],
[obj_passiveitem,0,0,0,250,4,1],
[obj_passiveitem,0,0,0,250,5,1],
[obj_passiveitem,0,0,0,250,6,1],
[obj_passiveitem,0,0,0,250,7,1],
[obj_passiveitem,0,0,0,250,8,1],
[obj_passiveitem,0,0,0,250,9,1],
[obj_passiveitem,0,0,0,250,10,1],
[obj_passiveitem,0,0,0,250,11,1],
[obj_passiveitem,0,0,0,250,12,1],
[obj_passiveitem,0,0,0,250,13,1],
[obj_passiveitem,0,0,0,250,14,1],
[obj_passiveitem,0,0,0,250,15,1],
[obj_passiveitem,0,0,0,250,16,1],
[obj_passiveitem,0,0,0,250,17,1],
[obj_passiveitem,0,0,0,250,18,1],
[obj_passiveitem,0,0,0,250,19,1],
[obj_passiveitem,0,0,0,250,20,1],
[obj_passiveitem,0,0,0,250,21,1],
[obj_passiveitem,0,0,0,250,22,1],
[obj_passiveitem,0,0,0,250,23,1],
[obj_passiveitem,0,0,0,250,24,1],
[obj_passiveitem,0,0,0,250,25,1],
[obj_passiveitem,0,0,0,250,26,1],
[obj_weaponitem,0,0,0,100,0,1],
[obj_weaponitem,0,0,0,100,1,1],
[obj_weaponitem,0,0,0,100,2,1],
[obj_weaponitem,0,0,0,100,3,1],
[obj_weaponitem,0,0,0,100,4,1],
[obj_weaponitem,0,0,0,100,5,1],
[obj_weaponitem,0,0,0,100,6,1],
[obj_weaponitem,0,0,0,100,7,1],
[obj_weaponitem,0,0,0,100,8,1],
[obj_weaponitem,0,0,0,100,9,1],
[obj_weaponitem,0,0,0,100,10,1],
[obj_weaponitem,0,0,0,100,11,1],
[obj_weaponitem,0,0,0,100,12,1],
[obj_weaponitem,0,0,0,100,13,1],
[obj_weaponitem,0,0,0,100,14,1],
[obj_weaponitem,0,0,0,100,15,1],
[obj_weaponitem,0,0,0,100,16,1],
[obj_weaponitem,0,0,0,100,17,1],
[obj_weaponitem,0,0,0,100,18,1],
[obj_weaponitem,0,0,0,100,19,1],
[obj_weaponitem,0,0,0,100,20,1],
[obj_weaponitem,0,0,0,100,21,1],
[obj_weaponitem,0,0,0,100,22,1],
[obj_weaponitem,0,0,0,100,23,1],
[obj_weaponitem,0,0,0,100,24,1],
[obj_weaponitem,0,0,0,100,25,1],
[obj_weaponitem,0,0,0,100,26,1],
[obj_weaponitem,0,0,0,100,27,1],
[obj_weaponitem,0,0,0,100,28,1],
[obj_weaponitem,0,0,0,100,29,1],
[obj_weaponitem,0,0,0,100,30,1],
[obj_weaponitem,0,0,0,100,31,1],
[obj_weaponitem,0,0,0,100,32,1],
[obj_weaponitem,0,0,0,100,33,1],
[obj_weaponitem,0,0,0,100,34,1],
[obj_weaponitem,0,0,0,100,35,1],
[obj_weaponitem,0,0,0,100,36,1],
[obj_weaponitem,0,0,0,100,37,1],
[album,0,0,0,1000,0,1],
[album,0,0,0,1000,1,1],
[album,0,0,0,1000,2,1],
[album,0,0,0,1000,3,1],
[album,0,0,0,1000,4,1],
[album,0,0,0,1000,5,1],
[album,0,0,0,1000,6,1],
[album,0,0,0,1000,7,1],
[album,0,0,0,1000,8,1],
[album,0,0,0,1000,9,1],
[album,0,0,0,1000,10,1],
[album,0,0,0,1000,11,1],
[album,0,0,0,1000,12,1],
[album,0,0,0,1000,13,1],
[stemplayer,0,0,0,500,0,1]
]
deaths=0
adsleft=1


//PASSIVES
//DEM1 = ID;
//0name, 
//1obtained?, 
//2discovered?, 
//3level, 
//4max level, 
//5image, 
//6description
//7unlocked? (found in randomizer)
//8banished
//9can spawn?
//10limitbreak?

//wepcount=0
//pascount=0
//choicecount=3

choiceluck=20//probability of getting extra choice
oxyfrequencyset=60*3
oxyfrequency=0
//levelable stats
ldamage=1
lrate=1
lrange=1
lspeed=1
lsize=1
lcrit=0
lcamount=0
lduration=1
lattract=1
lresist=1 //1.1
lcurse=0
llove=0
lfaith=0
lfreewill=0 //max 1
lheart=0
lwisdom=0
heartseconds=5
lheartbreak=0
lrevives=0
lwealth=1
lchampion=0
lgraduate=1
lvanish=1
lclone=0
lluck=1
leinstein=1;


//internal stats
damage=1; //power
attackrate=1;
wisdom=0
range=1; //fame area of effect
projectilespeed=1; //wonder
projectilesize=1;//spectacle
criticalchance=0; //monster
criticalamount=2;
duration=1;//longevity
attraction=1;
pickuppotency=1; //wisdom
mercy=0; //half damage
resistance=0;//0none 1=invincible
curse=0
freewill=0;
faith=0; //heal damage dealt
love=0; //max health
heart=0; //heal per second
heartbreak=0; //retalitory damage
revives=0; //miracle
prescription=0;
wealth=1; //1=normal 2= twice as frequent
dondasblessing=1; //damage buff when half health
champion=0; //chance to dodge
graduate=1; //xp mult
luck=1; //bound2fortune
clone=0
vanish=0 //1= completely invisible
einstein=1; //all buff boost
boost=0

//0ITEM ID //1planet[i] or space-1, //2playerpos/spacepos, 3//spawned? 4type? 0=n/a 1=passive 2=weapon 3=music 5:moving?
//passives are id +15
//weapons are id +41
//music is +78
arrowright=0
arrowleft=0
worlditems=[
//EARTH
[15+12,0,50000,0,1,0],
[78+0,0,100000,0,3,0],
[15+14,0,-50000,0,1,0],
//GOLD MINES
[15+20,13,60000,0,1,0],
[78+1,13,100000,0,3,0],
[15+21,13,-60000,0,1,0],
//UNIVERSE CITY
[15+8,1,70000,0,1,0],
[78+2,1,100000,0,3,0],
[15+6,1,-70000,0,1,0],
//ICY HEART
[15+11,12,80000,0,1,0],
[78+3,12,100000,0,3,0],
[15+10,12,-80000,0,1,0],
//FANTASIA
[15+18,2,90000,0,1,0],
[78+4,2,100000,0,3,0],
[15+17,2,-90000,0,1,0],
//KINGDOM
[15+4,11,100000,0,1,0],
[78+5,11,150000,0,3,0],
[15+22,11,-100000,0,1,0],
//LUCY
[15+15,3,110000,0,1,0],
[78+8,3,100000,0,3,0],
[15+3,3,-110000,0,1,0],
//YETOPIA
[15+7,10,120000,0,1,0],
[78+7,10,100000,0,3,0],
[15+19,10,-120000,0,1,0],
//PABLO
[15+9,4,130000,0,1,0],
[78+6,4,100000,0,3,0],
[15+26,4,-130000,0,1,0],
//DEVINE DOMAIN
[15+5,9,140000,0,1,0],
[78+9,9,100000,0,3,0],
[15+16,9,-140000,0,1,0],
//GHOST TOWN
[15+25,5,150000,0,1,0],
[78+10,5,100000,0,3,0],
[15+2,5,-150000,0,1,0],
//STORMY SANDS
[15+13,8,160000,0,1,0],
[78+11,8,100000,0,3,0],
[15+0,8,-160000,0,1,0],
//VULTURE VALLEY
[15+24,6,-170000,0,1,0],
[78+12,6,100000,0,3,0],
[15+23,6,170000,0,1,0],
//ENDONDA
[78+13,7,-100000,0,3,0],
[15+1,7,200000,0,1,0]
]

passives=[
["Bound to Fortune", 0, 0, 0, 5, spr_bound2fortune, "+5% Luck", 0,0,0,0],
["Champion", 0, 0, 0, 10, spr_champion, "+5% Chance to Dodge Attacks", 0,0,0,0],
["Curse", 0, 0, 0, 10, spr_curse, "+5%\nEnemy Health, Quantity, & Speed", 0,0,0,0],
["Donda's Blessing", 0, 0, 0, 9, spr_dondasblessing, "+20% Damage\nWhen below half Health", 0,0,0,0],
["Ego", 0, 0, 0, 10, spr_ego, "+5% Damage Resistance", 0,0,0,0],
["Faith", 0, 0, 0, 10, spr_faith, "Heal 2% of Damage Dealt", 0,0,0,0],
["Fame", 0, 0, 0, 10, spr_fame, "+10% Attack Range", 0, 0, 0,0],
["Free Will", 0, 0, 0, 10, spr_freewill, "+10% Movement Handling", 0, 0, 0,0],
["Graduate", 0, 0, 0, 10, spr_graduate, "+5% XP", 0, 0, 0,0],
["Heart", 0, 0, 0, 7, spr_heart, "+1 Heal/ 5 Seconds", 0, 0, 0,0],
["Heartbreak", 0, 0, 0, 10, spr_heartbreak, "5% Widespread Retalitory Damage", 0, 0, 0,0],
["Law of Attraction", 0, 0, 0, 10, spr_lawofattraction, "+10% Attractor Pickup Range", 0, 0, 0,0],
["Life of the Party", 0, 0, 0, 10, spr_lifeoftheparty, "+10% Attack Rate", 0, 0, 0,0],
["Longevity", 0, 0, 0, 10, spr_longevity, "+10% Attack Duration", 0, 0, 0,0],
["Love", 0, 0, 0, 10, spr_love,"+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")", 0, 0, 0,0],
["Mercy", 0, 0, 0, 6, spr_mercy, "Every Minute,\n Take Half Damage for 5 Seconds", 0, 0, 0,0],
["Miracle", 0, 0, 0, 4, spr_miracle, "+1 Revive\nwith half Health", 0, 0, 0,0],
["Monster", 0, 0, 0, 12, spr_monster, "+2% Critical Chance (x2 Damage)", 0, 0, 0,0],
["Power", 0, 0, 0, 10, spr_power, "+10% Damage", 0, 0, 0,0],
["Prescription", 0, 0, 0, 6, spr_prescription, "OxyContin Spawns Every 3 Minutes", 0, 0, 0,0],
["Spectacle", 0, 0, 0, 10, spr_spectacle, "+10% Projectile Size", 0, 0, 0,0],
["Wealth", 0, 0, 0, 10, spr_wealth, "+5% Dollar Drop & Frequency", 0, 0, 0,0],
["Wisdom", 0, 0, 0, 10, spr_wisdom, "Item Pickups:\n+5% Duration & Effect", 0, 0, 0,0],
["Wonder", 0, 0, 0, 10, spr_wonder, "+10% Projectile Speed", 0, 0, 0,0],
["Clone", 0, 0, 0, 3, spr_clone, "+1 Projectile Amount", 0, 0, 0,0],
["Vanish Mode", 0, 0, 0, 10, spr_vanishmode, "-5% Enemy Eyesight", 0, 0, 0,0],
["Einstein", 0, 0, 0, 25, spr_einstein, "+2% Passives' Potency", 0, 0, 0,0]
]

//THIS IS THE ORDER WHICH PLAYERS WILL COME ACROSS ABILITIES
//12. Life of the Party
//14. Love
//20. Spectacle
//21. Wealth
//8.  Graduate
//6.  Fame
//11. Law of Attraction
//10. Heartbreak
//18. Power
//17. Monster
//4. Ego
//22. Wisdom
//15. Mercy
//3.  Donda's Blessing
//7.  Free Will
//19. Prescription
//9. Heart
//26. Einstein
//5. Faith
//16. Miracle
//25. Vanish Mode
//2. Curse
//13. Longevity
//0. Bound 2 Fortune
//24. Clone
//1. Champion

moneyspent=0
lastlogin=0
password=""

limitmaxlevel=[
[[200,100000,200,30],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[200,100000,5,5],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[200,200,200,200],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[100,500,100,100000],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[50,100000,50,50],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[50,100000,50,4],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[50,100000,50,50],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[50,100000,50,50],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[50,100000,50,50],[100000,100000,100000,100000]],
[[50,100000,100,50],[100000,100000,100000,100000]],
[[100,100000,100,100],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[200,200,200,200],[100000,100000,100000,100000]],
[[50,100000,50,50],[100000,100000,100000,100000]],
[[50,100000,50,50],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[200,200,200,200],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[50,100000,50,50],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[50,100,50,100000],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[50,50,100000,100000],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]],
[[100000,100000,100000,100000],[100000,100000,100000,100000]]
]



// create array for limit break bonuses stat bonus rotation and cap.
// add calculations for tots
// add effects on weapons
//	text changer arrays	
// add text changer for upgrades
updatetext=1

weapontext=[
["A Toy Gun","+10% Attack Rate\n+33% Aim Speed","x2 Damage","+1 Penetration","+15% Attack Rate\n+33% Aim Speed","+50% Damage","+20 Degrees Range\n+50% Aim Speed","+20% Attack Rate\n+50% Projectile Speed","+25% Projectile Size\n+50% Damage\n+15% Attack Rate","+1 Projectile",""],
["","","","","","","","","","",""],
["The Twitter Machine","x2 Damage","+1 Projectile","+10% Attack Rate\nand + 50% Projectile Speed","Grabs 2 Enemies","x2 Damage","+1 Projectile","+15% Attack Rate","+50% Projectile Size","x2 Damage",""],
["","","","","","","","","","",""],
["Hallelujah","50% Damage\n+1 Harmony","+20% Attack Rate\n+1 Penetration","+1 Harmony\n25% Volume (Size)","+50% Damage\n+33% Duration","+20% Attack Rate\n+1 Harmony","+25% Volume\n+33% Duration","+33% Damage","+1 Harmony\n+1 Penetration","x2 Damage\n+25% Volume",""],
["","","","","","","","","","",""],
["Bass Bumpin'","x1.5 Damage","+33% Range","+50% Rate","+66% Damage","+25% Range","+33% Rate","+50% Damage","+15% Range","x2 Damage",""],
["","","","","","","","","","",""],
["Break Free","+10% Range\n+25% Rotation Speed","+25% Duration\n+10% Rotationspeed","+10% Attack Rate","+25% Damage\n+25% Duration","+25% Rotation Speed","+15% Attack Rate","+50% Damage","+50% Rotation Speed","+25% Range",""],
["","","","","","","","","","",""],
["In the Name of the Father","+10% Rate","+25% Range","+1 Amount","+50% Damage","+25% Range","+15% Rate","+1 Amount","+25% Range","x2 Damage",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["Enter Zen","2nd Chakra\n+50% Damage","3rd Chakra\n+25% Range","4th Chakra","5th Chakra\n+50% Damage","6th Chakra\n+25% Range","7th Chakra","+33% Duration","+50% Orb Speed","+1 Penetration",""],
["","","","","","","","","","",""],
["It's a Brewin'","+25% Range","+25% Damage","+33% Attack Rate","+1 Chain Length","+25% Duration","+50% Damage","+33% Attack Rate","+25% Range","+1 Chain Length",""],
["","","","","","","","","","",""],
["I'm a Sensitive Person","+33% Fish Speed","+25% Duration","+10% Attack Rate","+50% Damage\n+25% Fish Size","+25% Duration","+10% Attack Rate","+33% Fish Speed","+25% Duration\n+10% Attack Rate","+50% Damage\n+25% Fish Size",""],
["I wanna go there","+50% Damage\n+50% Orbit Speed","+25% Radius\n+25% Size","+50% Oscilation Rate\nx2 Oscillation Range","x2 Damage","+25% Radius\n+50% Orbit Speed","+50% Oscilation Rate\nx2 Oscillation Range","x2 Damage","+25% Radius\n+50% Size","x3 Damage",""],
["Blacka Blacka!","+50% Fire Rate","+50% Damage\n+50% Aim Speed","+50% Fire Rate\n+50% Projectile Speed","+1 Penetration","+50% Damage/n+50% Projectile Speed","+50% Fire Rate\n+50% Aim Speed","+50% Projectile Speed\n+50% Fire Rate","+50% Projectile Size\n+20% Attack Rate\n+20% Damage","+50% Fire Rate",""],
["","","","","","","","","","",""],
["Defensive Weapon","20% Move Speed","+25% Range\n+50% Size","+20% Move Speed","Spikes","+25% Range\n+10% Move Speed","+20% Move Speed","More Spikes","+25% Range\n+50% Size","x2 Damage",""],
["Give them Scars","+50% Movement Speed","+25% Range\n+25% Size","+50% Attack Rate\nx2 Range","x2 Damage","+25% Range\n+50% Movement Speed","+50% Attack Rate\nx2 Range","x2 Damage","+25% Range\n+25% Size","x3 Damage",""],
["La Flame","+33% Fire Speed","+25% Duration","+10% Attack Rate","+50% Damage\n+25% Projectile Size","+25% Duration","+15% Attack Rate","+33% Fire Speed","+50% Damage","+25% Size\n+25% Duration",""],
["","","","","","","","","","",""],
["Look in my Eye","+50% Damage\n+10% Move Speed","+25% Range\n+50% Size","+50% Blink Rate","x2 Damage","+25% Range\n+10% Move Speed","+50% Blink Rate","+50% Damage","+25% Range\n+50% Size","x2 Damage",""],
["","","","","","","","","","",""],
["Howl at the Moon","+50% Damage","+50% Duration","+10% Rate","+50% Wolf Speed","+25% Duration","+25% Wolf Speed\n+1 Attack Count","+33% Duration","+10% Rate\n+50% Damage","+33% Wolf Speed\n+1 Attack Count",""],
["","","","","","","","","","",""],
["That S**t is Bright","x2 Damage","+33% Range","+33% Rate","+50% Damage","+25% Range","+33% Rate","+50% Damage","+15% Range","x2 Damage",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["Imagination","+50% Damage","+25% Range","+50% Damage","+25% Range","+50% Damage","+25% Range","+50% Damage","+25% Range","+50% Damage",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""],
["","","","","","","","","","",""]
]

//ldamage*(1+(.1*passives[18,3])*einstein)
passivetext=[
"+"+string((((1+.05*(master.notice[0,2])*leinstein)*(1+(.05*(master.passives[0,3]+1))*einstein)-1)-((1+.05*(master.notice[0,2])*leinstein)*(1+(.05*master.passives[0,3])*einstein)-1))*100)+"% Luck\n("+string((((1+.05*(master.notice[0,2])*leinstein)*(1+.05*(master.passives[0,3]+1)*einstein))-1)*100)+"%)",
"+"+string(((1-(1/(1+.02*((master.passives[1,3]+1)*einstein*master.luck)+(.02*(master.notice[1,2])*leinstein*master.lluck))))-(1-(1/(1+.02*(master.passives[1,3]*einstein*master.luck)+(.02*(master.notice[1,2])*leinstein*master.lluck)))))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/(1+.02*((master.passives[1,3]+1)*einstein*master.luck)+(.02*(master.notice[1,2])*leinstein*master.lluck))))*100)+"%)",
"+"+string((((1+.05*(master.notice[2,2])*leinstein)*(1+.05*(master.passives[2,3]+1))*einstein)-((1+.05*(master.notice[2,2])*leinstein)*(1+.05*master.passives[2,3])*einstein))*100)+"%\nEnemy Health, Quantity, & Speed\n("+string((((1+.05*(master.notice[2,2])*leinstein)*(1+.05*(master.passives[2,3]+1))*einstein)-1)*100)+"%)",
"Deal +"+string((((master.notice[3,2])*10*leinstein+20*clamp((master.passives[3,3]+1),0,1)+10*(clamp(master.passives[3,3]-1+1,0,99999))*einstein)-(master.notice[3,2]*10*leinstein+20*clamp(master.passives[3,3],0,1)+10*(clamp(master.passives[3,3]-1,0,99999))*einstein)))+"% Damage\nWhen below half Health\n("+string(((master.notice[3,2])*10*leinstein+20*clamp((master.passives[3,3]+1),0,1)+10*(clamp((master.passives[3,3]-1+1),0,99999))*einstein))+"%)",
"+"+string(((1-((1-(.05*(master.passives[4,3]+1)*einstein))/(1+.05*(master.notice[4,2])*leinstein)))-((1-((1-(.05*(master.passives[4,3])*einstein))/(1+.05*(master.notice[4,2])*leinstein)))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(master.passives[4,3]+1)*einstein))/(1+.05*(master.notice[4,2])*leinstein)))*100)+"%)",
"Heal "+string(((((1+.02*(master.notice[5,2])*leinstein)*(1+.02*(master.passives[5,3]+1))*einstein)-1)-(((1+.02*(master.notice[5,2])*leinstein)*(1+.02*master.passives[5,3])*einstein)-1))*100)+"% of Damage Dealt\n("+string((((1+.02*(master.notice[5,2])*leinstein)*(1+.02*(master.passives[5,3]+1))*einstein)-1)*100)+"%)",
"+"+string((((1+.1*(master.notice[6,2])*leinstein)*(1+.1*(master.passives[6,3]+1)*einstein)-1)-((1+.1*(master.notice[6,2])*leinstein)*(1+(.1*master.passives[6,3])*einstein)-1))*100)+"% Weapon & Ability Range\n("+string(((1+.1*(master.notice[6,2])*leinstein)*(1+(.1*(master.passives[6,3]+1))*einstein)-1)*100)+"%)",
"+"+string((((.05*(master.notice[7,2])*leinstein)+(.05*(master.passives[7,3]+1))*einstein)-((.05*(master.notice[7,2])*leinstein)+(.05*master.passives[7,3])*einstein))*100)+"% Movement\nSpeed & Handling ("+string(((.05*(master.notice[7,2])*leinstein)+(.05*(master.passives[7,3]+1))*einstein)*100)+"%)",
"+"+string((((1+.05*(master.notice[8,2])*leinstein)*(1+.05*(master.passives[8,3]+1))*einstein-1)-((1+.05*(master.notice[8,2])*leinstein)*(1+.05*master.passives[8,3])*einstein-1))*100)+"% XP\n("+string(((1+.05*(master.notice[8,2])*leinstein)*(1+.05*(master.passives[8,3]+1))*einstein-1)*100)+"%)",
"(Heal "+string((floor((clamp(master.passives[9,3]+1,0,1)+clamp(master.passives[9,3]-4+1,0,10000)+clamp(master.notice[9,2],0,1))*einstein+(.5*(master.notice[9,2])*leinstein))))+" HP Every "+string((5-clamp(master.passives[9,3],0,4))/(1+.05*master.notice[9,2]*leinstein))+" Seconds+\n("+string(floor((clamp((master.passives[9,3]+1),0,1)+clamp((master.passives[9,3]-4+1),0,10000)+clamp(master.notice[9,2],0,1))*einstein+(.5*master.notice[9,2]*leinstein))/((5-clamp((master.passives[9,3]+1),0,4))/(1+.05*master.notice[9,2]*leinstein)))+" HP/Second)",
"+"+string(((.02*(master.passives[10,3]+1))*einstein*master.damage+(.02*(master.notice[10,2])*leinstein*master.ldamage)-(.02*master.passives[10,3])*einstein*master.damage+(.02*master.notice[10,2]*leinstein*master.ldamage))*100)+"% Retalitory Damage\n("+string(((.02*(master.passives[10,3]+1))*einstein*master.damage+(.02*(master.notice[10,2])*leinstein*master.ldamage))*100)+"%)",
"+"+string(((.05*(master.notice[11,2])*leinstein*master.lrange)+(1+.05*(master.passives[11,3]+1)*master.range*einstein)-((.05*master.notice[11,2]*leinstein*master.lrange)+(1+(.05*(master.passives[11,3]))*master.range*einstein)))*100)+"% Attractor Pickup Range\n("+string(((.05*(master.notice[11,2])*leinstein*master.lrange)+(1+(.05*(master.passives[11,3]+1))*master.range*einstein)-1)*100)+"%)",
"+"+string((((1+.05*(master.notice[12,2])*leinstein)*(1+.1*(master.passives[12,3]+1)*einstein)-1)-((1+.05*(master.notice[12,2])*leinstein)*(1+(.1*master.passives[12,3])*einstein)-1))*100)+"% Attack Rate\n("+string(((1+.05*(master.notice[12,2])*leinstein)*(1+(.1*(master.passives[12,3]+1))*einstein)-1)*100)+"%)",
"+"+string((((1+.05*(master.notice[13,2])*leinstein)*(1+.1*(master.passives[13,3]+1)*einstein)-1)-((1+.05*(master.notice[13,2])*leinstein)*(1+(.1*master.passives[13,3])*einstein)-1))*100)+"% Attack Duration\n("+string(((1+.05*(master.notice[13,2])*leinstein)*(1+(.1*(master.passives[13,3]+1))*einstein)-1)*100)+"%)",
"+"+string(round(5*leinstein))+" Max Health\n("+string(round(10+master.love+5*leinstein))+"HP)",
"Every Minute,\n Take "+string(round(50/leinstein*100)/100)+"% Damage for "+string(5*(master.passives[15,3]+1))+" Seconds)",
"+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(master.revives+1)+")",
"+"+string(((1-(1/(1+.02*(master.passives[17,3]+1)*master.luck*einstein))/(1+(.02*(master.notice[17,2])*leinstein*(1+.05*master.notice[0,2]*leinstein)))-1)-(1-(1/(1+.02*(master.passives[17,3])*master.luck*einstein))/(1+(.02*(master.notice[17,2])*leinstein*(1+.05*master.notice[0,2]*leinstein)))-1))*100)+"% Critical Chance (x"+string((2*(.95+.05*clamp(master.passives[17,3],1,99999)))*einstein*(((.95+.05*(clamp(master.notice[17,2],1,99999)))*leinstein)))+" Damage)\n["+string((1-(1/(1+.02*(master.passives[17,3]+1)*master.luck*einstein))/(1+(.02*(master.notice[17,2])*leinstein*(1+.05*master.notice[0,2]*leinstein))))*100)+"%]",
"+"+string((((1+.1*(master.notice[18,2])*leinstein)*(1+(.1*(master.passives[18,3]+1))*einstein)-1)-((1+.1*master.notice[18,2]*leinstein)*(1+(.1*master.passives[18,3])*einstein)-1))*100)+"% Damage\n("+string(((1+.1*(master.notice[18,2])*leinstein)*(1+(.1*(master.passives[18,3]+1))*einstein)-1)*100)+"%)",
"OxyContin Spawns\nEvery 3 Minutes",
"+"+string((((1+.05*(master.notice[20,2])*leinstein)*(1+(.05*(master.passives[20,3]+1))*einstein)-1)-((1+.05*(master.notice[20,2])*leinstein)*(1+(.05*master.passives[20,3])*einstein)-1))*100)+"% Projectile Size\n("+string(((1+.05*(master.notice[20,2])*leinstein)*(1+(.05*(master.passives[20,3]+1))*einstein)-1)*100)+"%)",
"+"+string(((((1+.05*(master.notice[21,2])*leinstein)*(1+.05*(master.passives[21,3]+1))*einstein)-1)-((1+.05*(master.notice[21,2])*leinstein)*(1+.05*master.passives[21,3])*einstein-1))*100)+"% Money Value & Frequency\n("+string((((1+.05*(master.notice[21,2])*leinstein)*(1+.05*(master.passives[21,3]+1))*einstein)-1)*100)+"%)",
"Item Pickups:\n+"+string((((1+.05*(master.notice[22,2])*leinstein)*(1+.05*(master.passives[22,3]+1)*einstein)-1)-((1+.05*(master.notice[22,2])*leinstein)*(1+(.05*master.passives[22,3])*einstein)-1))*100)+"% Duration & Effect ("+string(((1+.05*(master.notice[22,2])*leinstein)*(1+(.05*(master.passives[22,3]+1))*einstein)-1)*100)+"%)",
"+"+string(((1+.1*(master.notice[23,2])*leinstein)*(1+.1*(master.passives[23,3]+1)*einstein)-(1+.1*(master.notice[23,2])*leinstein)*(1+(.1*master.passives[23,3])*einstein))*100)+"% Projectile Speed\n("+string(((1+.1*(master.notice[23,2])*leinstein)*(1+(.1*(master.passives[23,3]+1))*einstein)-1)*100)+"%)",
"+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor((master.passives[24,3]+1)*einstein+master.notice[24,2]*leinstein)))+")",
"-"+string(((((1-(.05*(master.passives[25,3]+1)*einstein))/(master.lvanish)))-(((1-(.05*(master.passives[25,3])*einstein))/(master.lvanish+.05*leinstein))))*100)+"% Enemy Eyesight\n("+string((((1-(.05*(master.passives[25,3]+1)*einstein))/(master.lvanish)))*100)+"%)",
]

passivetext2=[
["+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","+"+string(5*einstein)+"% Luck\n("+string((lluck*(luck+.05*einstein)-1)*100)+"%)","",""],
["+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)","+"+string(((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))-(1-(1/((1+.05*(passives[1,3]))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck)))*100)+"% Chance to Dodge Attacks\n("+string((1-(1/((1+.05*(passives[1,3]+1))*einstein*luck))/(1+.05*master.notice[1,2]*leinstein*lluck))*100)+"%)"],
["+"+string(5*einstein)+"%\nEnemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)","+"+string(5*einstein)+"% Enemy Health, Quantity, & Speed\n("+string((lcurse+1)*(.05*(passives[2,3]+1))*einstein*100)+"%)"],
["Deal +"+string(20*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)","Deal +"+string(10*einstein)+"% Damage\nWhen below half Health\n("+string(20+10*(passives[3,3]))+"%)"],
["+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)","+"+string(((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))-(1-((1-(.05*(passives[4,3])*einstein))/(1+.05*master.notice[4,2]*leinstein))))*100)+"% Damage Resistance\n("+string((1-((1-(.05*(passives[4,3]+1)*einstein))/(1+.05*master.notice[4,2]*leinstein)))*100)+"%)"],
["Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)","Heal "+string(2*einstein)+"% of Damage Dealt\n("+string((0+(.02*(passives[6,3]+1))*einstein)*100)+"%)"],
["+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Range\n("+string((range-1+.10*einstein)*100)+"%)","",""],
["+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")","+"+string(5*einstein)+"% Movement\nSpeed & Handling\n("+string((.5*lfreewill*leinstein+(.05*passives[7,3]+1)*einstein)*100)+")"],
["+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)","+"+string(5*einstein)+"% XP\n("+string((lgraduate*(.05*(passives[8,3]+1))*einstein)*100)+"%)",""],
["Heal "+string(1*einstein)+" Health\nEvery "+string(heartseconds)+" Seconds","-1 Second\n(+"+string(heart)+" HP / "+string(heartseconds-1)+" Seconds)","-1 Second\n(+"+string(heart)+" HP / "+string(heartseconds-1)+" Seconds)","-1 Second\n(+"+string(heart)+" HP / "+string(heartseconds-1)+" Second)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)","+"+string(1*einstein)+" Heal/Sec\n(+"+string(heart+1*einstein)+" HP/Sec)"],
["+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","+"+string(5*einstein*damage)+"% Retalitory Damage\n("+string((heartbreak+.05*einstein*damage)*100)+"%)","",""],
["+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.05*(passives[11,3]))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","+"+string(10*einstein*range)+"% Attractor Pickup Range\n("+string((lattract*(1+(.1*(passives[11,3]+1))*range*einstein-1))*100)+"%)","",""],
["+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Rate\n("+string((attackrate-1+.10*einstein)*100)+"%)","",""],
["+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Attack Duration\n("+string((duration-1+.10*einstein)*100)+"%)","",""],
["+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(5*einstein))+" Max Health\n("+string(round(10+love+5*einstein))+")","+"+string(round(10*einstein))+" Max Health\n("+string(round(10+love+10*einstein))+")","+"+string(round(10*einstein))+" Max Health\n("+string(round(10+love+10*einstein))+")","+"+string(round(10*einstein))+" Max Health\n("+string(round(10+love+10*einstein))+")","+"+string(round(10*einstein))+" Max Health\n("+string(round(10+love+10*einstein))+")","",""],
["Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","Every Minute,\n Take "+string(round(50/einstein*100)/100)+"% Damage for "+string(5*(passives[15,3]+1))+" Seconds","","","","","",""],
["+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(revives+1)+")","+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(revives+1)+")","+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(revives+1)+")","+"+string(1)+" Revive\nWith "+string(clamp((1-(1-.5*einstein)/leinstein)*100,0,100))+"% Health ("+string(revives+1)+")","","","","","","","",""],
["+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]","+"+string((((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))-(1-(1/(1+.02*(passives[17,3]))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein)))*100)+"% Critical Chance (x"+string(2*einstein)+" Damage)\n["+string((1-(1/(1+.02*(passives[17,3]+1))*luck*einstein)/(1+.02*master.notice[17,2]*leinstein))*100)+"%]"],
["+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","+"+string(10*einstein)+"% Damage\n("+string(ldamage*((.1*(passives[18,3]+1))*einstein)*100)+"%)","",""], //power
["OxyContin Spawns\nEvery 3 Minutes","OxyContin Spawns\nEvery 2 Min: 30 Sec","OxyContin Spawns\nEvery 2 Minutes","OxyContin Spawns\nEvery 1 Min: 30 Sec","OxyContin Spawns\nEvery 1 Minute","OxyContin Spawns\nEvery 30 Seconds","","","","","",""],
["+"+string(5*einstein)+"% Projectile Size\n("+string((projectilesize-1+.05*einstein)*100)+"%)","+"+string(5*einstein)+"% Projectile Size\n("+string((projectilesize-1+.05*einstein)*100)+"%)","+"+string(5*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Size\n("+string((projectilesize-1+.10*einstein)*100)+"%)",""],
["+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)","+"+string(5*einstein)+"% Money Value & Frequency\n("+string((lwealth*(1+.05*(passives[21,3]*einstein)))*100)+"% Value & Frequency)"],
["Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")","Item Pickups:\n+"+string(5*einstein)+"% Duration & Effect\n("+string(((passives[22,3]+1)*.05*einstein)*100)+")"],
["+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","+"+string(10*einstein)+"% Projectile Speed\n("+string((projectilespeed-1+.10*einstein)*100)+"%)","",""],
["+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")","+"+string(floor(1*einstein))+" Projectile Amount\n("+string((floor(passives[25,3]+1)*einstein))+")"],
["-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","-"+string(5*einstein)+"% Enemy Eyesight\n("+string((((1-(.05*(passives[25,3]+1)*einstein))/lvanish))*100)+")","",""]
]




eintext=["","","","","","","","","","","","","","","","","","","","","","","","",""]

updatestats=1
limitchosen=-1

//WEAPONS 
//DEM1 = ID;
//0name, 
//1 type, 0=base, 1=evolution, 2=superevo, 3=fusion
//2obtained?, 
//3discovered?, 
//4level, 
//5max level, 
//6passive requirement1, -1 = none
//7passive requirement2, -1 = none 
//8weapon requirement1, -1 = none
//9weapon requirement 2 -1 = none,
//10require max passives? 0 or 1
//11image, 
//12description
//13unlocked? (found in randomizer)
//14banished?
//15can spawn

weapons=[
["Nerd Blaster", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_nerdblaster,"A Toy Gun",0,0,0],
["Nerd Blaster 3000", 1, 0, 0, 0, 10, 18, -1, 0, -1, 0, spr_nerdblaster3000,"Nerd Eradicator",0,0,0],
["Cellphone", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_cellphone,"The Twitter Machine",0,0,0],
["2 Phones", 1, 0, 0, 0, 10, 26, -1, 2, -1, 0, spr_2phones,"",0,0,0],
["Gospel Choir", 0, 0, 1, 0, 10, -1, -1, -1, -1, 0, spr_gospelchoir,"Seranade your Enemies",1,0,0],
["Symphony", 1, 0, 0, 0, 10, 23, -1, 4, -1, 0, spr_symphony,"",0,0,0],
["808 Drum", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_808drum,"It go Boom",0,0,0],
["RoboCop", 1, 0, 0, 0, 10, 10, -1, 6, -1, 0, spr_robocop,"",0,0,0],
["Chains", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_chains,"",0,0,0],
["Gold Chains", 1, 0, 0, 0, 10, 0, -1, 8, -1, 0, spr_goldchains,"",0,0,0],
["Holy Water", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_holywater,"",0,0,0],//10
["Blood of Christ", 1, 0, 0, 0, 10, 16, -1, 10, -1, 0, spr_bloodofchrist,"",0,0,0],
["Yeezus", 2, 0, 0, 0, 10, 15, -1, 11, -1, 0, spr_yeezus,"",0,0,0],
["Chakra", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_chakra,"",0,0,0],
["Yandhi", 1, 0, 0, 0, 10, 7, -1, 13, -1, 0, spr_yandhi,"",0,0,0],
["The Storm", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_thestorm,"",0,0,0],
["Hurricane", 1, 0, 0, 0, 10, 13, -1, 15, -1, 0, spr_hurricane,"",0,0,0],
["Pisces", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_pisces,"",0,0,0],
["Moon", 1, 0, 0, 0, 10, 22, -1, 17, -1, 0, spr_moon,"",0,0,0],
["M1911", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_m1911,"",0,0,0],
["Golden M1911", 1, 0, 0, 0, 10, 21, -1, 19, -1, 0, spr_goldenm1911,"",0,0,0],//20
["Saint Pablo Shield", 0, 0, 1, 0, 10, -1, -1, -1, -1, 0, spr_saintpabloshield,"",1,0,0],
["Saint Pablo Sword", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_saintpablosword,"",0,0,0],
["Fire", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_fire,"",0,0,0],
["Self-Immolation", 1, 0, 0, 0, 10, 20, -1, 23, -1, 0, spr_selfimmolation,"",0,0,0],
["Gemini", 0, 0, 1, 0, 10, -1, -1, -1, -1, 0, spr_gemini,"",1,0,0],
["Sun", 1, 0, 0, 0, 10, 12, -1, 25, -1, 0, spr_sun,"",0,0,0],
["Wolf", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_wolf,"",0,0,0],
["Wolves", 1, 0, 0, 0, 10, 17, -1, 27, -1, 0, spr_wolves,"",0,0,0],
["Flashing Lights", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_flashinglights,"",0,0,0],
["Ultralight Beam", 1, 0, 0, 0, 10, 6, -1, 29, -1, 0, spr_ultralightbeam,"",0,0,0],//30
["All of the Lights", 2, 0, 0, 0, 10, 19, -1, 30, -1, 0, spr_allofthelights,"",0,0,0],
["Fantasy", 0, 0, 0, 0, 10, -1, -1, -1, -1, 0, spr_fantasy,"",0,0,0],
["Dark Fantasy", 1, 0, 0, 0, 10, 2, -1, 32, -1, 0, spr_darkfantasy,"",0,0,0],
["Sunday Service", 3, 0, 0, 0, 10, 5, -1, 5, 11, 0, spr_sundayservice,"",0,0,0],
["I am a God", 3, 0, 0, 0, 10, 4, -1, 14, 12, 0, spr_iamagod,"",0,0,0],
["Ultimate Gemini", 3, 0, 0, 0, 10, 23, -1, 18, 26, 0, spr_ultimategemini,"",0,0,0],
["Mirage Breaker", 3, 0, 0, 0, 10, 2, -1, 21, 22, 0, spr_miragebreaker,"",0,0,0]
]
skipset=3
skips=3
rollset=3
rerolls=3
banishset=3
banishes=3
//0weapon //1passive
banlist= [
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0],
[0,0]
]

//0 never 1 always
randomchoice=0
randomchoiceonce=0
global.madj=1

wepcount=0
maxweapons=2
maxweapset=2
pascount=0
choicecount=3

weap=[
-1,
-1,
-1,
-1,
-1,
-1
]

pass=[
-1,
-1,
-1,
-1,
-1,
-1
]
cansubtract=1
//unlocked //name, //level,//xp,//xpto,//Lyricism (Damage), //Rhythm (AT rate), //Flow (Movement), //Swag (Money Value), variation (evolution?,13 starting weapon 14//height 15//type(0=normal,1=flying) 16;sits? 17unlocktext
characters=[
[1,"Yean Cat",1,0,10 ,1,1,1,1,  0,spr_yehead,spr_nyan,spr_rainbow,0,0,0,0,""],
[0,"Taylor Swan",1,0,10 ,1,1,1,1,  0,spr_taylorswan,spr_swanbody,spr_swanbow,29,33,1,32,""],
[0,"Futurtle",1,0,10 ,1,1,1,1,  0,spr_futurtle,spr_turtlebody,spr_turtlebow,10,0,0,0,""],
[0,"Kim Chameleon",1,0,10 ,1,1,1,1,  0,spr_kimk,spr_kimbody,spr_kimbow,2,0,0,0,""],
[0,"Travis Squawk",1,0,10 ,1,1,1,1,  0,spr_travissquack,spr_travisbody,spr_travisbow,23,0,1,0,""],
[0,"Bee-yonce",1,0,10 ,1,1,1,1,  0,spr_beeyonce,spr_beebody,spr_beetrail,32,15,1,0,""],
[0,"Peacocky 69",1,0,10 ,1,1,1,1,  0,spr_6ixnine,spr_sixninebody,spr_sixninebow,8,30,0,0,""],
[0,"Lil Hump",1,0,10 ,1,1,1,1,  0,spr_lilhump,spr_camelbody,spr_camelbow,15,35,0,0,""],
[0,"Rehino",1,0,10 ,1,1,1,1,  0,spr_rehino,spr_rhinobody,spr_rhinobow,17,35,0,0,""],
[0,"Emunem",1,0,10 ,1,1,1,1,  0,spr_emunem,spr_emubody,spr_emubow,13,30,0,0,""],
[0,"22 Salamander",1,0,10 ,1,1,1,1,  0,spr_21salamander,spr_salamanderbody,spr_21bow,22,0,0,0,""],
[0,"Lil Sheep",1,0,10 ,1,1,1,1,  0,spr_lilsheep,spr_sheepbody,spr_sheepbow,27,20,0,0,""],
[0,"Squid Cudi",1,0,10 ,1,1,1,1,  0,spr_squidcudi,spr_squidbody,spr_squidbow,18,0,0,0,""],
[0,"Kid Boo",1,0,10 ,1,1,1,1,  0,spr_kidboo,spr_boobody,spr_kidbow,6,0,0,0,""],
[0,"Dracoon",1,0,10 ,1,1,1,1,  0,spr_dracoon,spr_racoonbody,spr_racoonbow,19,5,0,0,""]
]
email="youremail@email.com"
tutorial=0
password=""
invisible = 0;
permissions=3; //0 player, 1 mod, 2 dev, 3 owner
disconnected = 0;//opt out of online play
banned = 0;//0=no, -1=permaban, 1-inf =how many days.
datebanned = 0;
timesbanned = 0;
last_time_online = 0;
last_version_played ="";
messages = [
["","",-1,0],
["","",-1,0]
];//[Player From,Message,Read? (-1=N/A 0=not read, 1=read
friend_count = 0;//
friends_list = [
["",0,0,0],
["",0,0,0]
];//[name, id, date became friends, best friends?]
game_progress = 0;
planet_log = [0,0,0,0,0,0,0,0,0,0,0,0,0,0];//0=not visited 1=visited 2=completed
selectedstage = 0;//
tasks_completed = 0;
collectibles_unlocked = 0;
dollar_array = [0,0,0];//[have, spent, earned]
enemy_killcount = 0;
boss_killcount = 0;
ind_boss_kills = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
levelender_killcount = 0;
character_levels = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];//[0-50, 0-50, ..14 times]
name_text = [0,0,1];//[font = 0;color = 0;outline color]
character_id = 0;//0-19, 19=custom)
custom_look = [0,0,0,0,0,0,0,0];//[Head, Variant, Body, Variant, Trail, Variant, Hat, Variant]
theme_song = [0,0,0,0,0,0];//(Theme 19 = custom, bass, drum, keys, vocals,remix?)
login_message = "";//displays at login then clears
clan_info = [-1,"",0,0,0,0,0,0,0,""];//[Clan ID, 1Clan Name, 2Clan Rank, 3Rank in Clan, 4Date Joined, 5Dollars Donated, 6Tasks Completed, 7Members Recruited, 8Position in Clan, 9recruited by]

//store unlocked colors for fonts and other things
color_array=[
[c_white,"White"],
[c_black,"Black"],
[c_red,"Red"],
[c_orange,"Orange"],
[c_yellow,"Yellow"],
[c_lime,"Lime"],
[c_green,"Green"],
[c_aqua,"Aqua"],
[c_blue,"Blue"],
[c_purple,"Purple"]
]

//name, asset name, unlocked?
font_array=[
["Default",Font_Default,1],
["Arcade Classic",Font_ArcadeClassic,0],
["Attack of Monsters",Font_AttackofMonster,0],
["Bruce Forever",Font_BruceForever,0],
["Canterbury",Font_Canterbury,0],
["Crack Man",Font_CrackMan,0],
["DP Comic",Font_DPComic,0],
["Future Timesplitter",Font_FutureTimesplitters,0],
["Game Continue",Font_GameContinue,0],
["Halo",Font_Halo,0],
["Lightning",Font_Lightning,0],
["Perfect Dark",Font_PerfectDark,0],
["Punk",Font_Punk,0],
["Return of Ganon",Font_ReturnofGanon,0],
["Road Rage",Font5,0],
["Saikyo",Font_Saikyo,0],
["Senor Saturno",Font_SenorSaturno,0],
["Star Shield",Font_StarShield,0],
["Thunder",Font_Thunder,0],
["Videophreak",Font_Videophreak,0],
["Vinque",Font_Vinque,0],
["Zero Velocity",Font_ZeroVelocity,0]
]


trackposition=0
character_music=[
[yeancat_music_intro,yeancat_music_loop],
[taylor_music_intro,taylor_music_loop],
[future_music_intro,future_music_loop],
[kim_music_intro,kim_music_loop],
[travis_music_intro,travis_music_loop],
[beyonce_music_intro,beyonce_music_loop],
[sixnine_music_intro,sixnine_music_loop],
[lilpump_music_intro,lilpump_music_loop],
[rihanna_music_intro,rihanna_music_loop],
[eminem_music_intro,eminem_music_loop],
[savage_music_intro,savage_music_loop],
[peep_music_intro,peep_music_loop],
[cudi_music_intro,cudi_music_loop],
[buu_music_intro,buu_music_loop],
[drake_music_intro,drake_music_loop]
]




charsounds=[
[yehurt1,yehurt2,yehurt3],
[nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound],
[rehinohurt1,rehinohurt2,rehinohurt3],
[emuhurt1,emuhurt2,emuhurt3],
[nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound]
]

// Make sure x doesn't go below 0 (optional)
x = max(x, 0);

// x now contains the value of x corresponding to the given y

charselect=0



rhythm=1+2*(1-(1-((master.characters[master.charselect,5]-1)/(9+(master.characters[master.charselect,5]-1)))))
flow=1+2*(1-(1-((master.characters[master.charselect,6]-1)/(9+(master.characters[master.charselect,6]-1)))))
lyricism=1+2*(1-(1-((master.characters[master.charselect,7]-1)/(9+(master.characters[master.charselect,7]-1)))))
swag=1+2*(1-(1-((master.characters[master.charselect,8]-1)/(9+(master.characters[master.charselect,8]-1)))))



//PASSIVES
//DEM1 = ID;
//0name, 
//1obtained?, 
//2discovered?, 
//3level, 
//4max level, 
//5image, 
//6description
//7unlocked? (found in randomizer)
//8banished
//9can spawn?
//10limitbreak?

dropgui=0
dolmove=0
heatseconds=10

//add passive to increase projectile penetration
lvlscale=1
lvlscal=1
lc1=c_black
lc2=c_black
lc3=c_black
lc4=c_black
lca=1
levelheat=0
aspeed=0
aspeedshow=0
speedscale=1
speedscal=1
sc1=c_black
sc2=c_black
sc3=c_black
sc4=c_black
sca=1
speedheat=0


//every how many frames a star spawns
starfreqset=50
starfreq=starfreqset


//ITEM SPAWN TABLE

	for (i=0; i<array_length(weapons); i++) {
	diswep[i]=weapons[i,3]
	lockwep[i]=weapons[i,13]
	}
	for (i=0; i<array_length(items); i++) {
	disite[i]=items[i,3]
	}
	for (i=0; i<array_length(passives); i++) {
	dispas[i]=clamp(notice[i,0],0,1)
	lockpas[i]=clamp(notice[i,1],0,1)
	passives[i,7]=lockpas[i]
	}

playerid=-1

if file_exists(working_directory+"yeancatsave.txt") {
scr_load_game();
scr_calculate_spent();
startmusic=0
loop=0
	//for (i=0; i<array_length(weapons); i++) {
	//diswep[i]=weapons[i,3]
	//lockwep[i]=weapons[i,13]
	//}
	//for (i=0; i<array_length(items); i++) {
	//disite[i]=items[i,3]
	//}
	//for (i=0; i<array_length(passives); i++) {
	//passives[i,7]=notice[i,1]
	//dispas[i]=passives[i,2]
	//lockpas[i]=passives[i,7]
	//}
} else {
	scr_save_game();	
	
}
splashchoice=irandom(array_length(splash)-1);
chosensplash=splash[splashchoice]
splashresetset=5000
splashreset=splashresetset
charselectlast=charselect
musicintro=character_music[charselect,0]
musicloop=character_music[charselect,1]
if !instance_exists(obj_controlhs) {
	instance_create_layer(0,0,"uiitop",obj_controlhs)
}
if !instance_exists(stemmanager) {
	instance_create_layer(0,0,"stars",stemmanager)
}
if !instance_exists(obj_terrain) {
	instance_create_layer(room_width/2,room_height,"terrainl",obj_terrain2)
	instance_create_layer(room_width/2,room_height,"terrainlayer",obj_terrain)
	instance_create_layer(room_width/2,room_height,"foreground",obj_terrainfront)
}
	//instance_create_layer(room_width/2,room_height/2,"uii",obj_levelup)
	if shownmessage=0 {
		instance_create_layer(room_width/2,room_height/2,"uiitop",alphamessage)
	}
grav=.981*.9
//flight
flying=1
fromearth=0
	//debugging


distplay=.008
distplay2=584
distplay3=.66
distplay4=.74
distplay5=0.0005
distplay6=1.402
distplay7=3.04
distplay8=2.06
distplay9=0
distplay0=0


F=.7
bdistplay2=-.1
bdistplay3=.3
bdistplay4=50
bdistplay5=16
bdistplay6=.65
bdistplay7=60
bdistplay8=.67
bdistplay9=1.07
bdistplay0=50

if instance_exists(obj_logokill) {
instance_create_depth(room_width/2,room_height/2,-1000,obj_jayarnoldlogo)
with (obj_logokill) {
	instance_destroy()
}
}

File: master.yy
Code:
{
  "$GMObject":"",
  "%Name":"master",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":64,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":72,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":2,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":3,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":76,"eventType":9,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":49,"eventType":9,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":50,"eventType":9,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":51,"eventType":9,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":52,"eventType":9,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":48,"eventType":9,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":79,"eventType":5,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":84,"eventType":5,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":53,"eventType":6,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":50,"eventType":6,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":56,"eventType":6,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":54,"eventType":6,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":70,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"master",
  "overriddenProperties":[],
  "parent":{
    "name":"Objects",
    "path":"folders/Objects.yy",
  },
  "parentObjectId":null,
  "persistent":false,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":null,
  "spriteMaskId":null,
  "visible":true,
}

File: KeyPress_52.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if devmode =1 {
	if keyboard_check(vk_control) {
dondadollars+=1000
	}
}

File: Keyboard_84.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if devmode=1 and global.pause=0 {
	if mainmenu = 0 {
	second+=1;
	//speedd+=.002*60
	if keyboard_check(vk_control) {

		second+=9;
		//speedd+=.018*60
		ti+=9;
	}
	tiprev=ti
	ti+=1
	if stemplay=1 {
		if stemtime>0 {
			stemtime-=1
		} else {
			stemplay=0
		}
  }

if second>59 {
	minute+=1
	second=0
}

if minute>59 {
	hour+=1
	minute=0
}
	}
}



File: KeyPress_51.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if devmode =1 {
	if keyboard_check(vk_control) {
dondadollars+=100
	}
}

File: Keyboard_79.gml
Code:
/// @description Insert description here
// You can write your code in this editor
//exit
if devmode=1 {
level_up()
}

File: KeyPress_50.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if devmode =1 {
	if keyboard_check(vk_control) {
dondadollars+=10
	}
}

File: Mouse_53.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if joystick=1 {
if mainmenu != 1 {
	if !instance_exists(obj_levelup) and !instance_exists(obj_pickupq) and !instance_exists(obj_upgrademenu) and global.pause = 0 {
		joystickon=1
		joystickx=mouse_x
		joysticky=mouse_y
		joyangle=0
	}
}
}

//splashchoice=irandom(array_length(splash)-1);
//chosensplash=splash[splashchoice]
//splashtime=0
//splashangle=13
//splashalpha=0

File: Mouse_50.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if global.pause=0 {
if joystick=1 {
if mainmenu = 0 {
	if !instance_exists(obj_levelup) and !instance_exists(obj_pickupq) {
		if joystickon=1 {
			joyangle=point_direction(joystickx,joysticky,mouse_x,mouse_y)
			if point_distance(joystickx,joysticky,mouse_x,mouse_y)<joysticksize*100*camscale {
				//returns value of between 0 and 100
			joydist=(point_distance(joystickx,joysticky,mouse_x,mouse_y)/camscale)/joysticksize
			
			if joydist>100 {
				joydist=100
			}
			
			} else {
				joydist=100
			}
		}
	} else {
		joystickon=0
		joydist=0
		joyangle=0
	}
} else {
	joystickon=0
		joydist=0
		joyangle=0
	
}
}
} else {
	joystickon=0
		joydist=0
		joyangle=0
}

File: Other_72.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if (audio_group_is_loaded(agSFX)) {
	sfx_loaded=true;
}
if (audio_group_is_loaded(agVocals)) and (audio_group_is_loaded(agMusic)) and (audio_group_is_loaded(agMelodies)) and (audio_group_is_loaded(agDrums)) and (audio_group_is_loaded(agBass)) {
	stems_loaded=true;
}

File: Mouse_54.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if mainmenu=0 {
		if os_type=os_ios or os_type=os_android {
			if !instance_exists(restar) {
if !instance_exists(obj_levelup) and !instance_exists(obj_pickupq) and !instance_exists(obj_upgrademenu) {
	
if global.pause=0 {
	if !instance_exists(obj_pausemenu) {
	instance_create_layer(room_width/2,0,"uii",obj_pausemenu)
	}
	global.pause=1
} else {
	global.pause=0
}

    if global.pause {
       if audio_sync_group_is_playing(sg) {
	   audio_pause_sync_group(sg);
	   }
		audio_pause_all();
    } else {
        if !audio_sync_group_is_playing(sg) {
		audio_resume_sync_group(sg);
		}
		audio_resume_all();
    }
} else {
	
}
	}
		}
}

File: Mouse_56.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if joystick=1 {
joystickon=0
		joydist=0
		joyangle=0
}

File: Other_70.gml
Code:
/// @description Insert description here
// You can write your code in this editor
// Early exit if there is no 'type' key defined
if (!ds_map_exists(async_load, "type")) exit;

// All the events triggered by the AdMob extension have a “type” key
// containing a string that starts with “AdMob_”.
switch(async_load[? "type"])
{
    // AdMob_Consent_RequestInfoUpdate() succeeded
    case "AdMob_Consent_OnRequestInfoUpdated":

        // Now we need to get the consent Status, this will tell us if we
        // are required to ask the user for GDPR consent.
        if (AdMob_Consent_GetStatus() == AdMob_Consent_Status_REQUIRED)

            // Since we are REQUIRED, we now need to load the consent
            // form before we can show it. For this we use the function
            // below (more info: AdMob_Consent_Load). This function call
            // will also generate an ASYNC SOCIAL EVENT.
            AdMob_Consent_Load();
        break;

    // AdMob_Consent_RequestInfoUpdate() failed
    case "AdMob_Consent_OnRequestInfoUpdateFailed":
		infoupdate=-1
        // This means there was a problem while setting the consent
        // mode. Here we can add some code to deal with it.
        break;

    // AdMob_Consent_Load() succeeded
    case "AdMob_Consent_OnLoaded":

        // We have successfully loaded the consent form and we are now
        // ready to show it to the user (more info: AdMob_Consent_Show)
        AdMob_Consent_Show();
        break;

    // AdMob_Consent_Load() failed
    case "AdMob_Consent_OnLoadFailed":
		infoupdate=-1
        // This means there was a problem while loading the consent
        // form. Here we can add some code to deal with it.
        break;

    // AdMob_Consent_Show() succeeded and the user already answered it
    case "AdMob_Consent_OnShown":

        // At this point we now have the consent information from the
        // user. We can use both the GetStatus and GetType functions to
        // get the obtained information (more info:
        // AdMob_Consent_GetStatus and AdMob_Consent_GetType)
        global.ConsentStatus = AdMob_Consent_GetStatus();
        global.ConsentType = AdMob_Consent_GetType();
		infoupdate=1
        break;

// AdMob_Initialize() finished initializing the API
    case "AdMob_OnInitialized":
		init=1
        // Now that we are sure that the API got initialized we can load
        // a new rewarded video ad.(more info: AdMob_RewardedVideo_Load).
        // This function will generate an ASYNC SOCIAL EVENT.
        AdMob_RewardedVideo_Load();
        break;

    // AdMob_RewardedVideo_Load() succeeded
    case "AdMob_RewardedVideo_OnLoaded":
noad=0
        // At this point we should now have the rewarded ad loaded and
        // and we can check that using the ´AdMob_RewardedVideo_IsLoaded´
        // function. We are now ready to show the rewarded video ad to the
        // user (more info: AdMob_RewardedVideo_Show). This function will
        // generate an ASYNC SOCIAL EVENT.
       // AdMob_RewardedVideo_Show();
        break;

    // AdMob_RewardedVideo_Load() failed
    case "AdMob_RewardedVideo_OnLoadFailed":
noad=1
        // At this point there was a problem while loading the
        // interstitial ad. Here we can add some code to deal with it.

        // NOTE: Don’t try to reload the interstitial ad here because
        // it can lead to an infinite loop.
        break;

    // AdMob_RewardedVideo_Show() succeeded
    case "AdMob_RewardedVideo_OnFullyShown":
		global.pause=1
        // At this point the rewarded video ad is playing and the user is
        // looking at it. Note that at this point in time your game is
        // paused and will remain paused until the rewarded video ad gets
        // dismissed.
        break;

    // AdMob_RewardedVideo_Show() failed
    case "AdMob_RewardedVideo_OnShowFailed":
		global.pause=0
		reviving=0
        // At this point the rewarded video ad failed to get shown to the
        // user. You can add code to deal with the problem here.

        // NOTE: Don’t try to reload/show the rewarded video here
        // because it can lead to an infinite loop.
        break;

    // RewardedVideo got dismissed
    case "AdMob_RewardedVideo_OnDismissed":
	global.pause=0
	reviving=0
        // At this point the rewarded video ad got dismissed by the user
        // and the game logic is running again.
		AdMob_RewardedVideo_Load();
        break;

    // RewardedVideo triggered the reward event
    case "AdMob_RewardedVideo_OnReward":
global.pause=0
reviving=1
        // At this point the user watched enough of the rewarded video and
        // can be rewarded for it. Here we can add the reward code.
        //show_debug_message("You got 1000 points");
		AdMob_RewardedVideo_Load();
        break;

}





Object: obj_Client

File: Step_0.gml
Code:
/// Step Event of obj_Client

//create mouse if it doesnt exist and using keyboard and mouse
if !instance_exists(obj_Cursor) and (global.control_type!=1) { 
	instance_create_depth(mouse_x,mouse_y,-1000000,obj_Cursor);
}

// Set current font and heartbeat rate
global.heartbeatBPM = global.current_bpm;
fnt_chat = master.font_array[fnt_chat_id, 1];
global.wrapWidth = 2350; // Adjusted wrap width

//check for gamepad input
check_gamepad_input()

//randomly and probability skewed to bring shake_angle back to 0
if abs(shake_angle)>.1 {
	var invert = choose(-1,1)*(random(8)+92)/100
	shake_angle=round(invert*shake_angle*100)/100
} else {
	if shake_angle!=0 {
	shake_angle=0
	keyboard_lastkey=vk_nokey
	}
}

// Handle reconnection logic
if (!global.isConnected && global.reconnectTimer <= 0) {
    var result = network_connect(global.client_socket, global.serverAddress, global.serverPort);
    if (result >= 0) {
        global.isConnected = true;
        isServerRunning = true;
        show_debug_message("[Client] Successfully reconnected to server.");
        global.reconnectTimer = global.reconnectInterval;
    } else {
        global.reconnectTimer = global.reconnectInterval;
        isServerRunning = false;
        show_debug_message("[Client] Failed to reconnect to server. Will try again...");
    }
} else if (global.isConnected && global.reconnectTimer > 0) {
    global.reconnectTimer--;
}

// Handle incoming network events safely
if (ds_exists(async_load, ds_type_map)) {
    var type = ds_map_find_value(async_load, "type");
    var n_id = ds_map_find_value(async_load, "id");

    if (n_id == global.client_socket) {
        switch (type) {
            case network_type_data:
                var buffer = ds_map_find_value(async_load, "buffer");
                buffer_seek(buffer, buffer_seek_start, 0);
                var identifier = buffer_read(buffer, buffer_u8);

                switch (identifier) {
                    case global.IDENTIFIER_HEARTBEAT:
                        show_debug_message("[Client] Heartbeat received from server.");
                        break;
                    
                    case global.IDENTIFIER_TEST_MESSAGE:
                        var msg = buffer_read(buffer, buffer_string);
                        show_debug_message("[Client] Message from server: " + msg);
                        break;
                }
                buffer_delete(buffer);
                break;

            case network_type_connect:
                show_debug_message("[Client] Connected to server.");
                break;
                
            case network_type_disconnect:
                global.isConnected = false;
                show_debug_message("[Client] Disconnected from server. Attempting to identify cause...");
                break;
        }
    }
} else {
    show_debug_message("ERROR: Invalid ds_map reference in async event.");
}

// Command input and execution logic
if (input_check_pressed("chat") && !isActive) {
    isActive = true;
    global.commandBuffer = "";
    keyboard_string = "";
    show_debug_message("[Client] Chat input activated.");
}

// Toggle chat box with a specific key, e.g., Tab
if (keyboard_check_pressed(vk_tab)) {
    show_chatbox = !show_chatbox;
    global.commandBuffer = "";  // Clear previous commands or texts
    keyboard_string = "";
    show_debug_message("[Client] Toggled chat box visibility: " + string(show_chatbox));
}

// Handle backspace and text input
if (isActive) {
// Handle backspace input
    if (input_check("cancel") && string_length(global.commandBuffer) > 0) {
        if (global.backspaceTimer == 0 || global.backspaceTimer >= global.backspaceDelay) {
            var lastCharPosition = string_length(global.commandBuffer);

            // Check if the last character is a newline
            if (string_char_at(global.commandBuffer, lastCharPosition) == "\n") {
                // Adjust the global.lastSpaceIndex if necessary
                if (global.lastSpaceIndex >= lastCharPosition) {
                    global.lastSpaceIndex = string_last_index_of(string_copy(global.commandBuffer, 1, lastCharPosition - 1), " ");
                }
            }

            // Perform the character deletion
            global.commandBuffer = string_delete(global.commandBuffer, lastCharPosition, 1);
            update_chat_input_visuals();
            show_debug_message("[Client] Updated command buffer after backspace: " + global.commandBuffer);

            // Clear the keyboard buffer to avoid unwanted characters
            keyboard_string = "";

            // Increase deletion speed
            if (global.backspaceTimer == 0) {
                global.backspaceTimer = 1;
            } else {
                global.backspaceTimer = global.backspaceSpeed;
				if global.backspaceSpeed<14 {
					global.backspaceSpeed+=1
				}
            }
        } else {
            global.backspaceTimer += 1;
        }
    } else {
        global.backspaceTimer = 0; // Reset timer when backspace is released
		global.backspaceSpeed=1
    }
	if string_length(global.commandBuffer)<global.character_limit {
    var char = keyboard_string;
	} else {
		var char = "";
		if keyboard_check_pressed(vk_anykey) {
		if last_key_is_valid_character(keyboard_lastkey) {
			//play sound to indicate char limit. 
			var sound = audio_play_sound(uibuttonsound7,0,0,master.uivol*master.mastervol)
			shake_angle=choose(-1,1)*random_range(.95,1.00)
		}
		}
	}
    // Detect pasting via Ctrl+V (Windows) or Command+V (Mac)
    var pasting = false;
    if (os_type == os_windows) {
        if (keyboard_check(vk_control) && keyboard_check_pressed(ord("V"))) {
            pasting = true;
			keyboard_string=""
			char = ""
        }
    } else if (os_type == os_macosx) {
        if (keyboard_check(92) && keyboard_check_pressed(ord("V"))) {
            pasting = true;
			keyboard_string=""
			char = ""
        }
    }

    // Handle pasting
    if (pasting) {
        if (clipboard_has_text()) {
            var clip_string = clipboard_get_text();
            if (string_length(clip_string) > 0 && string_length(clip_string) < 200) {
                global.commandBuffer = appendAndWrap(clip_string, global.commandBuffer, global.wrapWidth);
                update_chat_input_visuals();
                show_debug_message("[Client] Appended clipboard content to command buffer: " + global.commandBuffer);
            } else {
                handleDebugMessage("Clipboard content is too long to paste!", true);
            }
        }
        pasting = false;
    }

    if (char != "") {
        // Prevent typing if command is filled
        if (!((global.textColor == c_lime || global.textColor == c_red) && slash_typed)) {
            draw_set_font(fnt_chat);
            global.commandBuffer = appendAndWrap(char, global.commandBuffer, global.wrapWidth);
        }
        update_chat_input_visuals();
        keyboard_string = ""; // Clear the buffer after reading
        show_debug_message("[Client] Appended character to command buffer: " + global.commandBuffer);
    }

// Check if Enter is pressed to process the command or chat message
if (input_check_pressed("confirm")) {
        if (string_char_at(global.commandBuffer, 1) == "/") {
            var command = string_delete(global.commandBuffer, 1, 1);
            execute_command(string_trim(command));
        } else {
            var chatMessage = "[" + master.playername + "] " + global.commandBuffer;
            global.message_is_bubble = 1;
            handleDebugMessage(chatMessage, true);
            global.message_is_bubble = 0;
        }

        // Add the command/message to the recall list
        if (string_length(global.commandBuffer) > 0) {
            ds_list_add(global.recall_list, global.commandBuffer);
            if (ds_list_size(global.recall_list) > global.recall_max) {
                ds_list_delete(global.recall_list, 0);  // Remove the oldest entry if exceeding the limit
            }
        }
        global.recall_index = -1;
        global.textColor = global.defaultTextColor;
        global.commandBuffer = "";
        isActive = false;
        show_debug_message("[Client] Processed command/chat and cleared buffer.");
}
    // Navigate through the recall list using up and down arrows
    if (keyboard_check_pressed(vk_up)) {
        if (global.recall_index == -1) {
            global.recall_index = ds_list_size(global.recall_list) - 1;
        } else {
            global.recall_index = max(0, global.recall_index - 1);
        }

        if (global.recall_index >= 0 && global.recall_index < ds_list_size(global.recall_list)) {
            global.commandBuffer = ds_list_find_value(global.recall_list, global.recall_index);
            update_chat_input_visuals();
            show_debug_message("[Client] Recalled previous command/chat: " + global.commandBuffer);
        }
    } else if (keyboard_check_pressed(vk_down)) {
        if (global.recall_index != -1) {
            global.recall_index = min(ds_list_size(global.recall_list) - 1, global.recall_index + 1);

            if (global.recall_index < ds_list_size(global.recall_list)) {
                global.commandBuffer = ds_list_find_value(global.recall_list, global.recall_index);
            } else {
                global.commandBuffer = "";
            }
            update_chat_input_visuals();
            show_debug_message("[Client] Recalled next command/chat: " + global.commandBuffer);
        }
    }
}

// Before calling drawChatMessages, ensure messages is a ds_list
if (!ds_exists(global.debugMessages, ds_type_list)) {
    show_debug_message("Error: debugMessages is not a valid ds_list.");
    return;
}

if show_chatbox and ds_exists(global.debugMessages, ds_type_list) {
var totalLines = drawChatMessages(global.debugMessages, 990, 0, global.max_visible_lines, .5, false,global.c_chat2,global.c_chat1);
// Ensure scrollIndex is within valid range
scrollIndex = clamp(scrollIndex, 0, clamp(totalLines - global.max_visible_lines,0,999999));
}

// Only process incoming data and send heartbeats if the server is running
if (isServerRunning && sendHeartbeat && (current_time - global.lastHeartbeatTime >= broadcastInterval)) {
    handleDebugMessage("Heartbeat sent to Server", true);
    global.lastHeartbeatTime = current_time;
}





File: Other_68.gml
Code:
// Async Networking Event Handling for Client

/// Revised Async Networking Event
var type = ds_map_find_value(async_load, "type");
var n_id = ds_map_find_value(async_load, "id");

if (n_id == global.client_socket) {
    switch (type) {
        case network_type_connect:
            show_debug_message("[Client] Connected to server.");
            global.isConnected = true;
            break;
        case network_type_disconnect:
            show_debug_message("[Client] Disconnected from server.");
            global.isConnected = false;
            break;
        case network_type_data:
            if (ds_map_exists(async_load, "buffer")) {
                var buffer = ds_map_find_value(async_load, "buffer");
                if (buffer != undefined) {
                    buffer_seek(buffer, buffer_seek_start, 0);
                    var identifier = buffer_read(buffer, buffer_u8);
                    handleNetworkData(identifier, buffer);
                } else {
                    show_debug_message("ERROR: Buffer not found in data event.");
                }
            } else {
                show_debug_message("ERROR: 'buffer' key does not exist in the async_load map.");
            }
            break;
    }
} else {
    show_debug_message("ERROR: Invalid socket ID reference in async event.");
}


//// Async Networking Event of obj_Client

//var type = ds_map_find_value(async_load, "type");
//var n_id = ds_map_find_value(async_load, "id");

//if (n_id == global.client_socket) {
//    switch (type) {
//        case network_type_data:
//            var buffer = ds_map_find_value(async_load, "buffer");
//            buffer_seek(buffer, buffer_seek_start, 0);
//            var identifier = buffer_read(buffer, buffer_u8);

//            switch (identifier) {
//                case global.IDENTIFIER_HEARTBEAT:
//                    // Handle heartbeat received from the server
//                    show_debug_message("[Client] Heartbeat received from server.");
//                    // Optionally, send back a confirmation or keep alive message
//                    break;
                
//                case global.IDENTIFIER_UNIQUE_ID:
//                    // This would be where the server confirms receipt of your unique ID
//                    // Or any other custom logic for unique ID handling
//                    var confirmationMessage = buffer_read(buffer, buffer_string);
//                    show_debug_message("[Client] Server confirmed Unique ID: " + confirmationMessage);
//                    break;
                
//                // Add more case handlers for different data types as needed
//            }
//            buffer_delete(buffer);
//            break;

//        case network_type_connect:
//            // Immediately upon connection, send the unique ID to the server
//            // This ensures server is aware of who just connected
//            var buffer = buffer_create(256, buffer_grow, 1);
//            buffer_seek(buffer, buffer_seek_start, 0);
//            buffer_write(buffer, buffer_u8, global.IDENTIFIER_UNIQUE_ID);
//            buffer_write(buffer, buffer_string, global.clientUniqueID);
//            network_send_packet(global.client_socket, buffer, buffer_tell(buffer));
//            show_debug_message("[Client] Sent unique ID to server: " + global.clientUniqueID);
//            buffer_delete(buffer);
//            break;
            
//        case network_type_disconnect:
//            // Handle disconnection logic here, if needed
//            global.isConnected = false; // Update the connection status
//            show_debug_message("[Client] Disconnected from server.");
//            break;
//    }
//}


File: Destroy_0.gml
Code:
///Destroy Event for obj_Client
if (global.isConnected) {
    network_destroy(global.client_socket);
}


//// Clean up dynamic resources
//if (ds_exists(clien, ds_type_map)) {
//    ds_map_destroy(myDataStructure);
//}

// Optionally, inform the master object or handle game state changes
// For example, transition to a different room or update the UI
//event_perform_object(obj_Master, ev_Other, ev_user0); // Custom user event for cleanup in obj_Master


File: Draw_0.gml
Code:
///Client Draw Code
draw_set_font(fnt_chat);
if show_chatbox=true {
	var xx = 990;
	var yy = 686; // Starting y position
	var lm_cal=clamp(xx+(clamp(110-global.longestmessage,0,110))+1.65*(global.longestmessage-50)/3,xx+215,(display_get_gui_width()-10)/2+room_width/2)+10
	var x1 = 980
	var y1 = 686-20
	var x2 = max(lm_cal,clamp(xx+(clamp(110-global.longestmessage,0,110))+1.65*(string_width(global.commandBuffer)-1)/3,xx+215,(display_get_gui_width())/2+room_width/2+50))
	var y2 = _yy+100
	//draw transparent background box for chatbox that adjusts to fit the longest message. will be later swapped for a scaled image background
	draw_rectangle_outlined(x1,y1,x2,y2,false,global.borderwidth,global.o_color,global.bg_color,global.bg_alpha);
	draw_set_alpha(1);
	var sca=.7
	global.chat_line_height = 70 * sca + 5;
// Set drawing properties
draw_set_colour(c_ltgray);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(fnt_chat); 
// Display server status
var serverStatus = "Server Unable to Connect"; // Default message
if (isServerRunning) {
    serverStatus = "Server Online";
	draw_set_colour(c_lime);
} else {
    serverStatus = "Server Stopped";
	draw_set_colour(c_red);
}

if show_server_status=true {
draw_text_transformed(xx, yy, serverStatus, sca, sca, 0);
yy += 40; // Increment y position for next line
}

if connectedClients>0 {
	draw_set_colour(c_aqua);
} else {
	draw_set_colour(c_ltgrey);
}
if show_server_status=true {
	//we can keep drawing this section this way unless somehow your next response can condense it as well. but its  kind of fine as is, no issues here.
draw_text_transformed(xx+3, yy+3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_text_transformed(xx-3, yy+3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_text_transformed(xx+3, yy-3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_text_transformed(xx-3, yy-3-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
draw_set_color(global.c_chat1);
draw_text_transformed(xx, yy-10, "Connected Clients: "+string(connectedClients), sca, sca, 0);
yy += 50; // Increment y position for next 
} else {
	draw_set_color(global.c_chat1);
	draw_text_transformed(xx+3, yy+3-10, "Chat Box", sca, sca, 0);
	draw_text_transformed(xx-3, yy+3-10, "Chat Box", sca, sca, 0);
	draw_text_transformed(xx+3, yy-3-10, "Chat Box", sca, sca, 0);
	draw_text_transformed(xx-3, yy-3-10, "Chat Box", sca, sca, 0);
	draw_set_color(global.c_chat2);
	draw_text_transformed(xx, yy-10, "Chat Box", sca, sca, 0);
yy += 60; // Increment y position for next line
}

sca=.5

if show_chatbox and ds_exists(global.debugMessages, ds_type_list) {
    var startY = yy;
    var maxLinesToShow = global.max_visible_lines;
	// Before calling drawChatMessages, ensure messages is a ds_list
if (!ds_exists(global.debugMessages, ds_type_list)) {
    show_debug_message("Error: debugMessages is not a valid ds_list.");
    return;
}

    var totalLines = drawChatMessages(global.debugMessages, 990, startY, maxLinesToShow, sca, false,global.c_chat2,global.c_chat1);

    // Calculate the max index for scrolling based on the total number of lines
    var maxScrollIndex = max(0, clamp(totalLines - maxLinesToShow,0,9999999));

    // Scroll messages with keyboard or mouse wheel
    if (input_check("up") || mouse_wheel_up()) {
		if !(input_check("up") and isActive = true) { //disable scrolling from "W" when typing
        scrollIndex = max(0, scrollIndex - 1);
        show_debug_message("[Client] Scrolled up: Current scroll index is " + string(scrollIndex));
		}
    }
    if (input_check("down") || mouse_wheel_down()) {
		if !(input_check("down") and isActive = true) {//disable scrolling from "S" when typing
        scrollIndex = min(maxScrollIndex, scrollIndex + 1);
        show_debug_message("[Client] Scrolled down: Current scroll index is " + string(scrollIndex));
		}
    }

    // Ensuring scrollIndex is always within the valid range
    scrollIndex = clamp(scrollIndex, 0, maxScrollIndex);

    // Redraw messages considering the scroll index
	// Before calling drawChatMessages, ensure messages is a ds_list
if (!ds_exists(global.debugMessages, ds_type_list)) {
    show_debug_message("Error: debugMessages is not a valid ds_list.");
    return;
}

    drawChatMessages(global.debugMessages, 990, yy , maxLinesToShow, sca, true,global.c_chat2,global.c_chat1);
}

yy=yy+clamp(totalLines-scrollIndex,0,global.max_visible_lines)*(global.chat_line_height*1.00)+5
sca=.6
_yy=yy-15
 
if (isActive) {
// Determine the number of line breaks in the command buffer
var lineCount = array_length(string_split(global.commandBuffer, "\n"));

// Calculate the new height based on the number of lines
var lines = string_split(global.commandBuffer, "\n");
var boxHeight = global.chat_line_height*1.05 * array_length(lines) + 2; // Calculate box height based on number of lines

//chat input box drawing code 
draw_set_color(c_black); // Set initial color to black (border)
 
    if (string_char_at(global.commandBuffer, 1) = "/") {
        draw_set_color(c_white);  // border becomes white if command is being typed
    }
// Adjust the bottom y-coordinate of the rectangle to expand with each new line
draw_rectangle(xx + 5, yy - 11, clamp(xx - 90 + 1.85 * (string_width(global.commandBuffer) - 1) / 3, xx - 90, (display_get_gui_width() - 10) / 2 + room_width / 2) + 150 + 10, yy + boxHeight + 10, false);

    draw_set_color(c_white);  // Set initial bg color to white when no '/' detected
    if (string_char_at(global.commandBuffer, 1) = "/") {
        draw_set_color(c_black);  // Default bg color if command is being typed
		slash_typed=true
    } else {
		slash_typed=false
	}
draw_rectangle(xx + 10, yy - 6, clamp(xx - 90 + 1.85 * (string_width(global.commandBuffer) - 1) / 3, xx - 90, (display_get_gui_width() - 10) / 2 + room_width / 2) + 150, yy + boxHeight, false);
//draw command buffer
draw_set_color(global.c_chat2);
	//we stay drawing these like this because theres no need for line handling here.

	draw_set_color(merge_color(global.textColor,c_red,clamp(abs(shake_angle),0,1)));
    draw_text_transformed(xx+20+shake_angle*7, yy-shake_angle*7, global.commandBuffer + "_", sca, sca, shake_angle*.25);  // Shoblinking cursor
} else {
	draw_set_color(merge_color(global.c_chat1,c_red,clamp(abs(shake_angle),0,1)));
    draw_text_transformed(xx+20+shake_angle*7, yy-shake_angle*7, global.commandBuffer + "_", sca, sca, shake_angle*.25);  // Show blinking cursor
}
} else {
	exit
}


// instance_exists(obj_levelup) {
//if input_value() != undefined {
//draw_set_color(c_red)
//var dbug = ""
//draw_text_transformed(room_width/2,room_height/2,string(global.choiceselect),3,3,0)
//draw_text_transformed(room_width/2,room_height/2,dbug,3,3,0)
//}

////debug draw last key id
//draw_set_color(c_black);
//draw_text(room_width/2+2,room_height/2+2,keyboard_lastkey)
//draw_text(room_width/2-2,room_height/2+2,keyboard_lastkey)
//draw_text(room_width/2+2,room_height/2-2,keyboard_lastkey)
//draw_text(room_width/2-2,room_height/2-2,keyboard_lastkey)
//draw_set_color(c_white);
//draw_text(room_width/2,room_height/2,keyboard_lastkey)

File: Alarm_0.gml
Code:
// Alarm[0] Event
var t_buffer = buffer_create(256, buffer_grow, 1);
buffer_seek(t_buffer, buffer_seek_start, 0);
buffer_write(t_buffer, buffer_u8, global.IDENTIFIER_UNIQUE_ID);
buffer_write(t_buffer, buffer_string, global.clientUniqueID);
network_send_packet(global.client_socket, t_buffer, buffer_tell(t_buffer));
buffer_delete(t_buffer);
global.uniqueIDSent = true; // Ensure we don't resend the unique ID
show_debug_message("[Client] Unique ID sent after delay: " + global.clientUniqueID);


File: obj_Client.yy
Code:
{
  "$GMObject":"",
  "%Name":"obj_Client",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":68,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":1,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":2,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":5,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"obj_Client",
  "overriddenProperties":[],
  "parent":{
    "name":"Objects",
    "path":"folders/Objects.yy",
  },
  "parentObjectId":null,
  "persistent":true,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":null,
  "spriteMaskId":null,
  "visible":true,
}

File: Other_5.gml
Code:
/// @description Insert description here
//room end of obj_client
show_chatbox=false

File: Create_0.gml
Code:
// obj_Client setup Create Event
global.sessionLogFileName = "SessionLog_" + string_replace_all(string(date_current_datetime()), ":", "-") + ".txt";
global.masterLogFileName = "MasterLog.txt";
global.logDebugMessagesToFile = true; // By default, log debug messages to the file
global.serverAddress = "127.0.0.1"; // Example server address
// Initialize the data structure globally if not already initialized
global.chatLogs=-1
global.bubble_send_to_log=1
global.message_is_bubble=0
if (!ds_exists(global.chatLogs, ds_type_list)) {
    global.chatLogs = ds_list_create();
}
time=0
// Global Variable Initialization (usually in some global script or create event)
global.typingSpeedCalcDuration = 60; // Default to 60 seconds
global.lastWPMUpdateTime = 0; // Timestamp of the last WPM update
global.WPMUpdateInterval = 5000; // Minimum time between updates in milliseconds (e.g., 5000ms = 5 seconds)
lastUpdateTime = -1;
updateInterval = 60; // Run every 60 seconds
//input
input_cursor_coord_space_set(INPUT_COORD_SPACE.ROOM, 0);
//input_mouse_capture_set(true, 1);
window_set_cursor(cr_none)
instance_create_depth(room_width/2,room_height/2,-1000000,obj_Cursor);
// Global time offset initialized
global.timeOffset = 0;
global.inputDisplayEnabled = false;  // Initialize the variable at an appropriate place in your game startup code

// Adding command details
// Global initialization script or create event
global.commandDetails = ds_map_create();
add_command("goto_planet(", 1, [["string", "real"]], true);  // Requires '(' visually
add_command("jump_planet(", 1, [["string", "real"]], true);  // Requires '(' visually
add_command("toggle_server", 3, [[]], false);  // Does not require '(' visually
add_command("toggle_debug", 1, [[]], false);  // Does not require '(' visually
add_command("list_clients", 1, [[]], false);  // Does not require '(' visually
add_command("enable_heartbeat", 2, [[]], false);  // Does not require '(' visually
add_command("disable_heartbeat", 2, [[]], false);  // Does not require '(' visually
add_command("toggle_log_debug", 2, [[]], false);  // Does not require '(' visually
add_command("set_my_permission(", 0, [["string", "real"]], true);
add_command("save_game", 0, [[]], false);  // Does not require "(" visually
add_command("game_end(", 0, [["string", "real"]], true); 
add_command("list_commands", 0, [[]], false); // No arguments, accessible at all permission levels
add_command("show_lines(", 0, [["real"]], true);
add_command("set_variable(", 2, [["string"],["string","real"]],true)
add_command("level_up(", 1, [["real"]], true);  // Command requires '(' visually and a real number argument
add_command("show_wpm", 0, [[]], false);  // Does not require '(' visually, level 0 permission
add_command("chat_bubble(", 1, [["string"],["string"]],true); // Chat bubble command
add_command("save_macros", 1, [[]], false);  // Add the command to save macros
add_command("list_variables", 2, [[]], false);
add_command("add_action(", 2, [["string"],["string"],["array"]],true);
add_command("save_actions", 2, [], false);
add_command("list_actions", 2, [], false);
add_command("execute_action(", 2, [["string"]], true);
add_command("show_variable(", 2, [["string"]], true);
add_command("return_controller", 1, [[]], false);
add_command("toggle_input_display", 1, [[]], false);
add_command("show_gamepad_mapping", 1, [[]], false);
add_command("chat_bubble_choices(", 1, [["string"], ["string"], ["string", "string"]], true);
add_command("add_chat_bubble_action(", 2, [["string"], ["string"], ["string"], ["array"]], true);
// Initialize global action details
global.actionDetails = ds_map_create();



//add_command("spawn_boss(", 2, [["string"]], true);

//0name //1health //2resistance0-1invincible /3/rate //4attackset //5damage //6moveset //7image //8appearance [0=character,1=boss] //9appearanceid
//add_boss("Drake",6666666,.666,1,1,1,4,spr_boss1,1,0]

// You can add new commands or modify existing ones easily with the `add_command` function.
global.variableDetails = ds_map_create();
add_variable("Level", "level", 1, master, "real", 1, 100000, [], [], "Player");
add_variable("BPM", "target_bpm", 115, global, "real", 1, 100000, [], [], "Gameplay");
add_variable("Time", "ti", 0, master, "real", 0, 99999999, [], [], "Gameplay");
add_variable("WPM Window", "typingSpeedCalcDuration", 60, global, "real", 1, 600, [], [], "Social");
add_variable("CharacterLimit", "character_limit", 1, global, "real", 0, 1000, [], [], "Social");
add_variable("Macro1", "macro1", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro2", "macro2", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro3", "macro3", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro4", "macro4", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro5", "macro5", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro6", "macro6", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro7", "macro7", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro8", "macro8", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro9", "macro9", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("Macro10", "macro10", 1, global, "real", -99999999, 99999999, [], [], "Global");
add_variable("ControllerType", "control_type", 1, global, "real", -99999999, 99999999, [], [], "Global");
global.debugCommand = "";
//global.character_limit
// Ensure commandBuffer is initialized
global.commandBuffer = "";
slash_typed=false //whether or not a command is being typed
// Initialize a global variable for text color
c_pink = make_color_hsv(0,58,255);
global.defaultTextColor = c_black;
global.textColor = global.defaultTextColor;
// Global Variable Initialization (usually in some global script or create event)
global.typingSpeedCalcDuration = 60; // Default to 60 seconds
 // This will store the input from the user
isActive = true;  // To check if command input is active
sendHeartbeat = false; // Control sending of heartbeat messages
_yy=0
pasting=0;
global.longestmessage=200;
global.c_chat2=c_black
global.c_chat1=c_white
fnt_chat=Font4
global.borderwidth=8 //bg width
global.bg_alpha=.4 //bg alpha
global.bg_color=c_black //background color
global.o_color=c_white //outline color
global.wrapWidth = 2350; // Adjust this value based on your chat box
global.character_limit=300;//character limit for chat
global.lastSpaceIndex = -1;

//Other Variables
global.showDebugMessages = true; // Enable debug messages by default
global.maximumMessages=2000;
maxDisplayMessages = 5; // Number of debug messages to display at once
// Initialize max visible lines for the chat box
global.max_visible_lines = maxDisplayMessages;  // You can adjust this number based on your needs

global.debugMessages = ds_list_create();
fnt_chat_id=0
// Global settings for text wrapping
global.chat_threshold = 2350;  // Threshold to start considering wrapping
global.chat_text_limit = 2350; // Maximum pixel width of text before wrapping
global.chat_line_height = 50; // Height of each line of text in pixels
global.min_width = 110;  // Minimum width of the chat box
global.max_width = 1000;  // Maximum width of the chat box, adjust according to your UI design
// Adjust these values to tweak where the text wraps
global.chat_threshold = global.chat_threshold * 1.66;  // Increase the threshold
global.chat_text_limit = global.chat_text_limit * 1.66;  // Increase the width limit

//Scrolling Variables
scrollIndex = 0; // Initialize scroll position
baseScrollSensitivity = 0.1; // Base sensitivity, how much the index changes initially per mouse wheel movement
maxScrollSensitivity = 1.0; // Maximum sensitivity after continuous scrolling
sensitivityIncrement = 0.05; // How much the sensitivity increases with continuous scrolling
sensitivityDecrement = 0.01; // How much the sensitivity decreases when not scrolling
global.scrollSensitivity = baseScrollSensitivity; // Current sensitivity, starts at base sensitivity
global.isScrolling = false; // Tracks if the user is currently scrolling

// Server Configuration
show_server_status=false
global.serverPort = "5555";
global.maxClients = 4;
global.heartbeatBPM = 115; // Beats per minute for the heartbeat
global.lastHeartbeatTime = current_time; // Store the current time
broadcastInterval = 60000 / global.heartbeatBPM; // Time between heartbeats in milliseconds

global.clientUniqueID = ""; // Initialize to an empty string
global.reconnectTimer = 0; // Time to attempt a reconnect
global.reconnectInterval = 2000; // Interval between reconnect attempts
global.isConnected = false; // Connection status
global.IDENTIFIER_UNIQUE_ID = 2; // Ensure this matches server expectation
global.uniqueIDSent = false; // Prevent re-sending

// Initialize server state and structures
isServerRunning = false;
connectedClients = 0;

// Generate or load the unique ID
if (!file_exists(working_directory + "client_id.txt")) {
    // For a new ID
    global.clientUniqueID = string(irandom_range(100000, 999999));
    var file = file_text_open_write(working_directory + "client_id.txt");
    file_text_write_string(file, global.clientUniqueID);
    file_text_close(file);
} else {
    // For an existing ID
    var file = file_text_open_read(working_directory + "client_id.txt");
    global.clientUniqueID = file_text_read_string(file);
    file_text_close(file);
}

// Client Initialization and Connection
global.client_socket = network_create_socket(network_socket_tcp);
var status = network_connect(global.client_socket, global.serverAddress, global.serverPort);
if (status >= 0) {
    // Successful connection
    show_debug_message("[Client] Successfully connected and ID sent.");
	isServerRunning = true;
    var buffer = buffer_create(256, buffer_grow, 1);
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_u8, global.IDENTIFIER_UNIQUE_ID);
    buffer_write(buffer, buffer_string, global.clientUniqueID);
    network_send_packet(global.client_socket, buffer, buffer_tell(buffer));
    buffer_delete(buffer);
} else {
    // Handle connection failure
    show_debug_message("[Client] Connection failed.");
}

show_chatbox=false
depth-=10; //ensure at top or front of view

global.backspaceTimer = 0;
global.backspaceDelay = 15; // Initial delay before rapid deletion
global.backspaceSpeed = 1;  // Delay between rapid deletions

global.recall_list = ds_list_create();  // List to store past messages and commands
global.recall_max = 20;  // Maximum number of entries to remember
global.recall_index = -1;  // Index for navigating through the recall list

shake_angle=0 //angle to shake text when character limit reached.

load_actions()


Object: yeancat

File: Step_0.gml
Code:
//STEP event for "yeancat" (the player object)
// You can write your code in this editor
audio_emitter_position(s_emit,x,y,0);

if master.mainmenu=1 {
	if menumove=0 and positionplace=0{
		menumove=choose(-1,1)
		menudir=choose(-1,1)
		x=room_width/2
		y=room_height/2
	}

if master.characters[master.charselect,0]=0 {
	c_cat=c_black
} else {
	c_cat=c_white
}
} else {
	trailalph=(1-1/(1+clamp(master.aspeed,0,1000)))*(1-1/(1+clamp(obj_terrain.player_height_fromground+obj_terrain.playeraltitude,0,1000)/5000))
}

if master.characters[master.charselect,16] !=0 {
if (obj_terrain.travelspeed=0) and round(10*(abs(_hspeed)+10*abs(_vspeed))/10 = 0.0) {
	if sitting<master.characters[master.charselect,16] {
		sitting=(sitting*49+master.characters[master.charselect,16])/50
	}
} else {
	if sitting>0 {
		sitting=sitting*49/50-1
	} else {
		sitting=0
	}
}
}

//responses
if speaking=0 {
if responding!=-1 {
		if !audio_is_playing(speak) {
		if master.responsecount[floor(responding / 6),responding mod 6 ]<1 {
		speak =  audio_play_sound_on(s_emit,responses[responding,master.charselect],0,0)
		master.responsecount[floor(responding / 6),responding mod 6 ]=round(10+random(10))
		speaking=1
		audio_sound_gain(speak,.8*master.mastervol*master.dialougevol,0);
		}
		
		}
	}
}
if speaking=1 {
	if !audio_is_playing(speak) {
		speaking=0
	}
}
if flying=1 {
	if !instance_exists(restar) {
	if abs(obj_terrain.playerpos)>0 {
	obj_terrain.playerpos=round(obj_terrain.playerpos*.97)
	} else {
		obj_terrain.playerpos=0
	}
	}
}
if instance_exists(master) {
	if positionplace=1 {
		if obj_backg.slideplanet=0 {
		if round(100*obj_terrain.systemposition)/100=0 {
		
		if obj_terrain.playeraltitude>0 {
			
	obj_terrain.playeraltitude=clamp(round(obj_terrain.playeraltitude*.96),0,39995)
	flying=0
	master.flying=0
	} else {
		obj_terrain.playerpos=0
		obj_terrain.playeraltitude=0
	}
		} else {
			if obj_terrain.playeraltitude<40000 {
				obj_terrain.playeraltitude=(obj_terrain.playeraltitude*12+40010)/13
			} else {
				flying=1
				obj_terrain.playeraltitude=40005
			}
			
		}
	if abs(obj_terrain.playerpos)>.1 {
		obj_backg.slideplanet=0
	obj_terrain.playerpos=round(obj_terrain.playerpos*.95)
	} else {
		obj_terrain.playerpos=0
	}
	if obj_terrain.systemposition!=0 {
		if obj_terrain.playeraltitude>=40000 {
		if abs(obj_terrain.systemposition)>180 {
	obj_terrain.systemposition=((obj_terrain.systemposition*24+360)/25)
	if obj_terrain.systemposition>359.5 {
		obj_terrain.systemposition=0
	}
	} else {
		if obj_terrain.systemposition<.5 {
		obj_terrain.systemposition=0
	} else {
		obj_terrain.systemposition=((obj_terrain.systemposition*24+0)/25)
	}
	}
		}
	} else {
		obj_backg.slideplanet=0
		obj_terrain.systemposition=0
		if abs(obj_terrain.playeraltitude)>0 {
			flying=0
	obj_terrain.playeraltitude=round(obj_terrain.playeraltitude*.95)-1
	if obj_terrain.playeraltitude<0 {
		obj_terrain.playeraltitude=0
	}
	} else {
		
		obj_terrain.playeraltitude=0
	}
	}
	if round(obj_terrain.systemposition) = 0 and round(obj_terrain.playerpos) = 0 and round(obj_terrain.playeraltitude)=0 {
		obj_terrain.systemposition=0
		obj_terrain.playerpos=0
		obj_terrain.playeraltitude=0
	master.spawnthings=1
						//grav=.2
						master.lower=0
						//master.dropgui=1
						master.ti=0
						positionplace=0
						flying=0
						master.flying=0
	}
	}
		var spdd=.015
if trailalph!=0 {
	trailalph=trailalph+(0-trailalph)*spdd
} else {
	trailalph=0
}
		if instance_exists(obj_backg) {
if obj_backg.fadein!=0 {
	obj_backg.fadein=obj_backg.fadein+(0-obj_backg.fadein)*spdd
} else {
	obj_backg.fadein=0
}
		}
		_hspeed=0
		_vspeed=0
		menumove=0
		menudir=0
		if rate>0 {
	rate-=1
} else {
	rate=rateset

	anicount+=1

}

if anicount>=5 {
	anicount = 0
}
		if flying=1 {
			var spddd= .01
		x=x+((room_width/2-500)-x)*spddd
		y=y+((room_height/2)-y)*spddd
		} else {
			
		}
		if point_distance(x,y,room_width/2-500,room_height/2)<75 {
				//if master.mainmenu=0 {
				if instance_exists(obj_backg) {
					if obj_backg.slideplanet<50 {
						if round(obj_terrain.systemposition) = 0 and round(obj_terrain.playeraltitude)=0 and round(obj_terrain.playerpos)=0 {
						master.spawnthings=1
						//grav=.2
						//master.lower=0
						master.lower=0
						//master.dropgui=1
						master.ti=0
						positionplace=0
						flying=0
						master.flying=0
						}
					}
				}
				
				//}
		}
		exit
	} else {
		if positionplace=2 {
		_hspeed=0
		_vspeed=0
		if rate>0 {

	rate-=1

} else {
	rate=rateset
	anicount+=1
}

if anicount=5 {
	anicount = 0
}

//walksound
if onground=1 {
	if anicount=4 and image_indexprev!=anicount {
		var walksnd = nothingsound
		var pick=choose(1,2,3,4)
		if pick =1 {
			walksnd=grasswalk1
		}
		if pick =2 {
			walksnd=grasswalk2
		}
		if pick =3 {
			walksnd=grasswalk3
		}
		if pick =4 {
			walksnd=grasswalk4
		}
		walksound=audio_play_sound_on(s_emit,walksnd,0,0,1*master.sfxvol*master.mastervol*clamp((abs(_hspeed))/150+.5,0,1),0,.5+clamp((abs(_hspeed))/25,0,2))
	}
}


		if positionplace=2 {
		_hspeed=0
		_vspeed=0
		x+=(global.room_speed_set/1000000*delta_time)*clamp(5*sign((room_width/2)-x)*(.1+abs((room_width/2)-x)/500),-10,10)
		y+=(global.room_speed_set/1000000*delta_time)*clamp(5*sign((room_height/2-65)-y)*(.1+abs((room_height/2-65)-y)/500),-10,10)
		

		exit
	}
	} else {
		if master.mainmenu=0 {
		if obj_backg.fadein<.001 {
			obj_backg.fadein=0 
		} else {
			obj_backg.fadein*=.9
		}
		}
	}
	}

if global.pause=1 {
	speed=0
	exit
} else {
	if dodge=1 {
		speed=1
	} else {
		speed=0
	}
}
ragemax=10+clamp(master.level/66,0,30)
if rage<ragemax {
	rage+=.01
}

if rate>0 {
					if flying=0 {
		if abs(_hspeed)>0 {
			rate-=.1+1*abs(_hspeed)/20
		}
	} else {
	rate-=.5+.5*abs(_hspeed)/20
	}
} else {
	rate=rateset
	anicount+=1
}

if anicount=5 {
	anicount = 0
}

if spawned=0 {
	//update healthh
	maxhealth=10+master.love
	healthh=maxhealth
	spawned=1
}

if healthh>maxhealth {
	healthh=maxhealth
	healthlast=healthh
}
if master.passives[15,3]>0 {
	if mermin>0 {
	mermin-=delta_time;
	} else {
		mermin=60*1000000;
		merctime=merctimeset*1000000;
	}
	
} 
merctimeset=5*master.mercy
if merctime>0 {
	if master.passives[15,3]>0 {
merctime-=delta_time
merc=1
	}
} else {
		merc=0

}

healsec=master.heartseconds*1000000
healsecount-=delta_time
if healsecount<0 {
		if healthh<maxhealth {
			//if healthh<=0 {
			//	healthh=round(healthh)
			//		healthh+=1
			//	}
			if healthh>0 {
				
				healthlast=healthh
			healthh+=master.heart
			}
	} else {
		healthh=maxhealth
	}
	healsecount=healsec
	}
	
if xpnote>6 {
	xpnote=0
}
	if master.mainmenu=0 {
		tallness= master.characters[master.charselect,14]
		var playerStats = calculatePlayerStats(master.level)
maxSpeed = playerStats.maxSpeed
timeToMax = playerStats.timeToMax
overMaxSpeed = playerStats.overMaxSpeed
timeToOverMax = playerStats.timeToOverMax
hspeedmax=maxSpeed
vspeedmax=maxSpeed
jumpheight=1.35+vspeedmax/15
jumptotal=2+floor(master.level/2)
if jumptotal > jumptotallast {
	var attrib = instance_create_layer(x,y,"foreground",obj_attribute_indicator)
	attrib.attribute_select=0
}

accel=(maxSpeed/(timeToMax)*(master.freewill+1)+8/(1+abs(_hspeed)/50))*(delta_time/1000000)
var accel2=overMaxSpeed/(timeToOverMax)*(delta_time/1000000)*(master.freewill+1)
if _hspeed=0 {
	movingg=0
}
if master.joystick=0 {
if input_check("right") {
	if flying=1 {
	if _hspeed<0 {
			_hspeed*=.9
			_hspeed+=.1
		}
	} else {
		if onground=0 {
			if _hspeed<hspeedmax/2 {
			_hspeed+=(obj_terrain.playeraltitude/40000)
			}
		}
	}
	if _hspeed>=0 {
		facing=1
	if onground=1 and flying=0 {
	if _hspeed<hspeedmax {
	_hspeed+=accel
	} else {
	if _hspeed<(hspeedmax+overMaxSpeed) {
		_hspeed+=accel2
	}
	}
	if onground=1 {
		if _hspeed=0 {
			movingg=0
			master.horz=0
		}
	}
	} else if flying=1  {
		
		if _hspeed<hspeedmax {
		_hspeed+=power(accel,.65)
		} else {
		if _hspeed<(hspeedmax+overMaxSpeed) {
			_hspeed+=power(accel2,.65)
		}
		}
	}
	} else {
		if _hspeed<0 {
			facing=1
			}
		if onground=1 {
		_hspeed=(_hspeed*25)/30+.5
	} else {
			if flying=0 {
				_hspeed=(_hspeed*29)/30+.01
			} else {
				_hspeed=(_hspeed*29)/30+.01
			}
		}
	}
}
if (input_check("left")) {
	if flying=1 {
	if _hspeed>0 {
			_hspeed*=.9
			_hspeed-=.1
		}
	}  else {
		if onground=0 {
			if _hspeed>-hspeedmax/2 {
			_hspeed-=(obj_terrain.playeraltitude/40000)
			}
		}
	}
	if _hspeed<=0 {
		facing=-1
	if onground=1 and flying=0 {
	if _hspeed>-hspeedmax{
	_hspeed-=accel
	} else {
	if _hspeed>-(hspeedmax+overMaxSpeed) {
		_hspeed-=accel2
	}
	}
	} else {
		if flying=1 {
		if _hspeed>-hspeedmax{
		_hspeed-=power(accel,.65)
		}  else {
	if _hspeed>-(hspeedmax+overMaxSpeed) {
		_hspeed-=power(accel2,.65)
	}
	}
		}
	}
	} else {
			if _hspeed>0 {
			facing=-1
			}
		if onground=1 {
		_hspeed=(_hspeed*25)/30-.5
		} else {
			if flying=0 {
				_hspeed=(_hspeed*29)/30-.01
			} else {
				_hspeed=(_hspeed*29)/30-.01
			}
		}
	}
}
if input_check("up") {
	if flying=1 {
	if _vspeed>-vspeedmax {
	_vspeed-=accel*.7
	}
	} else {

	}
	
} else if (input_check("down")) {
	if flying=1 {
	if _vspeed<vspeedmax {
	_vspeed+=accel*.7
	}
	_vspeed=clamp(_vspeed,-100,(clamp(obj_terrain.playeraltitude-(39998+(abs(obj_terrain.d2plan))),0,20000)/(25*(1+abs(obj_terrain.d2plan)))))
		} else {
			if _vspeed < vspeedmax*(obj_terrain.playeraltitude/2000) {
				_vspeed+=accel*.7*(obj_terrain.playeraltitude/40000)
			}
	}
	
}
	} else {
		//joystick
		if master.joystickon=1 {
			if abs(_hspeed)<hspeedmax {
		_hspeed+=accel*(1)*lengthdir_x(master.joydist/100,master.joyangle)
			}
		if flying=1 {
		_vspeed+=accel*(.7)*lengthdir_y(master.joydist/100,master.joyangle)
		} else {
			if lengthdir_y(master.joydist/100,master.joyangle)>lengthdir_y(master.joydist/100,270)*.75 {
			if _vspeed < vspeedmax*(obj_terrain.playeraltitude/2000) {
				_vspeed+=accel*.7*(obj_terrain.playeraltitude/40000)
			}
			//down joystick
			}
			//upjoystick
			if lengthdir_y(master.joydist/100,master.joyangle)<lengthdir_y(master.joydist/100,90)*.75 {
				if canjump=1 and resjump=0 {
					resjump=1
			if rising=-1 {
		rising=0
//clamp(_vspeed-((abs(_hspeed)+1)*jumpheight+20),-100000,0)
		_vspeed+=clamp(-((abs(clamp(power(abs(_hspeed),.5),-100,100))+15)*jumpheight),-75-(obj_terrain.playeraltitude/4000),0)
		if _vspeed>0 {
			_vspeed=clamp(-((abs(clamp(power(abs(_hspeed),.5),-100,100))+15)*jumpheight),-75-(obj_terrain.playeraltitude/4000),0)/(1+abs(_vspeed/25))
		}
		y+=(global.room_speed_set/1000000*delta_time)*_vspeed/2
	}
	if flying=0 {

if canjump=1 {
	_vspeed+=clamp(-((abs(clamp(power(abs(_hspeed),.5),-100,100))+15)*jumpheight),-75-(obj_terrain.playeraltitude/4000),0)
		if _vspeed>0 {
			_vspeed=clamp(-((abs(clamp(power(abs(_hspeed),.5),-100,100))+15)*jumpheight),-75-(obj_terrain.playeraltitude/4000),0)/(1+abs(_vspeed/25))
		}
		if !rising=1 and obj_terrain.playeraltitude>0 {
	y+=(global.room_speed_set/1000000*delta_time)*_vspeed/2
	} else {
			if obj_terrain.playeraltitude>0 {
			
				rising=0
			obj_terrain.playeraltitude-=(global.room_speed_set/1000000*delta_time)*_vspeed
			} else {
				obj_terrain.playeraltitude=0
			}
		}
	jumping=1
	jumpcount-=1
	if jumpcount<=0 {
		canjump=0
		jumpcount=0
	}
	}
}
}
			} else {
				resjump=0
			}
		}
		}
	}
	}

if master.mainmenu=0 {
	if flying=1 {
	if master.joystick=0 {
//vertical friction
if _vspeed !=0 {
if (!(input_check("up")) and !(input_check("down"))) {
	_vspeed*=.95*frict
	if abs(_vspeed) <.001 {
		_vspeed=0
	}
}
}


//horizontal friction
if _hspeed !=0 {
if (!(input_check("left")) and !(input_check("right"))) {
	_hspeed*=.94
	if abs(_hspeed) <.004 {
		_hspeed=0
	}
}  else {
		//_hspeed*=.98*frict
}
}

	} else {
		//joystick
		if master.joystickon=0 {
			_vspeed*=.95*frict
			_hspeed*=.95*frict
		}
	}
	} else {
		//not flying
			if master.joystick=0 {
//vertical friction
if _vspeed !=0 {
if !(input_check("up")) {
	if _vspeed<0 {
		_vspeed*=.94*frict
		if abs(_vspeed) <.001 {
		_vspeed=0
	}
	}

} else {
	if _vspeed<0 {
		_vspeed*=.94*frict
		if abs(_vspeed) <.001 {
		_vspeed=0
	}
	}
}
}
//horizontal friction
if _hspeed !=0 {
if !(input_check("left")) and !(input_check("right")) {
	if onground=1 {
	_hspeed*=.94*frict
	if abs(_hspeed) <.004 {
		_hspeed=0
	}
	}
}
}

} else {
		//joystick
if master.joystickon=0 {
	_hspeed*=.94*frict
} else {
	if lengthdir_y(master.joydist/100,master.joyangle)>lengthdir_y(master.joydist/100,270)*.75 {
		if _vspeed<0 {
			_vspeed*=.94*frict
		}
	} else {
		if _vspeed<0 {
			_vspeed*=.94*frict
		}
	}
		}
	}
		
}

//move
if dodge>0{
	dodge-=.05
	if instance_exists(enemy) {
	var dodgetarg= instance_nearest(x,y,enemy);
	direction=point_direction(dodgetarg.x,dodgetarg.y,x,y)
	speed=(dodge*master.speedd+5)/15
	} else {
		dodge=0
	} 
} else {
	if dodge !=-1 {
	speed=0
	dodge=-1
	}
	
}

	//slow down star movement
if y>(room_height/2-1080*master.camscale/2+100) and y<(room_height/2+1080*master.camscale/2-100) {
	
	if y<room_height/2+1080*.5*master.camscale*5/8 {
	master.vert*=.95*frict
	if abs(master.vert) < .001 {
		
		master.vert=0
	}
	}
}
} else {

}
if master.mainmenu=1 { //main menu bouncing around the screens border effect (like a screensaver)
	//master.vert=0
	//master.horz=0
if x>room_width/2+1920*master.camscale/2-150 {
	_hspeed=0
	speed=0
master.horz=1

	menumove=-1
	x=room_width/2+1920*master.camscale/2-151
}
if x<room_width/2-1920*master.camscale/2+150 {
	_hspeed=0
	speed=0
master.horz=-1
	menumove=1
	x=room_width/2-1920*master.camscale/2+151
}
if y>room_height/2+1080*master.camscale/2-100 {
	_vspeed=0
	speed=0
	master.vert=1
	y=room_height/2+1080*master.camscale/2-101
	menudir=-1
}
if y<room_height/2-1080*master.camscale/2+100 {
	_vspeed=0
	speed=0
	master.vert=-1
	y=room_height/2-1080*master.camscale/2+101
	menudir=1
}
			accel=.3
		_vspeed+=accel*menudir
		_hspeed+=accel*menumove

} else {
	if flying=0 {
	if master.aspeedshow<10 {
				
				if centerfade<0 {
					centerfade=0
				} else {
					master.horz=0
					centerfade=floor(centerfade*.98-1)
				}
				}
	} else {
		if master.aspeedshow<10 {
				
				if centerfade<0 {
					centerfade=0
				} else {
					master.horz=0
					centerfade=floor(centerfade*.98-1)
				}
				}
	}

	if x>=room_width/2+floor((1-centerfade/500)*1920*.75*5*master.camscale/8) {

	if flying=1 {
		movingg=1
		master.horz=1
	//_hspeed=0
	speed=0
	x=(room_width/2+floor((1-centerfade/500)*1920*.75*5*master.camscale/8))
	} else {
		if _hspeed>0 {
			//rate-=.1+.9*abs(_hspeed)/25
			x=(room_width/2+floor((1-centerfade/500)*1920*.75*5*master.camscale/8))
			movingg=1
			master.horz=1
			} else {
				movingg=0
				master.horz=0
			}
	}
}  else {
	if x>room_width/2 {
	if flying=1 {
		movingg=0
		master.horz=0
	} else {
		if _hspeed>0 {
		movingg=0
		master.horz=0
		}
	}
	}
}

if x<=room_width/2-floor((1-centerfade/500)*1920*.75*5*master.camscale/8) {
		if flying=1 {
		movingg=-1
		master.horz=-1
	//_hspeed=0
	speed=0
	x=(1*((room_width/2-floor((1-centerfade/500)*1920*.75*5*master.camscale/8))))
		} else {
			x=(1*((room_width/2-floor((1-centerfade/500)*1920*.75*5*master.camscale/8))))
			if _hspeed<0 {
			//rate-=.1+.9*abs(_hspeed)/25
			movingg=-1
			master.horz=-1
			} else {
				movingg=0
				master.horz=0
			}
		}
	} else {
		if x<room_width/2 {
		if flying=1 {
		movingg=0
		master.horz=0
	} else {
		if _hspeed<0 {
		movingg=0
		master.horz=0
		}
	}
		}
	}

if flying=1 {
if y>room_height/2+1080*.5*master.camscale*5/8 {
	
	//_vspeed=0
	speed=0
	master.vert=1
	y=room_height/2+1080*.5*master.camscale*5/8+1
	obj_terrain.playeraltitude-=(global.room_speed_set/1000000*delta_time)*20*(clamp(obj_terrain.playeraltitude-40000,0,20000)/10000)
}
} else {
	
	//master.vert=1
if obj_terrain.playeraltitude>0 {
	if y>=(room_height/2+1080*master.camscale/2-100) {
		master.vert=1
if _vspeed>0 {
	rising=-1
} else {
	rising=0
}
//obj_terrain.playeraltitude-=(global.room_speed_set/1000000*delta_time)*_vspeed
y-=1*((room_height/2-1080*.5*master.camscale*5/8)-y)+1
}
} else {
	obj_terrain.playeraltitude=0
}
}

if y<room_height/2-1080*.5*master.camscale*5/8 {
	if flying=1 {
	//_vspeed=0
	speed=0
	master.vert=-1
	y+=1*((room_height/2-1080*.5*master.camscale*5/8)-y)+1
	obj_terrain.playeraltitude+=(global.room_speed_set/1000000*delta_time)*20
	} else {
		master.vert=-1
		
		obj_terrain.playeraltitude-=(global.room_speed_set/1000000*delta_time)*_vspeed
	
	
	rising=1
	//y+=1*((room_height/2-1080*.5*master.camscale*5/8)-y)+1
	//speed=0
	//master.vert=-1
	if _vspeed>0 {
		y+=_vspeed
	}
	
	}
	
} else {
	if y>room_height/2+1080*.5*master.camscale*3/8 {
		if flying=0 {
	if obj_terrain.playeraltitude>0 {
		rising=-1
		master.vert=1
		obj_terrain.playeraltitude-=clamp((global.room_speed_set/1000000*delta_time)*_vspeed,-200,20)

		} else {
			rising=0
		}
		}
	} else {
		if obj_terrain.playeraltitude>0 {
		rising=0
		//obj_terrain.playeraltitude-=(global.room_speed_set/1000000*delta_time)*_vspeed

		} else {
			rising=0
			obj_terrain.playeraltitude=0
		}
	}
}
if master.horz!=0 {
	if flying=0 {
	if centerfade<450 {
			centerfade+=master.aspeedshow/4
		} else {
			centerfade=450
		}
	} else {
		if centerfade<400 {
			centerfade+=master.aspeedshow/20
		} else {
			centerfade=400
		}
	}
} else {
}
		


if breakheart>0 {
	breakheart-=.01
} else {
	breakheart=0
}

if oxy>0 {
	time+=.03+.03*(clamp(5-oxy,.1,5))
	oxy-=.0006*(.95+oxy*1.2)
	oxydamage=clamp(oxydamage-.00075,1,999);
oxyspeed=clamp(oxyspeed-.00075,1,999);
oxyresistance=clamp(oxyresistance-.00075,0,1);
oxyrate=clamp(oxyrate-.00075,1,999);
} else {
	time=0
	oxy=0
	oxydamage=1
oxyspeed=1
oxyresistance=0
oxyrate=1
}

if def>0 {
	def-=.00075*(global.room_speed_set/1000000*delta_time)*(.99+def)
	if gunrateset>1 {
		gunrateset-=.001*(def+1)
	}
	if gunrotrate<10 {
		gunrotrate+=.0005*(def+1)
	}
	gunrate-=.3*master.attackrate*oxyrate*stemrate*(global.room_speed_set/1000000*delta_time)
	if gunrate<0 {
		instance_create_layer(x+100*facing,y-facing*sin(gunrot * pi / 180)*100+40,"player",bullet)
	var gun = round(random(2))
if gun = 0 {
	gunsnd = audio_play_sound_on(s_emit,gun1,0,0);
}
if gun = 1 {
	gunsnd = audio_play_sound_on(s_emit,gun2,0,0);
}
if gun = 2 {
	gunsnd = audio_play_sound_on(s_emit,gun3,0,0);
}
audio_sound_gain(gunsnd,.7*master.mastervol*master.sfxvol,0);
gunrate=gunrateset
	}
	if gundir=1 {
		gunrot+=gunrotrate
		if gunrot>45 {
			gundir=-1
		}
	}
	if gundir=-1 {
		gunrot-=gunrotrate
		if gunrot<-45 {
			gundir=1
		}
	}
	
} else {
	audio_stop_sound(soundscream)
	def=0
	gunrotrate=1
	gunrateset=10
	gunrate=gunrateset
}
}

	damageframe-=1
	if damageframe=0 {
	for (i=45; i>0; i--) {
	redcount[i]=redcount[i-1]
	}
	if redcount[0]=1 {
		redcount[0]=0
	}
	damageframe=damageframeset
	}

if flying=1 and master.mainmenu=0 {
	
	if (x>room_width/2-1920*.75*5*master.camscale/8+1) and  x<(room_width/2+1920*.75*5*master.camscale/8-1) {
//if x>(room_width/2-1920*master.camscale/2+149) and x<(room_width/2+1920*master.camscale/2-149) {
	master.horz*=.95*frict
	if abs(master.horz) < .001 {
		master.horz=0
	}
}

} else {

//if x>(room_width/2-1920*master.camscale/2+149) and x<(room_width/2+1920*master.camscale/2-149) {
	if master.mainmenu=0 {
if movingg=0 {

	master.horz*=.99*frict
	if abs(master.horz) < .001 {
		master.horz=0
	}
	}

	if positionplace=0 {
		var gravv=.2
		if instance_exists(obj_terrain) {
		gravv=master.grav*(1/(1+clamp((obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/2000,0,1000)))
		}
	_vspeed+=gravv*(global.room_speed_set/1000000*delta_time)*(200/(800+master.aspeed))
	if flying=0 {
		if _vspeed>500*(1-(1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/10000)))+5 {
		_vspeed=500*(1-(1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/10000)))+5
	}
	}
	}
	} else {
		if positionplace=0 {
	y+=(global.room_speed_set/1000000*delta_time)*_vspeed/2
		} else {
		}
	}
	if master.mainmenu=0 {
if master.joystick=0 {
	if keyboard_check(ord("A")) or keyboard_check(vk_left)  {
		if movingg=1 {
			movingg=0
		}
	facing=-1
	} else {
		//facing=-1
	}
//}
//if _hspeed<0 {
	if input_check("right") {
	facing=1
	} else {
		if movingg=-1 {
			movingg=0
		}
		//facing=1
	}
//}
} else {
	if master.joystickon=1 {
	facing=sign(lengthdir_x(master.joydist/100,master.joyangle))
	}
}


	}
}
if instance_exists(obj_terrain) {
	if ((obj_terrain.player_height_fromground)-tallness+sitting+obj_terrain.playeraltitude - _vspeed)<=0 {
		if master.mainmenu=0 and flying=0 {
		onground=1
		canjump=1
		jumpcount=jumptotal
		_vspeed=0;
		obj_terrain.playeraltitude=0
		y=obj_terrain.ground_yvalue_belowplayer-tallness+sitting
		}
	} else {
		if obj_terrain.player_height_fromground-tallness+sitting+obj_terrain.playeraltitude-_vspeed>3 {
			//jumping=1
		onground=0
		} else {
	jumping=0
		}
		if rising=0 {
		y+=(global.room_speed_set/1000000*delta_time)*_vspeed
			if obj_terrain.playeraltitude>0 {
			obj_terrain.playeraltitude-=(global.room_speed_set/1000000*delta_time)*_vspeed
			} else {
				obj_terrain.playeraltitude=0
			}
		} else {
			//	if obj_terrain.playeraltitude>=0 {
			//obj_terrain.playeraltitude-=(global.room_speed_set/1000000*delta_time)*_vspeed
			//} else {
			//	obj_terrain.playeraltitude=0
			//}
		}
	}
if input_check_pressed("up") {
	if rising=-1 {	
if canjump=1 {
		_vspeed+=clamp(-((abs(clamp(power(abs(_hspeed),.5),-100,100))+15)*jumpheight),-75-(obj_terrain.playeraltitude/4000),0)
		if _vspeed>0 {
			_vspeed=clamp(-((abs(clamp(power(abs(_hspeed),.5),-100,100))+15)*jumpheight),-75-(obj_terrain.playeraltitude/4000),0)/(1+abs(_vspeed/25))
		}
		y+=(global.room_speed_set/1000000*delta_time)*_vspeed/2
		rising=0
	}
	}
	if flying=0 {

if canjump=1 {
	_vspeed+=clamp(-((abs(clamp(power(abs(_hspeed),.5),-100,100))+15)*jumpheight),-75-(obj_terrain.playeraltitude/4000),0)
		if _vspeed>0 {
			_vspeed=clamp(-((abs(clamp(power(abs(_hspeed),.5),-100,100))+15)*jumpheight),-75-(obj_terrain.playeraltitude/4000),0)/(1+abs(_vspeed/25))
		}
	if !rising=1 and obj_terrain.playeraltitude<0 {
	y+=(global.room_speed_set/1000000*delta_time)*_vspeed/2
	} else {
			if obj_terrain.playeraltitude>0 {
			
				rising=0
			obj_terrain.playeraltitude-=(global.room_speed_set/1000000*delta_time)*_vspeed
			} else {
				obj_terrain.playeraltitude=0
			}
		}
	jumping=1
	jumpcount-=1
	if jumpcount<=0 {
		canjump=0
		jumpcount=0
	}
	}
}
}
if movingg=0 {
	//moving in game
	if positionplace!=0 {
x+=(global.room_speed_set/1000000*delta_time)*_hspeed
	} else {
		//if positionplace=0 {
			if master.mainmenu=1 {
		x+=(global.room_speed_set/1000000*delta_time)*_hspeed/2
			} else {
				x+=(global.room_speed_set/1000000*delta_time)*_hspeed
			}
		//}
	}
} else {
	//obj_terrain.playerpos+=(global.room_speed_set/1000000*delta_time)*master.horz*abs(_hspeed);
}
if flying=0 {
	//if onground=1 {

	var tarang=obj_terrain.player_angle_onground
	var tarang2=point_direction(0,0,_hspeed*10,_vspeed*10)+90*abs(facing-1)
if rotatebody!=(tarang * (1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/200))+ tarang2 * (1-1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/200))) {
var _diff = angle_difference(tarang, rotatebody);
var _diff2 = angle_difference(tarang2, rotatebody);

rotatebody += (_diff * 0.5 * (1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/200))+_diff2 * 0.1 * (1-1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/200)))*(1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/20000))
} else {
	rotatebody=(tarang * (1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/200))+ tarang2 * (1-1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/200)))
}
	//}

} else {
	if facing=1 {
		rotatebody=(rotatebody*59)/60
	} else {
		rotatebody=(rotatebody*59)/60
	}
	if rising=0 and obj_terrain.playeraltitude>0 {
	y+=_vspeed*(global.room_speed_set/1000000*delta_time)
	}
}
}

if master.mainmenu=1 {
	rotatebody=0
}

if healthh<=0 {
	
	oxy=0
	oxydamage=1
	oxyrate=1
	oxyresistance=0
	oxyspeed=1
	master.stemplay=0
	master.stemtime=0
	stemdamage=1
	stemrange=1
	stemrate=1
	stemresistance=0
	if deaths<master.revives {
		var rq = instance_create_layer(room_width/2,0,"uii", obj_reviveq);
		rq.ad=0
		if master.mainmenu=0 {
	global.pause=1

        audio_pause_sync_group(master.sg);
		audio_pause_all()
		
	}
		exit
		
	} else {
		//if os_type=os_ios or os_type=os_android {
		if master.adsleft>0 {
		var rq = instance_create_layer(room_width/2,0,"uii", obj_reviveq);
		rq.ad=1
		if master.mainmenu=0 {
	global.pause=1

        audio_pause_sync_group(master.sg);
		audio_pause_all()
		
	}
		master.adsleft-=1
		exit
		}
		//}
	deaths+=1
		with (master) {
			deaths+=1
	master.stemtime=0
	master.stemplay=0
{
	audio_sound_gain(sound1, 0, 0);
	audio_group_set_gain(agBass,0,0);
}
{
	audio_sound_gain(sound2, 0, 0);
	audio_group_set_gain(agDrums,0,0);
}
{
	audio_sound_gain(sound3, 0, 0);
	audio_group_set_gain(agMelodies,0,0);
}
{
	audio_sound_gain(sound4, 0, 0);
	audio_group_set_gain(agVocals,0,0);
}
		}
	instance_destroy();
	}
}

//xp pitching
if master.donda3=0 {
audio_sound_pitch(xpsound,master.keypitch*(1+(master.speedd-10)/300)*(1-master.lower/1000)*global.room_speed_set/60)
audio_sound_pitch(levelupsnd,master.keypitch*(1+(master.speedd-10)/300)*(1-master.lower/1000)*global.room_speed_set/60)
audio_sound_pitch(speak,1*(1+(master.speedd-10)/300)*(1-master.lower/1000)*global.room_speed_set/60)
audio_sound_pitch(hurtsnd,1*(1+(master.speedd-10)/300)*(1-master.lower/1000)*global.room_speed_set/60)
audio_sound_pitch(soundscream,1*(1+(master.speedd-10)/300)*(1-master.lower/1000)*global.room_speed_set/60)
//audio_emitter_pitch(s_emit,1*(1+(master.speedd-10)/300)*(1-master.lower/1000)*global.room_speed_set/60)
} else {
	if master.ti < 2013 {
	audio_sound_pitch(xpsound,master.keypitch*1*(1-master.lower/1000)*global.room_speed_set/60)
	audio_sound_pitch(levelupsnd,master.keypitch*1*(1-master.lower/1000)*global.room_speed_set/60)
	audio_sound_pitch(speak,1*(1-master.lower/1000)*global.room_speed_set/60)
	audio_sound_pitch(hurtsnd,1*(1-master.lower/1000)*global.room_speed_set/60)
	audio_sound_pitch(soundscream,1*(1-master.lower/1000)*global.room_speed_set/60)
	//audio_emitter_pitch(s_emit,1*(1-master.lower/1000)*global.room_speed_set/60)
	} else {
		audio_sound_pitch(xpsound,master.keypitch*(master.ti/2013)*(1-master.lower/1000)*global.room_speed_set/60)
		audio_sound_pitch(levelupsnd,master.keypitch*(master.ti/2013)*(1-master.lower/1000)*global.room_speed_set/60)
		audio_sound_pitch(speak,(master.ti/2013)*(1-master.lower/1000)*global.room_speed_set/60)
		audio_sound_pitch(hurtsnd,(master.ti/2013)*(1-master.lower/1000)*global.room_speed_set/60)
		audio_sound_pitch(soundscream,(master.ti/2013)*(1-master.lower/1000)*global.room_speed_set/60)
		//audio_emitter_pitch(s_emit,(master.ti/2013)*(1-master.lower/1000)*global.room_speed_set/60)
	}
}
}

if merc=1 {
	c_cat=c_dkgray
} else {
	c_cat=c_white
}
if dodge=1 {
	c_cat=make_color_hsv(color_get_hue(c_gray)*dodge+color_get_hue(c_white)*(1-dodge),color_get_saturation(c_gray)*dodge+color_get_saturation(c_white)*(1-dodge),color_get_value(c_gray)*dodge+color_get_value(c_white)*(1-dodge));
}
if invincible>0 {
	c_cat=make_color_hsv(time*50,(invincible)*255,(1-invincible)*255)
}

if master.mainmenu=0 {
	menudir=0;
	if invincible<=0{
		invincible=0
if healthh!=healthlast  and master.damagenumbers = 1 {
	if merc=1 {
		if sign(healthh-healthlast)=-1 {
			healthh=(healthh*(50*master.einstein)+healthlast*(50*(2-master.einstein)))/100
		}
	}
	if dam=noone {
	dam= instance_create_layer(x,y,"damage",obj_damage)
	master.damgro=1
	master.fadedam=1
	if merc=1 {
		dam.merc=1;
	}
	dam.targ=self
	dam.damage=healthlast-healthh
	rage-=dam.damage
	} else {
		if sign(dam.damage) != sign(healthlast-healthh) {
			dam=noone
			dam= instance_create_layer(x,y,"damage",obj_damage)
			master.damgro=1
			master.fadedam=1
			if merc=1 {
		dam.merc=1;
	}
			dam.targ=self
			dam.damage=healthlast-healthh
			rage-=dam.damage
		} else {
		dam.damage+=healthlast-healthh
		master.damgro=1
		master.fadedam=1
		}
	}
}
	}else{
		invincible-=.003*(global.room_speed_set/1000000*delta_time);
	}
} else {
	healthh=maxhealth
}

healthlast=healthh
jumptotallast=jumptotal
if rage<0 {
	rage=0
}
image_indexprev=anicount

File: Destroy_0.gml
Code:
/// @description Insert description here
// You can write your code in this editor
audio_stop_sound(speak)
audio_stop_sound(soundscream)
audio_emitter_free(s_emit);
with (oweapon) {
	instance_destroy();
}

File: Draw_0.gml
Code:
///Draw Event of yeancat
if instance_exists(obj_achievments) {
	if obj_achievments.page=1 {
		exit
	}
}

draw_set_alpha(sqr(breakheart)/2)
draw_sprite_ext(spr_shadow,0,x-6*facing,y,.58*facing,.72,rotatebody,c_white,.85);
draw_circle_color(x,y,breakheart*(100*master.range*(1+(.05*master.passives[10,3])*master.einstein+master.lheartbreak)),c_red,c_maroon,0)
draw_set_alpha(1)
draw_circle_color(x,y,breakheart*(100*master.range*(1+(.05*master.passives[10,3])*master.einstein+master.lheartbreak)),c_black,c_black,true)
for (i=0 ; i<round(((abs(facing-1)*room_width/2)+(facing*x))/110); i+=1) {
	
	if redcount[clamp(i,0,51)]=1 {
		if (oxy)>0 {
		draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+1,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_maroon,(0.7 * sin(2 * pi * (time) / (40/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
	draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+2,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_black,(0.7 * sin(2 * pi * (time) / (39/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
	draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+3,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.7 * sin(2 * pi * (time) / (38/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
	draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+4,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_dkgrey,(0.7 * sin(2 * pi * (time) / (37/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
		}
		draw_sprite_ext(master.characters[master.charselect,12],round(anicount),x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y,6*scale*facing,6*scale,rotatebody,c_red,(1-(i/42)-clamp(master.revani/clamp(i,1,99),0,99))*trailalph)
		if (oxy)>0 {
		draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+4,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_maroon,(0.4 * sin(2 * pi * (time) / (37/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
	draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+3,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_black,(0.4 * sin(2 * pi * (time) / (38/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
	draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+2,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.4 * sin(2 * pi * (time) / (39/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
	draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+1,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_dkgrey,(0.4 * sin(2 * pi * (time) / (40/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
		}
		
	
	} else {
		if (oxy)>0 {
		draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+1,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.7 * sin(2 * pi * (time) / (40/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
	draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+2,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_green,(0.7 * sin(2 * pi * (time) / (39/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
	draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+3,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_yellow,(0.7 * sin(2 * pi * (time) / (38/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
	draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+4,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_blue,(0.7 * sin(2 * pi * (time) / (37/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
		}
	draw_sprite_ext(master.characters[master.charselect,12],round(anicount),x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y,6*scale*facing,6*scale,rotatebody,c_cat,(1-(i/42)-clamp(master.revani/clamp(i,1,99),0,99))*trailalph)
	if (oxy)>0 {
		draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+4,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.4 * sin(2 * pi * (time) / (37/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
	draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+3,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_green,(0.4 * sin(2 * pi * (time) / (38/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
	draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+2,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_yellow,(0.4 * sin(2 * pi * (time) / (39/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
	draw_sprite_ext(master.characters[master.charselect,12],round(anicount)+1,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_blue,(0.4 * sin(2 * pi * (time) / (40/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-master.revani)))*trailalph);
		}
	}
}
if redcount[0]=1{
	if (oxy)>0 {
	
	draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+4,x+(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (57 /(oxy*2+1))) + 0.9)*((9+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_maroon,(0.7 * sin(2 * pi * (time) / (40/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+3,x+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (58/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_black,(0.7 * sin(2 * pi * (time) / (39/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+2,x-(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (59/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.7 * sin(2 * pi * (time) / (38/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+1,x-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (60/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_ltgray,(0.7 * sin(2 * pi * (time) / (37/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
	}
	draw_sprite_ext(master.characters[master.charselect,11],round(anicount),x,y,6*scale*facing,6*scale,rotatebody,c_red,1-master.revani)
	if (oxy)>0 {
	draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+4,x+(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (60 /(oxy+1))) + 0.9)*((9+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_maroon,(0.4 * sin(2 * pi * (time) / (37/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+3,x+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_black,(0.4 * sin(2 * pi * (time) / (38/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+2,x-(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.4 * sin(2 * pi * (time) / (39/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+1,x-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_ltgray,(0.4 * sin(2 * pi * (time) / (40/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
	}
} else {
	if (oxy)>0 {
	draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+1,x+(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (57 /(oxy*2+1))) + 0.9)*((9+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.7 * sin(2 * pi * (time) / (40/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+2,x+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (58/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_green,(0.7 * sin(2 * pi * (time) / (39/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+3,x-(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (59/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_yellow,(0.7 * sin(2 * pi * (time) / (38/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+4,x-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (60/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_blue,(0.7 * sin(2 * pi * (time) / (37/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
	}
	draw_sprite_ext(master.characters[master.charselect,11],round(anicount),x,y,6*scale*facing,6*scale,rotatebody,c_cat,1-master.revani)
	
	if (oxy)>0 {
	draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+4,x+(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (60 /(oxy+1))) + 0.9)*((9+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.4 * sin(2 * pi * (time) / (37/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+3,x+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_green,(0.4 * sin(2 * pi * (time) / (38/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+2,x-(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_yellow,(0.4 * sin(2 * pi * (time) / (39/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
draw_sprite_ext(master.characters[master.charselect,11],round(anicount)+1,x-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_blue,(0.4 * sin(2 * pi * (time) / (40/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
	}
	
}

if redcount[0]=1{
	
	draw_sprite_ext(master.characters[master.charselect,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing,y+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*20*scale,4*scale*50*facing/sprite_get_height(master.characters[master.charselect,10]),3*scale*50/sprite_get_height(master.characters[master.charselect,10]),rotatebody,c_red,1-master.revani)
} else {
	if (oxy)>0 {
	draw_sprite_ext(master.characters[master.charselect,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 60) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 15) - 0.5)*13*((oxy+7))/7,3*scale*facing*(0.2 * sin(2 * pi * (time) / (57/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[master.charselect,10])*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.7 * sin(2 * pi * (time) / (40/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
	draw_sprite_ext(master.characters[master.charselect,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 45) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 30) - 0.5)*13*((oxy+7))/7,3*scale*facing*(0.2 * sin(2 * pi * (time) / (58/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[master.charselect,10])*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_green,(0.7 * sin(2 * pi * (time) / (39/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
	draw_sprite_ext(master.characters[master.charselect,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 30) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 45) - 0.5)*13*((oxy+7))/7,3*scale*facing*(0.2 * sin(2 * pi * (time) / (59/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[master.charselect,10])*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_yellow,(0.7 * sin(2 * pi * (time) / (38/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
	draw_sprite_ext(master.characters[master.charselect,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 15) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 60) - 0.5)*13*((oxy+7))/7,3*scale*facing*(0.2 * sin(2 * pi * (time) / (60/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[master.charselect,10])*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_blue,(0.7 * sin(2 * pi * (time) / (37/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
		}
	draw_sprite_ext(master.characters[master.charselect,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing,y+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*20*scale,4*scale*50*facing/sprite_get_height(master.characters[master.charselect,10]),3*scale*50/sprite_get_height(master.characters[master.charselect,10]),rotatebody,c_cat,1-master.revani)
	if (oxy)>0 {
		draw_sprite_ext(master.characters[master.charselect,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 15) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 60) - 0.5)*13*((oxy+7))/7,3*scale*facing*50/sprite_get_height(master.characters[master.charselect,10])*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[master.charselect,10])*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.4 * sin(2 * pi * (time) / (37/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
	draw_sprite_ext(master.characters[master.charselect,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 30) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 45) - 0.5)*13*((oxy+7))/7,3*scale*facing*50/sprite_get_height(master.characters[master.charselect,10])*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[master.charselect,10])*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_green,(0.4 * sin(2 * pi * (time) / (38/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
	draw_sprite_ext(master.characters[master.charselect,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 45) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 30) - 0.5)*13*((oxy+7))/7,3*scale*facing*50/sprite_get_height(master.characters[master.charselect,10])*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[master.charselect,10])*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_yellow,(0.4 * sin(2 * pi * (time) / (39/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
	draw_sprite_ext(master.characters[master.charselect,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 60) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 15) - 0.5)*13*((oxy+7))/7,3*scale*facing*50/sprite_get_height(master.characters[master.charselect,10])*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[master.charselect,10])*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_blue,(0.4 * sin(2 * pi * (time) / (40/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-master.revani)));
		}
	}
if shade = 1 {
	var xofff=48-sprite_get_xoffset(master.characters[master.charselect,10])
	var yofff=85-sprite_get_yoffset(master.characters[master.charselect,10])
draw_sprite_ext(spr_shades,0,x+xofff+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing,y+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*20*scale+yofff,4*scale*facing,3*scale,rotatebody,c_cat,1-master.revani)
}

if def>0 {
	draw_sprite_ext(spr_ak,0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing,y+40+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*10*scale,2*scale*facing,2*scale,gunrot,c_cat,1-master.revani)
}

draw_set_alpha(breakheart/5)
draw_circle_color(x,y,.99*breakheart*(100*master.range*(1+(.05*master.passives[10,3])*master.einstein+master.lheartbreak)),c_red,c_black,0)
draw_set_alpha(1)
draw_circle_color(x,y,breakheart*(101*master.range*(1+(.05*master.passives[10,3])*master.einstein+master.lheartbreak)),c_black,c_black,true)

if master.characters[master.charselect,0]=0 {
	draw_sprite_ext(spr_lock,0,x,y,.7*((0.5 * sin(2 * pi * (time) / 15) + 0.5)/10+1),.7*((0.5 * sin(2 * pi * (time) / 15) + 0.5)/10+1),rotatebody,c_dkgray,1)
	draw_sprite_ext(spr_lock,1,x,y,.7*((0.5 * sin(2 * pi * (time) / 15) + 0.5)/10+1),.7*((0.5 * sin(2 * pi * (time) / 15) + 0.5)/10+1),rotatebody,c_dkgray,1)
}


if master.devmode=1 {
	if keyboard_check(vk_shift) {
		exit
	}
}
	
	if master.devmode=1 and keyboard_check(vk_space) {//draws some debugging information when in dev mode
		draw_set_alpha(1);
	draw_set_color(c_white);
	draw_line(room_width/2+(1-centerfade/500)*1920*.75*5*master.camscale/8,0,room_width/2+(1-centerfade/500)*1920*.75*5*master.camscale/8,room_height)//visual of line where player moves world around them
draw_line(room_width/2-(1-centerfade/500)*1920*.75*5*master.camscale/8,0,room_width/2-(1-centerfade/500)*1920*.75*5*master.camscale/8,room_height)
	draw_set_font(Font4);
	draw_text(room_width/2-400,room_height/2-250,"sysposis: "+string(obj_terrain.systemposition))
	draw_text(room_width/2-400,room_height/2-200,"Speed: "+string(master.speedd))
	draw_text(room_width/2-400,room_height/2-150,"Alt:"+string(obj_terrain.playeraltitude))
	draw_text(room_width/2-400,room_height/2-100,"RISING: "+string(rising))
	draw_text(room_width/2-400,room_height/2-50,"HSPEED: "+string(_hspeed))
	draw_text(room_width/2-400,room_height/2,"VSPEED: "+string(_vspeed))
	draw_text(room_width/2+400,room_height/2-250,"DEF: "+string(def))
	draw_text(room_width/2+400,room_height/2-200,"HORZ: "+string(master.horz))
	draw_text(room_width/2+520,room_height/2-200,"VERT: "+string(master.vert))
	draw_text(room_width/2+400,room_height/2-150,"playerpos: "+string(obj_terrain.playerpos))
	draw_text(room_width/2+400,room_height/2-100,"movingg: "+string(movingg))
	draw_text(room_width/2+400,room_height/2-50,"planet: "+string(obj_terrain.planet))
	draw_text(room_width/2+400,room_height/2,"heightag:"+string(obj_terrain.player_height_fromground))
	draw_text(room_width/2+400,room_height/2+50,"permissions: "+string(master.permissions))
	draw_text(room_width/2+400,room_height/2+100,"BPM Target:"+string(global.target_bpm))
	draw_text(room_width/2+400,room_height/2+150,"BPM"+string(global.current_bpm))
	draw_text(room_width/2-400,room_height/2+50,"BPM Duration"+string(global.pitch_duration))
	draw_text(room_width/2-400,room_height/2+100,"FPS: "+string(fps))
	draw_text(room_width/2-400,room_height/2+150,"room_speed: "+string(global.room_speed_set))
	draw_text(room_width/2-400,room_height/2+200,"fps:"+string(fps_real))
	draw_text(room_width/2-400,room_height/2+250,"music loop"+string(master.loop))
	draw_text(room_width/2+200,room_height/2+200,"aspeed:"+string(master.aspeed))
	draw_text(room_width/2+200,room_height/2+250,"instancecount"+string(instance_count))
	}
//////joystick for phones (simulated joystick)
if master.joystickon=1 {
	
	draw_sprite_ext(spr_joystick,0,master.joystickx,master.joysticky,master.joysticksize*master.camscale,master.joysticksize*master.camscale,rotatebody,c_white,.75);
	draw_sprite_ext(spr_joystick,0,master.joystickx+lengthdir_x(master.joydist*9/12,master.joyangle)*master.camscale*master.joysticksize,master.joysticky+lengthdir_y(master.joydist*9/12,master.joyangle)*master.camscale*master.joysticksize,master.joysticksize*master.camscale/3,master.joysticksize*master.camscale/3,rotatebody,c_white,1);
	
}

File: Collision_flash.gml
Code:
/// yeancat Collision with flash (object)

if invincible=0 {
if instance_exists(obj_levelup) {
	exit
} else {
	if instance_exists(obj_pickupq) {
	exit
} else {
	if global.pause=1 {
	exit
} else {
}
}
}

if other.image_index<=1 {
	if random(1000)>(master.champion*1000) {
	var ddd=(other.damage/(shade+1))*(1*(1-master.resistance))*(1-oxyresistance)*(1-stemresistance)
healthh-=ddd
if master.heartbreak>0 {
	var split=0
	if instance_exists(yeancat) {
	for (var _i=0; _i<instance_number(enemy);_i++) {
				 var _inst = instance_find(enemy, _i);
				 if point_distance(_inst.x,_inst.y,yeancat.x,yeancat.y)<(100*master.range*(1+(.05*master.passives[10,3])*master.einstein+master.lheartbreak)) {
				split+=1
				}
			}
	if split>0 {
	with (enemy) {
		
		if point_distance(x,y,yeancat.x,yeancat.y)<(100*master.range*(1+(.05*master.passives[10,3])*master.einstein+master.lheartbreak)) {
	
		healthh-=ddd*master.heartbreak*yeancat.oxydamage*yeancat.stemdamage/split*(1*(1-resistance))
		if master.faith > 0 {
			//yeancat.healthh+=(master.faith*ddd*master.heartbreak*yeancat.oxydamage*yeancat.stemdamage/split)*(1*(1-resistance))
		}
		}
	}
	yeancat.breakheart=1
	}
	}
}
	

redcount[0]=1
	

if instance_exists(other.owner) {
with (other.owner) {
	suchit=1
}
}
responding=(other.sndmanid-1)*6+4


var hur1 = master.charsounds[master.charselect,0]
var hur2 = master.charsounds[master.charselect,1]
var hur3 = master.charsounds[master.charselect,2]

var hit = round(random(2))
var hurt = round(random(2))
if hit = 0 {
	hurtsnd2=audio_play_sound_on(s_emit,hurt1,0,0);
}
if hit = 1 {
	hurtsnd2=audio_play_sound_on(s_emit,hurt2,0,0);
}
if hit = 2 {
	hurtsnd2=audio_play_sound_on(s_emit,hurt3,0,0);
}
if hurt = 0{
	hurtsnd=audio_play_sound_on(s_emit,hur1,0,0);
}
if hurt = 1 {
	hurtsnd=audio_play_sound_on(s_emit,hur2,0,0);
}
if hurt = 2 {
	hurtsnd=audio_play_sound_on(s_emit,hur3,0,0);
}

audio_sound_gain(hurtsnd,1*master.dialougevol,0);
audio_sound_gain(hurtsnd2,1*master.sfxvol,0);
	} else {
		dodge=1;
		if instance_exists(enemy) {
			instance_nearest(x,y,enemy).missed=1;
		}
	}
}
}

File: yeancat.yy
Code:
{
  "$GMObject":"",
  "%Name":"yeancat",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":{"name":"flash","path":"objects/flash/flash.yy",},"eventNum":0,"eventType":4,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":1,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"yeancat",
  "overriddenProperties":[],
  "parent":{
    "name":"Objects",
    "path":"folders/Objects.yy",
  },
  "parentObjectId":null,
  "persistent":false,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":{
    "name":"spr_nyan",
    "path":"sprites/spr_nyan/spr_nyan.yy",
  },
  "spriteMaskId":null,
  "visible":true,
}

File: Create_0.gml
Code:
///CREATE EVENT for yeancat

i=0
tallness=0
centerfade=0
trailalph=1
rotatebody=0
onground=0
facing=1
flying=1
rising=0
movingg=0
jumping=0
canjump=1
jumpheight=1
jumptotal=2
jumptotallast=jumptotal
jumpcount=2
s_emit= audio_emitter_create();
audio_max_distance_to_be_heard = 1800;
audio_starts_to_drop_at = 200;

audio_falloff_set_model(audio_falloff_linear_distance);
audio_emitter_position(s_emit,x,y,0);
audio_emitter_falloff(s_emit,audio_starts_to_drop_at,audio_max_distance_to_be_heard, 1);
sndmanid=0
image_indexprev=0
responding=-1
soundscream=audio_play_sound(nothingsound,0,0);
walksound=audio_play_sound(nothingsound,0,0);
soundxtra=audio_play_sound(nothingsound,0,0);

responses=load_responses()//loads sound effects, different characters will hear different things.
speaking=0

image_speed=0
frame=0
oxy=0
rateset=5
rate=rateset
anicount=0
c_cat=c_white
scale=1
pick=noone;
xpnote=0
delta_second=1000000
positionplace=0
spawned=0;
mermin=60*1000000
healsec=5*1000000;
healsecount=healsec;
merc=0
merctimeset=5
merctime=0
time=0
damageframe=3
damageframeset=3
dam=noone;
oxydamage=1
oxyspeed=1
oxyresistance=0
oxyrate=1
breakheart=0
hurtsnd=audio_play_sound(nothingsound,0,0);
hurtsnd2=audio_play_sound(nothingsound,0,0);
invincible=0
gunsnd=audio_play_sound(nothingsound,0,0);
stemrange=1
stemrate=1
stemdamage=1
stemresistance=0
rage=0
ragemax=10

gunrot=0
gundir=1

def=0

gunrateset=10
gunrotrate=1
gunrate=gunrateset
menumove=choose(-1,1)
menudir=choose(-1,1)
sitting=0
damaged=0
redcount[0]=0
redcount[1]=0
redcount[2]=0
redcount[3]=0
redcount[4]=0
redcount[5]=0
redcount[6]=0
redcount[7]=0
redcount[8]=0
redcount[9]=0
redcount[10]=0
redcount[11]=0
redcount[12]=0
redcount[13]=0
redcount[14]=0
redcount[15]=0
redcount[16]=0
redcount[17]=0
redcount[18]=0
redcount[19]=0
redcount[20]=0
redcount[21]=0
redcount[22]=0
redcount[23]=0
redcount[24]=0
redcount[25]=0
redcount[26]=0
redcount[27]=0
redcount[28]=0
redcount[29]=0
redcount[30]=0
redcount[31]=0
redcount[32]=0
redcount[33]=0
redcount[34]=0
redcount[35]=0
redcount[36]=0
redcount[37]=0
redcount[38]=0
redcount[39]=0
redcount[40]=0
redcount[41]=0
redcount[42]=0
redcount[43]=0
redcount[44]=0
redcount[45]=0
redcount[46]=0
redcount[47]=0
redcount[48]=0
redcount[49]=0
redcount[50]=0
redcount[51]=0

deaths=0
dodge=-1

//responding
//1=RazziA
respond=0

_hspeed=0
_vspeed=0

hspeedmax=6
vspeedmax=5

accel=.2

healthh=10
maxhealth=10
healthlast=healthh

//lower number stop quicker
frict=1

shade=0

xpsound=audio_play_sound(nothingsound,0,0)
speak=audio_play_sound(nothingsound,0,0)
levelupsnd=audio_play_sound(nothingsound,0,0)

maxSpeed = 10
timeToMax = 2
overMaxSpeed = 3
timeToOverMax = 3
resjump=0
master.vert=menudir
master.horz=menumove

Object: enemy

File: Step_2.gml
Code:
///enemy (parent object) End Step
if x>room_width/2-3/8*room_width*master.camscale or x<room_width/2+3/8*room_width*master.camscale or y>room_height/2-room_height*3/8*master.camscale or y<room_height/2+room_height*3/8*master.camscale {		

if time > 100-clamp(instance_number(enemy)/5,0,98) {
	instance_destroy();
}
}

File: enemy.yy
Code:
{
  "$GMObject":"",
  "%Name":"enemy",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":2,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"enemy",
  "overriddenProperties":[],
  "parent":{
    "name":"parents",
    "path":"folders/Objects/parents.yy",
  },
  "parentObjectId":null,
  "persistent":false,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":null,
  "spriteMaskId":null,
  "visible":true,
}

Object: cancelledsign

File: Step_0.gml
Code:
/// @description Insert description here
// You can write your code in this editor
visible=draw
if instance_exists(restar) {
direction=point_direction(room_width/2,room_height/2,x,y)
speed+=.1
exit
}
if global.pause=1 {
	if !instance_exists(restar) {
	speed=0;
	exit
	}
} else {
	if visible=1 {
		if place_meeting(x+1,y,stardavid) {
			x-=5
		}
		if place_meeting(x-1,y,stardavid) {
			x+=5
		}
		if place_meeting(x,y+1,stardavid) {
			y-=5
		}
		if place_meeting(x,y-1,stardavid) {
			y+=5
		}
	}
}
if dead=0 {
if rate>0 {
	rate-=1
} else {
	rate=rateset
	anicount+=1
}

if scale=0 {
	if master.vanish>0 {
		magnetplayer=magnetplayer*(1-master.vanish)
	}
scale=sizee*.9+random(.2*sizee);
healthh=ceil(healthh*(scale+.1)*power(.995+master.level/200,1.2))
damage=ceil(damage*(scale+.1)*(.995+master.level/300))
xp=xp
oblivious=power(oblivious,.999+master.level/1000)
maxhealth=healthh
healthlast=healthh
image_xscale=scale*.75
image_yscale=scale*.75
if movetype=9 {
	directional=1
if directional=1 {
	if instance_exists(yeancat) {
	direction=point_direction(x,y,yeancat.x,yeancat.y);
	}
	speed=clamp(spd*(4+(master.speedd+10)/30),0,40);
	}
} else {
spd=clamp(spd*(.5+(master.speedd+5)/50),0,80);
}
}

//if x>1950 and x<2200 {
//	y = random(room_height+1500)-500
//}

if anicount=4 {
	anicount = 0
}
if col = c_red {
	damtime-=1
	if damtime<0 {
		col=c_white
		damtime=5
	}
}
if col = c_silver {
	damtime-=1
	if damtime<0 {
		col=c_white
		damtime=5
	}
}
if missed>0 {
	col=make_color_hsv(color_get_hue(c_gray)*missed+color_get_hue(c_white)*(1-missed),color_get_saturation(c_gray)*missed+color_get_saturation(c_white)*(1-missed),color_get_value(c_gray)*missed+color_get_value(c_white)*(1-missed));
	missed-=.01
	if missed=0 {
		col=c_ltgray
	}
	if grabbed=0 {
	x-=missed*master.speedd/2*(global.room_speed_set/1000000*delta_time)
	}
} else {
	if col=c_ltgray {
		col=c_white
		missed=0
	}
}
if instance_exists(yeancat) {
	if sop=1 {  
	if place_meeting(x,y,yeancat) {
	diii = 1
	} else {
		diii=0
	}
	}
} else {
	diii = 0
}
if !(sop=1 and diii=1) {
	var blendmove=1
if grabbed=0 {
	if directional=0 {
		if instance_exists(yeancat) {
			if magnetplayer>0 {
		blendmove=clamp(distance_to_object(yeancat)/(100*magnetplayer*spd),0,1)
		} else {
			blendmove=1
		}
		} else {
			blendmove=1
		}

	if movetype=0 {
x-=((((master.speedd+32)/39))*varispeed*spd+1)*drift*(global.room_speed_set/1000000*delta_time)*blendmove
	}
		if movetype=1 {
x+=((((master.speedd+32)/39))*varispeed*spd+1)*drift*(global.room_speed_set/1000000*delta_time)*blendmove
	}
		if movetype=2 {
y-=((((master.speedd+32)/39))*varispeed*spd+1)*drift*.56*(global.room_speed_set/1000000*delta_time)*blendmove
	}
		if movetype=3 {
y+=((((master.speedd+32)/39))*varispeed*spd+1)*drift*.56*(global.room_speed_set/1000000*delta_time)*blendmove
	}
		if movetype=4 {
x-=(((((master.speedd+32)/39))*varispeed*spd+1)*drift)/2*(global.room_speed_set/1000000*delta_time)*blendmove
y+=(((((master.speedd+32)/39))*varispeed*spd+1)*drift)/2*(global.room_speed_set/1000000*delta_time)*.56*blendmove
	}
		if movetype=5 {
x-=(((((master.speedd+32)/39))*varispeed*spd+1)*drift)/2*(global.room_speed_set/1000000*delta_time)*blendmove
y-=(((((master.speedd+32)/39))*varispeed*spd+1)*drift)/2*(global.room_speed_set/1000000*delta_time)*.56*blendmove
	}
		if movetype=6 {
x+=(((((master.speedd+32)/39))*varispeed*spd+1)*drift)/2*(global.room_speed_set/1000000*delta_time)*blendmove
y-=(((((master.speedd+32)/39))*varispeed*spd+1)*drift)/2*(global.room_speed_set/1000000*delta_time)*.56*blendmove
	}
		if movetype=7 {
x+=(((((master.speedd+32)/39))*varispeed*spd+1)*drift)/2*(global.room_speed_set/1000000*delta_time)*blendmove
y+=(((((master.speedd+32)/39))*varispeed*spd+1)*drift)/2*(global.room_speed_set/1000000*delta_time)*.56*blendmove
	}
if movetype=9 {
	if instance_exists(yeancat) {
			
		if passplayer!=1 and passplayer !=2 {	
			xdi=sign(yeancat.x-x)*(master.speedd+10)/30
			ydi=sign(yeancat.y-y)*(master.speedd+10)/30
			x+=xdi*followplayer/100*(global.room_speed_set/1000000*delta_time)
			y+=ydi*followplayer/100*(global.room_speed_set/1000000*delta_time)
		} else {
			if passplayer=1 {
			xdi=sign(yeancat.x-x)*(master.speedd+10)/30
			ydi=sign(yeancat.y-y)*(master.speedd+10)/30
			x+=xdi*followplayer/100*(global.room_speed_set/1000000*delta_time)
			y+=ydi*followplayer/100*(global.room_speed_set/1000000*delta_time)
			if distance_to_object(yeancat)<20 {
				passplayer=2
				x+=xdi*followplayer/100*(global.room_speed_set/1000000*delta_time)
				y+=ydi*followplayer/100*(global.room_speed_set/1000000*delta_time)
			}
			} else {
			}
		}
	}
	
}
strafetime+=.005/strafemult*(0.5 * sin(2 * pi * time / 5)+.75)+.01
	time+=randomtime/20*(0.5 * sin(2 * pi * strafetime / 5)+.75)+.01
	strafe=strafemax*(0.5 * sin(2 * pi * strafetime / 5))*strafemult
	strafeosc= 5*(0.5 * sin(2 * pi * time / 5))+.1
	var yyy=3*varispeed*strafeosc*strafe*spd*((master.speedd+50)/100)+yrand

if instance_exists(yeancat) {
if master.vert != 0 {
	y-=clamp((global.room_speed_set/1000000*delta_time)*master.vert*abs(yeancat._vspeed)*playerdrift*.5,-50,50)/(1+obj_terrain.playeraltitude/5000)
}

if master.horz != 0 {
	x-=clamp((global.room_speed_set/1000000*delta_time)*master.horz*abs(yeancat._hspeed)*playerdrift*.5,-50,50)/(1+obj_terrain.playeraltitude/5000)
}
}  else {
	//y+=yyy*(global.room_speed_set/1000000*delta_time)
}
var y2=0
if instance_exists(yeancat) {
	//yrand*=.999
	if movetype=0  or movetype=4{

	y2=(varispeed*((master.speedd+50)/100)*spd/(clamp(abs(yeancat.x-x),1920/((master.speedd+50)/100),1920*((master.speedd+50)/100))/(1920*((master.speedd+25)/50))))*sign(yeancat.y-y)*(abs(yeancat.y-y)/(1920*((master.speedd+50)/100)))
	
y+=.56*clamp(abs(yeancat.y-y)/(100*magnetplayer*spd+1),0,1)*blendmove*(y2*(1-oblivious)*(1-master.vanish)+.56*clamp(abs(yeancat.y-y)/(100*magnetplayer*spd+1),0,1)*yyy*(1-((1-(master.vanish))/(oblivious+1)-oblivious/2)))*(global.room_speed_set/1000000*delta_time)
x-=blendmove*abs(yyy)*(global.room_speed_set/1000000*delta_time)*sign(x-yeancat.x)*(abs(yeancat.y-y)/(1080))
	}
	if movetype=1  or movetype=6{
	y2=(varispeed*((master.speedd+50)/100)*spd/(clamp(abs(yeancat.x-x),1920/((master.speedd+50)/100),1920*((master.speedd+50)/100))/(1920*((master.speedd+25)/50))))*sign(yeancat.y-y)*(abs(yeancat.y-y)/(1920*((master.speedd+50)/100)))

y+=.56*clamp(abs(yeancat.y-y)/(100*magnetplayer*spd+1),0,1)*blendmove*(y2*(1-oblivious)*(1-master.vanish)+.56*clamp(abs(yeancat.y-y)/(100*magnetplayer*spd+1),0,1)*yyy*(1-((1-(master.vanish))/(oblivious+1)-oblivious/2)))*(global.room_speed_set/1000000*delta_time)
x+=blendmove*(abs(yyy)/2)*(global.room_speed_set/1000000*delta_time)*sign(yeancat.x-x)*(abs(yeancat.y-y)/(1080))
	}
	if movetype=2 or movetype=5 {

	y2=(varispeed*((master.speedd+50)/100)*spd/(clamp(abs(yeancat.y-y),1080/((master.speedd+50)/100),1080*((master.speedd+50)/100))/(1080*((master.speedd+25)/50))))*sign(yeancat.x-x)*(abs(yeancat.x-x)/(1080*((master.speedd+50)/100)))

x+=clamp(abs(yeancat.x-x)/(100*magnetplayer*spd+1),0,1)*blendmove*(y2*(1-oblivious)*(1-master.vanish)+clamp(abs(yeancat.x-x)/(100*magnetplayer*spd+1),0,1)*yyy*(1-((1-(master.vanish))/(oblivious+1)-oblivious/2)))*(global.room_speed_set/1000000*delta_time)
y-=.56*blendmove*(abs(yyy)/2)*(global.room_speed_set/1000000*delta_time)*sign(y-yeancat.y)*(abs(yeancat.x-x)/(1920))
	}
	if movetype=3 or movetype=7{
	y2=(varispeed*((master.speedd+50)/100)*spd/(clamp(abs(yeancat.y-y),1080/((master.speedd+50)/100),1080*((master.speedd+50)/100))/(1080*((master.speedd+25)/50))))*sign(yeancat.x-x)*(abs(yeancat.x-x)/(1080*((master.speedd+50)/100)))

x+=clamp(abs(yeancat.x-x)/(100*magnetplayer*spd+1),0,1)*blendmove*(y2*(1-oblivious)*(1-master.vanish)+clamp(abs(yeancat.x-x)/(100*magnetplayer*spd+1),0,1)*yyy*(1-((1-(master.vanish))/(oblivious+1)-oblivious/2)))*(global.room_speed_set/1000000*delta_time)
y+=.56*blendmove*(abs(yyy)/2)*(global.room_speed_set/1000000*delta_time)*sign(yeancat.y-y)*(abs(yeancat.x-x)/(1920))
	}
}
	} else {
		//directional
	//if movetype=9 
	{
		if followplayer>0 {
			
			if passplayer!=1 and passplayer !=2 {
				if instance_exists(yeancat) {
			var dirtop = point_direction(x,y,yeancat.x,yeancat.y)
			
				direction+=(dirtop-direction)*(followplayer/100)
				if direction>360 {
					direction=0
				}
				if direction<0 {
					direction=360
				}
			} else {
				var dirtop = 180
			}
			} else {
				if instance_exists(yeancat) {
					if passplayer=1 {
						var dirtop = point_direction(x,y,yeancat.x,yeancat.y)
			if master.vert != 0 {
								y-=(1+varispeed/2)*master.vert*(1+yeancat.vspeedmax/2)*global.madj
							}
								if master.horz != 0 {
								x-=(1+varispeed/2)*master.horz*(1+yeancat.hspeedmax/2)*global.madj
							}
				direction+=(dirtop-direction)*(followplayer/100)
				if direction>360 {
					direction=0
				}
				if direction<0 {
					direction=360
				}
				if distance_to_object(yeancat)<20 {
					passplayer=2
				}
						
					} else {
							if master.vert != 0 {
								y-=(1+varispeed/2)*master.vert*(1+yeancat.vspeedmax/2)*global.madj
							}
								if master.horz != 0 {
								x-=(1+varispeed/2)*master.horz*(1+yeancat.hspeedmax/2)*global.madj
							}
					}
					
				}
			}
		
			//if direction>=0 and direction <= 90 {
			//	direction+=(dirtop-direction)*(followplayer/100)
			//}
			//if direction>90 and direction <= 180 {
			//	direction+=(dirtop-direction)*(followplayer/100)
			//}
			//if direction>180 and direction <= 90 {
			//	direction+=(dirtop-direction)*(followplayer/100)
			//}
			//if direction>270 and direction <= 360 {
			//	direction+=(dirtop-direction)*(followplayer/100)
			//}
		} else {
			
		}

	if speed<(master.speedd+10)/30 {
		speed+=.5
	}
	
	}
	}
} else {
	speed=0
}
} else {
	speed=0
}

if x<-500 {
	if dam != noone {
		dam.targ=noone
		dam=noone
	}
	instance_destroy()
}

if dam != noone {
	dam.targ=self
	dam.x=(dam.x*1+x*2)/3
	dam.y=(dam.y*1+y*2)/3
}

if healthh>maxhealth {
	healthh=maxhealth
}


if healthh!=healthlast  and master.damagenumbers = 1 {
	if dam=noone {
	dam= instance_create_layer(x,y,"damage",obj_damage)
	dam.targ=self
	if crit=1 {
		dam.crit=1
		crit=0
	}
	dam.damage=healthlast-healthh
	} else {
		if sign(dam.damage) != sign(healthlast-healthh) {
			dam.targ=noone
			dam=noone
			dam= instance_create_layer(x,y,"damage",obj_damage)
			dam.targ=self
			if crit=1 {
		dam.crit=1
		crit=0
	}
			dam.damage=healthlast-healthh
		} else {
		dam.damage+=healthlast-healthh
			if crit=1 {
		dam.crit=1
		crit=0
	}
		}
	}
}

healthlast=healthh
if audio_is_playing(hurtsnd) {
audio_sound_pitch(hurtsnd,1*(1-master.lower/1000)*global.room_speed_set/60)
}
if healthh<=0 {
		if instance_exists(yeancat) {
		if master.soundmanager[sndmanid,5]<1 {
			if !audio_is_playing(speak) {
				if dead=0 {
		yeancat.responding=(sndmanid-1)*6+5
		speak = audio_play_sound_on(s_emit,snd[5,master.charselect],0,0)
		master.soundmanager[sndmanid,5]=round(5+random(5))
				}
			}
	}
	}
	dead=1

}

if playerdrift > 0 {
	if instance_exists(yeancat) {
	x-=(yeancat.x-yeancat.xprevious)*playerdrift
	y-=(yeancat.y-yeancat.yprevious)*playerdrift
	}
	//playerdirection needed
	x-=1*(master.speedd+50)/50*playerdrift
}
} else {
	alph-=.02*(global.room_speed_set/1000000*delta_time)
	_hspeed=0
	_vspeed=0
	direction=point_direction(room_width/2,room_height/2,x,y)
	speed+=.05
	bodyangle+=clamp(2-speed,0,2)
	col=merge_color(c_red,c_black,1-alph)
	image_xscale*=.99
	image_yscale*=.99
	if alph<0 {
		
		if !audio_is_playing(speak) {
			instance_destroy()
		}
	}
}
if dead=0 {
if magnetplayer>0 {
	if instance_exists(yeancat) {
		var dcat= distance_to_object(yeancat)
	if dcat < 100*magnetplayer*spd {
		x+=clamp(spd*(global.room_speed_set/1000000*delta_time)*(yeancat.x-x)*(1-dcat/(100*magnetplayer*spd))/30,-spd,spd)
		y+=clamp(spd*(global.room_speed_set/1000000*delta_time)*(yeancat.y-y)*(1-dcat/(100*magnetplayer*spd))/30,-spd,spd)
	}
	}
}
}


File: Other_40.gml
Code:
/// @description Insert description here
// You can write your code in this editor
draw=false

File: Destroy_0.gml
Code:
/// @description Insert description here
// You can write your code in this edito
audio_stop_sound(speak)
audio_emitter_free(s_emit);

if global.pause=1 or !instance_exists(master) {
	exit
}

if healthh<=0 {
	master.runkills[enemyid]+=1
	master.allkills[enemyid]+=1
if xp>0 {
var orb = instance_create_layer(x,y,"projectiles",xporb)
orb.xpvalue=xp
}
if dollar>0 {
	if random(1000)<master.luck*333 {
		var dol=instance_create_layer(x,y,"projectiles",dondadollar);
		dol.valuee=clamp(round(random(dollar))*master.wealth*master.lwealth,1,9999999)
		dol.itemidd=1
	}
}
}

File: Draw_0.gml
Code:
/// @description Insert description here
// You can write your code in this editor
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,bodyangle,col,1)
//draw_set_alpha(1);
//draw_set_color(c_white);
//draw_text(x,y-100,string(movetype));

File: Other_50.gml
Code:
/// @description Insert description here
// You can write your code in this editor
draw=true

File: Other_0.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if x<-500 or x>room_width+500 or y<-500 or y>room_height+500 {
instance_destroy()
}

File: Collision_yeancat.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if instance_exists(yeancat) and dead=0 {
if other.invincible=0 {

if missed=0 {
	if grabbed=0 and frozen = 0 {
if random(1000)>(master.champion*1000) {
var ddd = (clamp(master.dondasblessing,1,1+999*round(1-(clamp(yeancat.healthh/yeancat.maxhealth,0,1)))))*damage*(1*(1-master.resistance))*(1-yeancat.oxyresistance)*(1-yeancat.stemresistance)
other.healthh-=ddd

if master.heartbreak>0 {
	var split=0
	if instance_exists(yeancat) {
	for (var _i=0; _i<instance_number(enemy);_i++) {
				 var _inst = instance_find(enemy, _i);
				 if point_distance(_inst.x,_inst.y,yeancat.x,yeancat.y)<(100*master.range*(1+(.05*master.passives[10,3])*master.einstein+master.lheartbreak)) {
				split+=1
				}
			}
	if split>0 {
	with (enemy) {
		
		if point_distance(x,y,yeancat.x,yeancat.y)<(100*master.range*(1+(.05*master.passives[10,3])*master.einstein+master.lheartbreak)) {
	
		healthh-=ddd*master.heartbreak*yeancat.oxydamage*yeancat.stemdamage/split*(1*(1-resistance))
		if master.faith > 0 {
			yeancat.healthh+=(master.faith*ddd*master.heartbreak*yeancat.oxydamage*yeancat.stemdamage/split)*(1*(1-resistance))
		}
		}
	}
	
	yeancat.breakheart=1
	}
	}
}
other.redcount[0]=1
var hur1 = master.charsounds[master.charselect,0]
var hur2 = master.charsounds[master.charselect,1]
var hur3 = master.charsounds[master.charselect,2]

with (other) {
var hit = round(random(2))
var hurt = round(random(2))
if hit = 0 {
	hurtsnd2=audio_play_sound_on(s_emit,hurt1,0,0);
}
if hit = 1 {
	hurtsnd2=audio_play_sound_on(s_emit,hurt2,0,0);
}
if hit = 2 {
	hurtsnd2=audio_play_sound_on(s_emit,hurt3,0,0);
}
if hurt = 0{
	hurtsnd=audio_play_sound_on(s_emit,hur1,0,0);
}
if hurt = 1 {
	hurtsnd=audio_play_sound_on(s_emit,hur2,0,0);
}
if hurt = 2 {
	hurtsnd=audio_play_sound_on(s_emit,hur3,0,0);
}

audio_sound_gain(hurtsnd,1*master.dialougevol,0);
audio_sound_gain(hurtsnd2,1*master.sfxvol,0);
}
if doc=1 {
	instance_destroy()
}
} else {
	if grabbed=0 and frozen = 0{
	yeancat.dodge=1;
	missed=1
	}
}
} 
}
}
}

File: Create_0.gml
Code:
/// @description Insert description here
// You can write your code in this editor
//movetype 0=drift left 1=drift right 2=drift up 3=drift down; diagonals ,4=ld,5=ul,6=ur,7=rd, 8=random, 9=shot at player
movetype=0
//playerdrifthow much its movement is affected by player speed and direction 0 none, 1 fully
playerdrift=0
//drift how much it moves by type
drift=1
//directional = 1 or freelymoving = 0
directional=0
//varydir 0=no vary, 1=15 degrees, 2=30degrees, 3=45 degrees
varydir=0
//follow player 0= no 100= drastically  effecteed by directional
followplayer=0
//passplayer
passplayer=0
//MAGNETPLAYER
magnetplayer=1.5
//
diii=0
xdi=0
yxi=0
//limit time on screen -1=no limit, 1=1 second
tl=-1
//quantity limit -1=no limit, 1 = 1 (on screen at a time)
ql=-1
//destroy on contact
doc=1
//collide with player
cwp=0
//if cwp=1 weight 0=moves out of way of player, 1=moves player away, 10=moves player away 10 times as far
weight=0
//stop on player 0=no 1=yes
sop=0
//attack type 0=no attack, 1=damage on contact, 2=area periodically (quantity affected) 3= fire projectile (quantity affected) 4=lazer (quantity affected) 5=periodically on contact 10=deal health on contact
aty=1
//attack aim -affects aty2,3,4: 0=no 1=direction facing 2=aimed at player 2=random 3=cycling
aaim=0
//if aaim=1,2,3, aiming speed how fast aiming changes direction
aimspeed=0
//if aaim=2 for aty3&4, does projectile or lazer follow player and how much? 0=no homing 100=max homing
homing=0
//spawned attack object aty=2,3,4
attackobj=obj_nothing
//quantity of attacks aty=2,3,4 
quan=1;
//how many times each attack hits before it dissapears
aquan=1;
//attackrate -1=na, for aty=2,3,4,5
atrate=-1
//critical chance 0-1
critchance=0
critmult=1
//freeze 0=no 1=1 second 2=2 second...
freeze=0
//fire 0 = no 1=1x damage every 1 sec for 1 sec, 4=x2 damage every .5 second for 2 sec, 16= x4 damage every 1/4 second for 4 sec
fire=0
firedam=sqrt(fire)
firerate=1/sqrt(fire)*1000000
//1=1x damage for 1 sec, 2=2 sec...
poison=0
//weaken 0=no 1=-50%all stats for , 2=-66%,3=-75%,9=-90% for root(weaken)*2+1 sec
weaken=0
weakmult=1-(weaken/(weaken+1))
//slow0=no 1=-50%speed  , 2=-66%,3=-75%,9=-90% for root(slow)*2+1 sec
slow=0
//weapon equipped?
weapequip=noone
//moneydrain 0=no 1=1dollar/damage dealt, 2dollar/damage dealt maximum what the player earned this run.
moneydrain=0;

//grabbable 0=yes, -1= not grabbable
grabbed=0
bodyangle=0
enemyid=70
sizee=1
frozen=0
resistance=0
crit=0
missed=0
damage=1
spd=1
xp=1
dollar=0
grabbed=0
image_speed=0
frame=0
rateset=4
rate=rateset
anicount=0
scale=0
image_xscale=scale*.75
image_yscale=scale*.75
healthh=8
maxhealth=8
ydi=0
healthlast=healthh
dam=noone
col=c_white
damtime=5
_vspeed=0
_hspeed=0
dead=0
alph=1
s_emit= audio_emitter_create();
audio_max_distance_to_be_heard = 2000;
audio_starts_to_drop_at = 0;

audio_falloff_set_model(audio_falloff_linear_distance);
audio_emitter_position(s_emit,x,y,0);
audio_emitter_falloff(s_emit,audio_starts_to_drop_at,audio_max_distance_to_be_heard, 1);
sndmanid=71
suchit=0
//spawn
//random
//closetodeath
//proximity
//successfulhit
//death
snd=[
[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound]
]
speak=audio_play_sound(nothingsound,0,0);
draw=true
hurtsnd=audio_play_sound(nothingsound,0,0);

hurtsnd2=audio_play_sound(nothingsound,0,0);

oblivious=.5;
strafemax=(random(3)-1.5)
if strafemax>-.1 and strafemax<.1 {
	strafemax*=7.5
}
yrand=(random(3)-1.5)
strafemult=(random(5)+5)/75
strafetime=1
strafeosc=random(2)-1
time=0+360*strafeosc
randomtime=(.075+random(14)/200)
strafe=strafemax*(0.5 * sin(2 * pi * strafetime / 5))*strafemult

varispeed=.8+random(.4)

File: Collision_bullet.gml
Code:
/// @description Insert description here
// You can write your code in this editor
if dead=0 {
if instance_exists(yeancat) {
	if random(100)<master.criticalchance*100 {
healthh-=master.lyricism*(clamp(master.dondasblessing,1,1+999*round(1-(clamp(yeancat.healthh/yeancat.maxhealth,0,1)))))*(1*(1-resistance)*yeancat.def+ceil(1*(1-resistance))*(master.criticalamount))*master.damage*yeancat.oxydamage*yeancat.stemdamage*other.damage;
	if yeancat.healthh<yeancat.maxhealth-1 {
	yeancat.healthh+=master.lyricism*(clamp(master.dondasblessing,1,1+999*round(1-(clamp(yeancat.healthh/yeancat.maxhealth,0,1)))))*clamp(master.faith*(1*(1-resistance)*yeancat.def+ceil(1*(1-resistance))*(master.criticalamount))*master.damage*yeancat.oxydamage*yeancat.stemdamage*other.damage,0,999999999);
	}
	crit=1
	} else {
		healthh-=master.lyricism*(clamp(master.dondasblessing,1,1+999*round(1-(clamp(yeancat.healthh/yeancat.maxhealth,0,1)))))*1*((1-resistance)*yeancat.def+ceil(1*(1-resistance)))*yeancat.oxydamage*yeancat.stemdamage*other.damage
	if yeancat.healthh<yeancat.maxhealth-1 {
	yeancat.healthh+=master.lyricism*(clamp(master.dondasblessing,1,1+999*round(1-(clamp(yeancat.healthh/yeancat.maxhealth,0,1)))))*clamp(master.faith*(1*(1-resistance)*yeancat.def+ceil(1*(1-resistance)))*yeancat.oxydamage*yeancat.stemdamage*other.damage,0,99999999)
	}
	}
}
if resistance<1 {
col=c_red
with (other) {
instance_destroy()
}
} else {
col=c_silver
other.move_bounce_all(0);
}
}


File: cancelledsign.yy
Code:
{
  "$GMObject":"",
  "%Name":"cancelledsign",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":1,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":{"name":"yeancat","path":"objects/yeancat/yeancat.yy",},"eventNum":0,"eventType":4,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":{"name":"bullet","path":"objects/bullet/bullet.yy",},"eventNum":0,"eventType":4,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":40,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":50,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"cancelledsign",
  "overriddenProperties":[],
  "parent":{
    "name":"ENEMIESS",
    "path":"folders/Objects/ENEMIESS.yy",
  },
  "parentObjectId":{
    "name":"enemy",
    "path":"objects/enemy/enemy.yy",
  },
  "persistent":false,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":{
    "name":"spr_cancelledsign",
    "path":"sprites/spr_cancelledsign/spr_cancelledsign.yy",
  },
  "spriteMaskId":null,
  "visible":true,
}

Object: obj_terrain

File: Step_0.gml
Code:
/// STEP of obj_terrain

//yeancat is defined as the player object
//the player is confined within a region half the scale of the room centered in the room's center
//the world moves around the player to give the illusion of player movement.
//playerpos is set by the yeancat object when the player pushes the horizontal boundary of the game view
//when xoffset changes when playerpos is moved a certain amount to cycle the array through the multi sin function for terrain[i]
//this array draws the terrain as grass rectangle textures scaled to fit the distance between each point in the array, defined by 'spacing'
//the player's x position does not reflect the playerpos variable as this variable just defines the shift in the array
//the player's x position is a value between 0 and room_width, confined to an area centered around room_width/2 based on the view scale.
//i need to calculate what the player's height is relative to the function that defines terrain[i], if it were to be calculated for values between values of i.
//this is so that i can calculate the players height at a high resolution instead of the resolution of 'spacing'
if global.pause=1 {
	exit
} else {
		if instance_exists(yeancat) {
	playerpos+=(global.room_speed_set/1000000*delta_time)*master.horz*abs(yeancat._hspeed);
	}
boostfreq=(.5-abs(clamp(playeraltitude,0,40000)/(40000)-.5))*200

if instance_number(obj_vertboost)<2 {
	if random(2000)<boostfreq {
		instance_create_layer(0,0,"player",obj_vertboost)
	}
}

if master.visitedplanets[planet]=0 {
	if playeraltitude<2000 {
	master.visitedplanets[planet]=1
		for (var tas=0; tas<array_length(master.worlditems); tas++) {
			if master.worlditems[tas,1]=planet {
				//check for passive
				if master.worlditems[tas,4]=1 {
					//unlock task
					for (var tp=0; tp<array_length(master.tasks); tp++) {
					if master.worlditems[tas,0]-15=master.tasks[tp,7] {
						if master.tasks[tp,6]=2 {
						master.tasks[tp,5]=1
						}
					}
					}
				}
				//check for weapon
				if master.worlditems[tas,4]=2 {
					//unlock task
					for (var tp=0; tp<array_length(master.tasks); tp++) {
					if master.worlditems[tas,0]-40=master.tasks[tp,7] {
						if master.tasks[tp,6]=1 {
						master.tasks[tp,5]=1
						}
					}
					}
				}
				//check for music
				if master.worlditems[tas,4]=3 {
					//unlock task
					for (var tp=0; tp<array_length(master.tasks); tp++) {
					if master.worlditems[tas,0]-78=master.tasks[tp,7] {
						if master.tasks[tp,6]=5 {
						master.tasks[tp,5]=1
						}
					}
					}
				}
				
				
			}
	}
	//check for characters
	for (var tc=0; tc<array_length(master.tasks); tc++) {
				if master.tasks[tc,6]=0 {
					for (var sb=0; sb<array_length(master.spaceboss); sb++) {
					if master.tasks[tc,7]=master.spaceboss[sb,12] {
					if planet=master.spaceboss[sb,13] {
						master.tasks[tc,5]=1
					}
					}
					}
				}
				}
	}
}
	
	col1=planets[planet,5]
	planetblend=(planet-(obj_terrain.d2plan/15)+13) % 13
	//star background cross fading
	if obj_terrain.systemposition > 350 {
		col2=merge_color(planets[planet,6],planets[(planet-sign(obj_terrain.d2plan)+13) % 13,6],clamp(abs(obj_terrain.d2plan/15),0,1))
	
	} else {
		col2=merge_color(planets[planet,6],planets[(planet-sign(obj_terrain.d2plan)+13) % 13,6],clamp(abs(obj_terrain.d2plan/15),0,1))
	}
//col2=planets[planet,6]
	pfun1=planets[planet,14]
pfun2=planets[planet,15]
pfun3=planets[planet,16]
pfun4=planets[planet,17]
pfun5=planets[planet,18]
afun1=planets[planet,19]
afun2=planets[planet,20]
afun3=planets[planet,21]
afun4=planets[planet,22]
afun5=planets[planet,23]
terrainheight=planets[planet,27]
}

if lowercloud>0 {
	if instance_exists(master) {
		if master.mainmenu=0 {
			
			lowercloud*=.99;
			if lowercloud<1 {
				lowercloud=0
			}
		} else {
playeraltitude=0
player_height_fromground=0
		}
	}
}
var clop=((600-lowercloud)/600)

//get ground offset (to slide the terrain array values in relation to player x)
cloudx+=1
xoffset=sign(playerpos)*floor(abs(playerpos/(spacing)))
hilloffset=sign((playerpos*.75+hillx))*floor(abs((playerpos*.75+hillx)/(1000)))
cloudoffset=sign((playerpos*.6+cloudx))*floor(abs((playerpos*.6+cloudx)/(1000)))
for (var i=0; i<array_length(terrain); i++) {
	terrain[i]=sin(pi/pfun1 * (xoffset+i)/(partcount))*afun1+sin(pi/pfun2 * (xoffset+i)/(partcount))*afun2+sin(pi/pfun3 * (xoffset+i)/(partcount))*afun3+sin(pi/pfun4 * (xoffset+i)/(partcount))*afun4+sin(pi/pfun5 * (xoffset+i)/(partcount))*afun5
}
var index1 = 1
var index2 = 1
var fract = 0

//calculate player height above ground
if master.mainmenu=0 {
if instance_exists(yeancat) {
	if playeraltitude>40000 {
		player_height_fromground=0
		yeancat.flying=1
		if playeraltitude>60000 {
			playeraltitude=60000
		}
	} else {
		if yeancat.flying=1 and master.ti>10 {
			yeancat._vspeed=0
			yeancat.flying=0
			playeraltitude=39999
		}
		
		//if playeraltitude>0 {
			
		//if playeraltitude<40000 {
		//	yeancat._vspeed=0
			
		//}
		//}
	}
//var ii=(yeancat.x/room_width)*partcount
index1 = 1+floor((yeancat.x+spacing*(sign(playerpos)*(abs(playerpos/spacing)-floor(abs(playerpos/spacing))))) / spacing);
index2 = 1+ceil((yeancat.x+spacing*(sign(playerpos)*(abs(playerpos/spacing)-floor(abs(playerpos/spacing))))) / spacing);
fract = frac((yeancat.x+spacing*(sign(playerpos)*(abs(playerpos/spacing)-floor(abs(playerpos/spacing))))) / spacing);
if (index1 >= 0 && index2 < array_length(terrain)) {
    var height1 = terrain[index1] * terrainheight;
    var height2 = terrain[index2] * terrainheight;
	if yeancat.flying=0 {
    player_height_fromground = (y-spacing*.9+lerp(height1, height2, fract) - (yeancat.y))*clop;
	} else {
		//player_height_fromground=0
	}
	player_angle_onground=point_direction(0,height1,spacing,height2)

}

ground_yvalue_belowplayer=player_height_fromground+yeancat.y-yeancat._vspeed*(global.room_speed_set/1000000*delta_time)
if ground_yvalue_belowplayer<=0 {
	yeancat.y=yprevious
	yeancat._vspeed=0
}
if yeancat.flying=0 {
	obj_backg.travelspeed*=.995
	if systemposition>(360-7.5) {
		systemposition=(systemposition*99+360)/100
	} else {
	systemposition=(systemposition*99+planets[planet,0])/100
	}
}
//ground_yvalue_belowplayer=y+terrainheight*(sin(pi/pfun1 * (xoffset+ii)/(partcount))*afun1+sin(pi/pfun2 * (xoffset+ii)/(partcount))*afun3+sin(pi/pfun3 * (xoffset+ii)/(partcount))*afun3)-125*scale
//player_height_fromground=ground_yvalue_belowplayer-yeancat.y
}
}
//planets 0location, 1size, 2gravity, 3background, 4clouds, 5skycolor1, 6skycolor2, 7tileid,8 distance
systemposition+=(global.room_speed_set/1000000*delta_time)*travelspeed/10000
if systemposition > 360 {
	systemposition-=360
}
if systemposition < 0 {
	systemposition+=360
}
for (var ii=0; ii<array_length(planets);ii++) {
	//var pdis = shortestAngularDistance(systemposition,planets[i,0])
	//var pdis2 = 0
	//if pdis>(360-7.5) {
	//	pdis2=pdis-360
	//} else {
	//	pdis2=pdis
	//}
	
	planets[ii,8]=angle_distance(systemposition,planets[ii,0])
	
	obj_backg.planets[ii,8]=planets[ii,8];
	if (planets[ii,8] > -7.5) and (planets[ii,8] < 7.5) {
		planet=ii
		if obj_backg.planet!=planet {
			obj_backg.planet=planet
		}
		d2plan=(planets[ii,8])
		if obj_backg.d2plan!=d2plan {
			obj_backg.d2plan=d2plan 
		}
	}
	
}
if playeraltitude<41000 {
	if abs(d2plan)<1 {
		systemposition+=sign(d2plan)*(7.5-abs(d2plan))/10000
	}
	}
//make ground slide in from the bottom when game starts
if instance_exists(master) {
	//mainmenu=0 means game has started
if master.mainmenu=0 {
	
	backgroundcolor=merge_color(col1,col2,sqr(1-(1/(1+(clamp(player_height_fromground+playeraltitude-7000,0,9999999))/1500))));
xx=room_width/2
//makes ground rise to a certain level when game starts
yy=room_height/2+master.camscale*view_get_hport(master.cam)/2-terrainheight*(afun1+afun2+afun3+afun4+afun5)/2-50
} else {
xx=room_width/2
yy=room_height
}
}

//smooth movement
var spdd=.005
if x!=xx {
	x=x+(xx-x)*spdd
} else {
	x=xx
}
if y!=yy {
	y=y+(yy-y)*spdd
} else {
	y=yy
}
//terrainheight=100
//pfun1=3
//pfun2=4
//afun1=.5
//afun2=1

File: Draw_0.gml
Code:
/// DRAW of obj_terrain
//
if master.devmode=1 {
	if keyboard_check(vk_space) {
		exit
	}
}

draw_set_color(c_white)
draw_set_alpha(1)
draw_set_font(Font4)
var yyy=power(clamp(playeraltitude+player_height_fromground/2,0,999999),.85)+y
var hyyy=power(clamp(playeraltitude+player_height_fromground/2,0,999999),.7)+y+50
var cyyy=obj_backg.slideplanet*2+power(clamp(playeraltitude+player_height_fromground/2,0,999999),.65)+y-(1000-playeraltitude/10)
//for (var i=0; i<6;i++) {
//	var hillxx=2000*sign(-(playerpos*.05+hillx))*(abs((playerpos*.2+hillx)/2000)-floor(abs((playerpos*.2+hillx)/2000)))+x-2000-3000+2000*i
//	var hillyy=hyyy
//	var cloudxx=1000*sign(-(playerpos*.1+cloudx))*(abs((playerpos*.1+cloudx)/1000)-floor(abs((playerpos*.1+cloudx)/1000)))+x-1000-1500+1000*i
//	var cloudyy=cyyy
//	draw_sprite_ext(planets[planet,3],0,hillxx,hillyy,2,2,0,c_white,1);
//	//draw_sprite_ext(planets[planet,4],1,cloudxx,cloudyy+lowercloud,2,2,0,c_white,1);
//}
for (var ii=0; ii<6;ii++) {
	var hillxx=2000*sign(-(playerpos*.2+hillx))*(abs((playerpos*.2+hillx)/2000)-floor(abs((playerpos*.2+hillx)/2000)))+x-2000-3000+2000*ii
	var hillyy=hyyy
	var cloudxx=1000*sign(-(playerpos*.025+cloudx))*(abs((playerpos*.025+cloudx)/1000)-floor(abs((playerpos*.025+cloudx)/1000)))+x-1000-1500+1000*ii
	var cloudyy=cyyy
	//draw_sprite_ext(planets[planet,3],0,hillxx,hillyy,2,2,0,c_white,1);
	draw_sprite_ext(planets[planet,4],1,cloudxx,cloudyy+lowercloud,1,1,0,c_white,1);
}
var rot=0
for (var iii=0; iii<array_length(terrain); iii++) {
	
	if iii<array_length(terrain)-1 and iii>0 {
	rot=point_direction(0,terrain[iii-1]*terrainheight,spacing*2,terrain[iii+1]*terrainheight)
	} else {
		if iii=0 {
			rot=point_direction(0,terrain[iii]*terrainheight,spacing,terrain[iii+1]*terrainheight)
		} else {
			rot=point_direction(0,terrain[iii-1]*terrainheight,spacing,terrain[iii]*terrainheight)
		
		}

	}
	var flip=1
	if instance_exists(yeancat) {
	var _xx=spacing*sign(-playerpos)*(abs(playerpos/spacing)-floor(abs(playerpos/spacing)))-spacing+x-room_width/2+room_width*(iii/partcount)
	var _yy=yyy+terrain[iii]*terrainheight
	} else {
		_xx=0
		_yy=0
	}
	
	
	var yoff = gscale*abs(tan(degtorad(rot)))
	if (rot<90 and rot>0) or (rot>180 and rot<270) {
		draw_sprite_ext(spr_dirtangle,1,_xx,_yy+225*gscale,flip*2.1*gscale,2*yoff,0,c_white,1)
		
	} else {
		if (rot>90 and rot<180) or (rot>270 and rot<360) {
			draw_sprite_ext(spr_dirtangle,0,_xx,_yy+225*gscale,flip*2.1*gscale,2*yoff,0,c_white,1)
	
		}
	}
	var cflip = (iii+xoffset) mod 8 + 1
	var cslide=0
	if cflip=1 {
		flip=1*f1
		cslide=0
	} else if cflip=2 {
		flip=1*f2
		cslide=0
	} else if cflip=3 {
		flip=-1*f3
		cslide=1
	} else if cflip=4 {
		flip=-1*f4
		cslide=-1
	} else if cflip=5 {
		flip=-1*f5
		cslide=1
	} else if cflip=6 {
		flip=-1*f6
		cslide=-1
	} else if cflip=7 {
		flip=1*f7
		cslide=0
	} else if cflip=8 {
		flip=-1*f8
		cslide=0
	}

	for (var tt=0; tt<ceil(terrainheight*(-terrain[clamp(iii,0,array_length(terrain)-1)]+maxfun)/(1000*gscale))+1; tt+=1) {
	if (iii+xoffset) % 2=0 {
	draw_sprite_ext(spr_dirt,(cslide+4+tt*2) mod 4,_xx,_yy+225*gscale+yoff*500+1000*tt*gscale,flip*2.1*gscale,2.1*gscale,0,c_white,1)
	} else {
	draw_sprite_ext(spr_dirt,(1+cslide+4+tt*2) mod 4,_xx,_yy+225*gscale+yoff*500+1000*tt*gscale,flip*2.1*gscale,2.1*gscale,0,c_white,1)
	}
	}
	draw_sprite_ext(spr_grass,planets[planet,13],_xx,_yy,gscale*1.08,gscale*2,rot,c_white,1)
	draw_set_color(c_white)
	draw_set_alpha(1);
	//draw_text(_xx,yy-200,string(1));
//draw_text(spacing*sign(-playerpos)*(abs(playerpos/spacing)-floor(abs(playerpos/spacing)))-spacing+x-room_width/2+room_width*(i/partcount),y+terrain[i]*terrainheight-100,"i: "+string(i));
//draw_text(spacing*sign(-playerpos)*(abs(playerpos/spacing)-floor(abs(playerpos/spacing)))-spacing+x-room_width/2+room_width*(i/partcount),y+terrain[i]*terrainheight,"v: "+string(terrain[i]*terrainheight));
//draw_text(spacing*sign(-playerpos)*(abs(playerpos/spacing)-floor(abs(playerpos/spacing)))-spacing+x-room_width/2+room_width*(i/partcount),y+terrain[i]*terrainheight+100,"h: "+string(sign(-playerpos)*(abs(playerpos/spacing)-floor(abs(playerpos/spacing)))));
}
if instance_exists(yeancat) {
	draw_sprite_ext(spr_darkgradient,0,x,yyy+350,3.85*master.camscale,master.camscale*(2-clamp(yeancat.y+100-room_height/2,0,900)/600),0,c_white,(1-1/(1+clamp(yeancat.y-room_height/4-500,0,2000)/200)))

	//draw_text(yeancat.x,yeancat.y-500,"onground: "+string(yeancat.onground));
	//draw_text(yeancat.x,yeancat.y-400,"jumpheight: "+string(yeancat.jumpheight));
	//draw_text(yeancat.x,yeancat.y-300,"jumping: "+string(yeancat.jumping));
	//draw_text(yeancat.x,yeancat.y-200,"facing: "+string(yeancat.facing));
	//draw_text(yeancat.x,yeancat.y-600,"canjump: "+string(yeancat.canjump));

}



File: Create_0.gml
Code:
///Create Event of obj_terrain
systemposition=0
//-5 to 5 = earth
travelspeed=0
backgroundcolor=make_color_hsv(171, 198, 116)
//planets 0location, 1size, 2gravity, 3background, 4clouds, 5skycolor1, 6skycolor2, 7tileid,8distance,9planetimage,10gradient,11gradscale,12gradalph,13grassindex,14-18period,19-23amplitude,24backgroundscale,25cloud2,26constellation, 27 terrainheight 28 been to?
c_skyblue=make_color_hsv(134, 208, 255)
c_spaceblack=make_color_hsv(171, 198, 116)
col1=c_skyblue
col2=c_spaceblack
planet=0
d2plan=0
planets=[
[0,10,5,spr_hills,spr_clouds,c_skyblue,c_spaceblack,0,0,spr_earth,c_blue,.5,.75,0,.1,1,.66,.15,.07,.3,.36,.66,.25,.1,1,spr_clouds,spr_starfieldbase,100,0],
[15,11,6,spr_campus,spr_gradcloud,c_skyblue,c_black,0,15,spr_graduationstation,c_skyblue,.75,1,0,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100,0],
[40,13,7,spr_fantasiaback,spr_fantasiacloud,c_maroon,c_purple,0,40,spr_fantasia,c_purple,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_fantasiacloud,spr_starfieldbase,100,0],
[60,12,8,spr_landoflucyback,spr_clouds,c_skyblue,c_aqua,0,60,spr_landoflucy,c_aqua,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100,0],
[80,14,10,spr_placeofpabloback,spr_goldcloud,c_aqua,c_black,0,80,spr_placeofpablo,c_yellow,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100,0],
[100,16,12,spr_ghosttownback,spr_ghostcloud,c_purple,c_green,0,100,spr_ghosttown,c_green,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_ghostcloud,spr_starfieldbase,100,0],
[145,15,15,spr_vulturevalleyback,spr_goldcloud,c_gray,c_black,0,145,spr_vulturevalley,c_orange,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100,0],
[180,20,30,spr_theendondaback,spr_endondacloud,c_purple,c_white,0,180,spr_theendonda,c_red,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_endondacloud,spr_starfieldbase,100,0],
[245,17,20,spr_stormysandsback,spr_stormysandcloud,c_orange,c_black,0,115,spr_stormysands,c_black,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_stormysandcloud,spr_starfieldbase,100,0],
[270,14,15,spr_divinedomainback,spr_goldcloud,c_aqua,c_black,0,90,spr_divinedomain,c_white,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100,0],
[290,13,12,spr_yetopiaback,spr_goldcloud,c_black,c_dkgrey,0,70,spr_yetopia,c_red,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100,0],
[310,12,10,spr_kingdomback,spr_goldcloud,c_teal,c_skyblue,0,50,spr_kingdom,c_skyblue,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100,0],
[330,8,3,spr_icyback,spr_throwaway,c_black,c_skyblue,0,30,spr_icyheart,c_teal,.75,1,3,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_icycloud,spr_starfieldbase,100,0],
[345,11,9,spr_goldbg,spr_goldcloud,c_yellow,c_black,0,15,spr_goldmines,c_orange,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100,0]
]

//0 Name, 1: owned by clan? (-1 for no, otherwise Clan ID), 2:Clan Name "" means none, 3:Rename? ("" means no)
planet_names=[
["Earth",-1,"",""],
["Universe City",-1,"",""],
["Fantasia",-1,"",""],
["Land of Lucy",-1,"",""],
["Place of Pablo",-1,"",""],
["Ghost Town",-1,"",""],
["Vultures' Valley",-1,"",""],
["The Endonda",-1,"",""],
["Stormy Sands",-1,"",""],
["Divine Domain",-1,"",""],
["Yetopia",-1,"",""],
["King's Kingdom",-1,"",""],
["The Icy Heart",-1,"",""],
["The Gold Mines",-1,"",""]
]

planetblend=0

//create
f1=1
f2=1
f3=1
f4=1
f5=1
f6=1
f7=1
f8=1
lowercloud=600
hilloffset=0
cloudoffset=0
hillx=0
cloudx=0


playerpos=0
xoffset=0
spacing=100
partcount=round(room_width/spacing)
playeraltitude=0
player_height_fromground=100
terrain = array_create(partcount+3,0)
gscale=.1*spacing/100

pfun1=.1
pfun2=1
pfun3=.66
pfun4=.15
pfun5=.07
afun1=1
afun2=.75
afun3=.66
afun4=.25
afun5=.1


maxfun=(afun1+afun2+afun3+afun4+afun5)
player_angle_onground=0

terrainheight=100
terrainheight=100
ground_yvalue_belowplayer=room_height
xx=0
yy=0

boostfreq=0
boostfreq=(.5-abs(clamp(playeraltitude,0,40000)/(40000)-.5))*200

File: obj_terrain.yy
Code:
{
  "$GMObject":"",
  "%Name":"obj_terrain",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"obj_terrain",
  "overriddenProperties":[],
  "parent":{
    "name":"Objects",
    "path":"folders/Objects.yy",
  },
  "parentObjectId":null,
  "persistent":false,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":null,
  "spriteMaskId":null,
  "visible":true,
}

Object: obj_boss

File: Step_0.gml
Code:
/// @description Insert description here
// You can write your code in this 
if instance_exists(restar) {
direction=point_direction(room_width/2,room_height/2,x,y)
speed+=.1
if x<0 or x>room_width or y<0 or y> room_width {
	instance_destroy()
}
exit
}
if global.pause=1 {
	exit
}
if fadeinmusic<100 {
	fadeinmusic+=.3
} else {
	fadeinmusic=100
}

	if !audio_is_playing(music) {
	if master.loop=0 {
		music=audio_play_sound_on(music_emitter,master.character_music[bossid,0],0,0)
		audio_sound_set_track_position(music,master.trackposition)
	} else {
		music=audio_play_sound_on(music_emitter,master.character_music[bossid,1],1,0)
		audio_sound_set_track_position(music,master.trackposition)
	}
}

var tn = (1+(1-abs(obj_terrain.systemposition-180)/180))
var ttn = sqr(tn)
var tttn = tn/2+.5
moveset=[4,1,8,3,7,2,10,3,8,3]
timebetweenset=[4*tn,2*tttn,3*tttn,6*ttn,2*tttn,1*tttn,4*ttn,3*tn,3*tttn,6*ttn]
enemyset=[-1,-1,-1,-1,1,-1,-1,-1,0,-1]
enemycountset=[0,0,0,0,2*tttn,0,0,0,3*tttn,0]
laserset=[-1,-1,-1,bossid,-1,-1,-1,-1,-1,bossid]
areaset=[-1,-1,-1,-1,-1,-1,bossid,-1,-1,-1]
damageset=[2*tn,1*tn,1*tn,2*tn,3*tn,1*tn,4*tn,2*tn,1*tn,3*tn]
attackspeedset=[4*ttn,2,2*tn,.5,2*tttn,1*tttn,.5,6*tttn,2*tttn,.5]
projectileset=[bossid*3,-1,bossid*3+1,-1,-1,-1,-1,bossid*3+2,-1,-1]
attackset=[2,1,2,5,3,0,6,2,3,5]
laserobj=laserset[setlection]

var xxx = x
var yyy =y

if dead=0 {
	intensity=1+(1-abs(obj_terrain.systemposition-180)/180)*2
	if instance_exists(yeancat) {
	if timercount>0 {

	timercount-=delta_time*global.room_speed_set/60
} else {
	setlection+=1
	if setlection > 9 {
		setlection=0
	}
	timerset=1000000*timebetweenset[setlection]
	attacktype=attackset[setlection]
	attackspeed=attackspeedset[setlection]
	movetype=moveset[setlection]
	projectile=projectileset[setlection]
	damage=damageset[setlection]
	enemyobj=enemyset[setlection]
laserobj=laserset[setlection]
areaobj=areaset[setlection]
	enemycount=enemycountset[setlection]
	timercount=timerset
	attacktimer=1000000
}
if attacktimer>0 {
	attacktimer-=(delta_time*global.room_speed_set/60)*attackspeed
} else {
	if movetype=2 {
				xxx=room_width/2+(random(room_width/2)-room_width/4)*master.camscale
			yyy=room_height/2+(random(room_height/2)-room_height/4)*master.camscale
			if point_distance(xxx,yyy,yeancat.x,yeancat.y)<200 {
				xxx=yeancat.x+lengthdir_x(200,point_direction(yeancat.x,yeancat.y,xxx,yyy))
				yyy=yeancat.y+lengthdir_y(200,point_direction(yeancat.x,yeancat.y,xxx,yyy))
			}
		x=xxx
		y=yyy
}
	attacktimer=1000000
	//damage while touching
	if attacktype=1  {
		if place_meeting(x,y,yeancat) {
			if missed=0 {
	if grabbed=0 and frozen = 0 {
if random(1000)>(master.champion*1000) {
var ddd = (clamp(master.dondasblessing,1,1+999*round(1-(clamp(yeancat.healthh/yeancat.maxhealth,0,1)))))*damage*(1*(1-master.resistance))*(1-yeancat.oxyresistance)*(1-yeancat.stemresistance)
yeancat.healthh-=ddd

if master.heartbreak>0 {
	var split=0
	if instance_exists(yeancat) {
	for (var _i=0; _i<instance_number(enemy);_i++) {
				 var _inst = instance_find(enemy, _i);
				 if point_distance(_inst.x,_inst.y,yeancat.x,yeancat.y)<(100*master.range*(1+(.05*master.passives[10,3])*master.einstein+master.lheartbreak)) {
				split+=1
				}
			}
	if split>0 {
	with (enemy) {
		
		if point_distance(x,y,yeancat.x,yeancat.y)<(100*master.range*(1+(.05*master.passives[10,3])*master.einstein+master.lheartbreak)) {
	
		healthh-=ddd*master.heartbreak*yeancat.oxydamage*yeancat.stemdamage/split*(1*(1-resistance))
		if master.faith > 0 {
			yeancat.healthh+=(master.faith*ddd*master.heartbreak*yeancat.oxydamage*yeancat.stemdamage/split)*(1*(1-resistance))
		}
		}
	}
	
	yeancat.breakheart=1
	}
	}
}
yeancat.redcount[0]=1
var hur1 = master.charsounds[master.charselect,0]
var hur2 = master.charsounds[master.charselect,1]
var hur3 = master.charsounds[master.charselect,2]

with (other) {
var hit = round(random(2))
var hurt = round(random(2))
if hit = 0 {
	hurtsnd2=audio_play_sound_on(s_emit,hurt1,0,0);
}
if hit = 1 {
	hurtsnd2=audio_play_sound_on(s_emit,hurt2,0,0);
}
if hit = 2 {
	hurtsnd2=audio_play_sound_on(s_emit,hurt3,0,0);
}
if hurt = 0{
	hurtsnd=audio_play_sound_on(s_emit,hur1,0,0);
}
if hurt = 1 {
	hurtsnd=audio_play_sound_on(s_emit,hur2,0,0);
}
if hurt = 2 {
	hurtsnd=audio_play_sound_on(s_emit,hur3,0,0);
}

audio_sound_gain(hurtsnd,1*master.dialougevol*master.mastervol,0);
audio_sound_gain(hurtsnd2,1*master.sfxvol*master.mastervol,0);
}
} else {
	if grabbed=0 and frozen = 0{
	yeancat.dodge=1;
	missed=1
	}
}
} 
}
		}
	}
	
	//fire projectile
	if attacktype=2  {
		var projectilee = instance_create_layer(x,y,"projectiles",obj_bossprojectile1)
		projectilee.pid=projectile
		projectilee.damage=damage
	}
	//spawn enemy
	dirmov=0
	if attacktype=3  {
		if enemyobj != -1 {
			repeat (enemycount) {
		var enem = instance_create_layer(x,y,"enemylayer",master.mobarray[enemyobj,0])
		
		if random_range(0,master.mobarray[enemyobj,7])<=1 {
					dirmov=0
					
					if master.mobarray[enemyobj,10]=8 {
						if master.mobarray[enemyobj,12]=0 {
						dirmov=round(random_range(0,7))
						} else {
							if master.mobarray[enemyobj,12]=1 {
								dirmov=round(random_range(0,1))
							}
							if master.mobarray[enemyobj,12]=2 {
								dirmov=round(random_range(2,3))
							}
						}
					} else {
						dirmov=master.mobarray[enemyobj,10]
					}
		}
			enem.movetype=dirmov
				enem.spd=master.mobarray[enemyobj,5]*master.curse*(master.level+500)/500
				enem.damage=master.mobarray[enemyobj,4]*master.curse*(master.lookingfortrouble+1)
				enem.resistance=(1-(1-master.mobarray[enemyobj,3])/master.curse)/(1+(master.level-1)/500)/(master.lookingfortrouble+1)+(1*master.lookingfortrouble)/2
				enem.sizee=master.mobarray[enemyobj,2]*(master.lookingfortrouble+10)/10
				enem.xp=master.mobarray[enemyobj,6]
				enem.dollar=(master.mobarray[enemyobj,8]*(master.level+500)/500)*(master.lookingfortrouble+2)/2
				enem.healthh=(master.mobarray[enemyobj,9]*master.curse*(master.level+200)/200)*(master.lookingfortrouble+1)
			}
		}
	}
	//area blast
	if attacktype=4  {
		var blast = instance_create_layer(x,y,"blastfx",obj_bossarea1)
		blast.areaid=areaobj
		blast.damage=damage
		blast.warning=0
	}
	//lazer with warning
	if attacktype=5  {
		var lasr = instance_create_layer(x,y,"blastfx",obj_bosslaser1)
		lasr.laserid=laserobj
		lasr.damage=damage
		lasr.warning=1
		lasr.attackspeed=attackspeed
		lasr.owner=self
	}
	//area with warning
	if attacktype=6  {
		var blast = instance_create_layer(x,y,"blastfx",obj_bossarea1)
		blast.areaid=areaobj
		blast.damage=damage
		blast.attackspeed=attackspeed
		blast.warning=1
		blast.owner=self
	}
	
}
}
	
	if instance_exists(yeancat) {
		if yeancat.x>x {
			facing=1
		} else {
			facing=-1
		}
	}
anicount+=1

if anicount>=5 {
	anicount = 0
}
if col = c_red {
	damtime-=1
	if damtime<0 {
		col=c_white
		damtime=5
	}
}
if col = c_silver {
	damtime-=1
	if damtime<0 {
		col=c_white
		damtime=5
	}
}
if missed>0 {
	col=make_color_hsv(color_get_hue(c_gray)*missed+color_get_hue(c_white)*(1-missed),color_get_saturation(c_gray)*missed+color_get_saturation(c_white)*(1-missed),color_get_value(c_gray)*missed+color_get_value(c_white)*(1-missed));
	missed-=.01
	if missed=0 {
		col=c_ltgray
	}
	if grabbed=0 {
	x-=missed*master.speedd/2*(global.room_speed_set/1000000*delta_time)
	}
} else {
	if col=c_ltgray {
		col=c_white
		missed=0
	}
}

//0=stand still
//1=turn and charge at player every 'attackspeed' seconds
//2=teleport to a random quadrant
//3=orbit player
//4=mirror player
//5=jump towards player
//6=burrow underground
//7=move to random position
//8=back away from player
//9=vanish
//10=slowly move toward player
//11=spin in place
//12=gravitate player
//13=chaos
//

if instance_exists(yeancat) {
	//stand still
	if movetype=0 {
		_hspeed=0
		_vspeed=0
		speed=0
		movespeed=0
	}
	//1=turn and charge at player every 'attackspeed' seconds
	if movetype=1 {
		if attacktimer=1000000 {
			xx=yeancat.x+lengthdir_x(point_distance(x,y,yeancat.x,yeancat.y),point_direction(x,y,yeancat.x,yeancat.y))*2/3
			yy=yeancat.y+lengthdir_y(point_distance(x,y,yeancat.x,yeancat.y),point_direction(x,y,yeancat.x,yeancat.y))*2/3
			movespeed=15*intensity
		}
	}
	//teleport
	if movetype=2 {
		movespeed=20*intensity
		if attacktimer=1000000 {
			//when attack
			xxx=room_width/2+(random(room_width/2)-room_width/4)*master.camscale
			yyy=room_height/2+(random(room_height/2)-room_height/4)*master.camscale
			if point_distance(xxx,yyy,yeancat.x,yeancat.y)<200 {
				xxx=yeancat.x+lengthdir_x(200,point_direction(yeancat.x,yeancat.y,xxx,yyy))
				yyy=yeancat.y+lengthdir_y(200,point_direction(yeancat.x,yeancat.y,xxx,yyy))
			}
			}
		if attacktimer<=500000 {
			if attacktimer>100000 {
			xx=xxx
			yy=yyy
				
			} else {
				//time right before teleporting in
			x=0
			y=0
		//make it spawn a flash
		
			}
		}
	}
	//3=orbit player
	if movetype=3 {
		movespeed=15*intensity
		orbitspeed=2*intensity
		if attacktimer=1000000 {
			orbitdir=point_direction(yeancat.x,yeancat.y,x,y)
			orbitlength=orbitr
		}
		if orbitgrow=1 {
			if orbitlength<orbitr+orbitosc {
				orbitlength+=1
			} else {
				orbitgrow=-1
			}
		} else {
			if orbitlength>orbitr-orbitosc {
				orbitlength-=1
			} else {
				orbitgrow=1
			}
		}
		orbitdir+=orbitspeed*(global.room_speed_set/1000000*delta_time)
		xx=yeancat.x+lengthdir_x(orbitlength,orbitdir)
		yy=yeancat.y+lengthdir_y(orbitlength,orbitdir)
		
	}
	//mirror player
	if movetype=4 {
		
		movespeed=10*intensity
		xx=room_width-yeancat.x
		yy=room_height-yeancat.y
	}
	//jump toward player
	if movetype=5 {
		if flying=1 {
			movespeed=10*intensity
			xx=yeancat.x 
			yy=yeancat.y
		} else {
			jumptrigger=1
			_hspeed=(yeancat.x-x)/5
			
		}
	}
	//6=burrow underground
	if movetype=6 {
	}
	//7=move to random position
if movetype=7 {
	movespeed=15*intensity
	xx=room_width/2+(random(room_width/2)-room_width/4)*master.camscale
	yy=room_height/2+(random(room_height/2)-room_height/4)*master.camscale
	}
//8=back away from player
if movetype=8 {
	movespeed=5*intensity
			xx=yeancat.x+lengthdir_x(clamp(point_distance(yeancat.x,yeancat.y,x,y)*1.5+100,0,800),point_direction(yeancat.x,yeancat.y,x,y))
			yy=yeancat.y+lengthdir_y(clamp(point_distance(yeancat.x,yeancat.y,x,y)*1.5+100,0,800),point_direction(yeancat.x,yeancat.y,x,y))
	}
//9=vanish
if movetype=9 {
	x=0
	y=0
	xx=0
	yy=0
	}
//10=slowly move toward player
if movetype=10 {
			movespeed=3*intensity
			xx=yeancat.x 
			yy=yeancat.y
	}
//11=spin in place
if movetype=11 {
	}
//12=gravitate player
if movetype=12 {
	}
//13=chaos
if movetype=13 {
	var phaseDuration = 200000; // Duration of each phase (1 or 0)
    var phase = floor((1000000 - attacktimer) / phaseDuration) % 10;
    var o = phase % 2
	if o=1 {
		movespeed=100
		xx=room_width/2+(random(room_width/2)-room_width/4)*master.camscale
		yy=room_height/2+(random(room_height/2)-room_height/4)*master.camscale
			if attacktimer>500000 {
			if point_distance(xxx,yyy,yeancat.x,yeancat.y)<200 {
				xx=yeancat.x+lengthdir_x(200,point_direction(yeancat.x,yeancat.y,xxx,yyy))
				yy=yeancat.y+lengthdir_y(200,point_direction(yeancat.x,yeancat.y,xxx,yyy))
			}
			}
		
	} else {
		movespeed=30
	}
	}
	
	
}
if x!=xx {
	x+=(xx-x)*movespeed/1000
}
if y!=yy {
	y+=(yy-y)*movespeed/1000
}
if obj_terrain.systemposition<180 {
if obj_terrain.systemposition>position {
	obj_terrain.systemposition=position
}
} else {
	if obj_terrain.systemposition<position {
	obj_terrain.systemposition=position
}
}

if dam != noone {
	dam.targ=self
	dam.x=(dam.x*1+x*2)/3
	dam.y=(dam.y*1+y*2)/3
}

if healthh>maxhealth {
	healthh=maxhealth
}


if healthh!=healthlast  and master.damagenumbers = 1 {
	if dam=noone {
	dam= instance_create_layer(x,y,"damage",obj_damage)
	dam.targ=self
	if crit=1 {
		dam.crit=1
		crit=0
	}
	dam.damage=healthlast-healthh
	} else {
		if sign(dam.damage) != sign(healthlast-healthh) {
			dam.targ=noone
			dam=noone
			dam= instance_create_layer(x,y,"damage",obj_damage)
			dam.targ=self
			if crit=1 {
		dam.crit=1
		crit=0
	}
			dam.damage=healthlast-healthh
		} else {
		dam.damage+=healthlast-healthh
			if crit=1 {
		dam.crit=1
		crit=0
	}
		}
	}
}

healthlast=healthh
if audio_is_playing(hurtsnd) {
audio_sound_pitch(hurtsnd,1*(1-master.lower/1000)*global.room_speed_set/60)
}
if healthh<=0 {
		if instance_exists(yeancat) {
		if master.soundmanager[sndmanid,5]<1 {
			if !audio_is_playing(speak) {
				if dead=0 {
		yeancat.responding=(sndmanid-1)*6+5
		speak = audio_play_sound_on(s_emit,snd[5,master.charselect],0,0)
		master.soundmanager[sndmanid,5]=round(5+random(5))
				}
			}
	}
	}
	dead=1

}

if instance_exists(obj_terrain) and instance_exists(yeancat) {
	var terrain=obj_terrain.terrain
	var spacing=obj_terrain.spacing
	var terrainheight=obj_terrain.terrainheight
	bosspos=obj_terrain.playerpos+(x-yeancat.x)/2000
	if flying=0 {
	//if onground=1 {
var clop=((600-obj_terrain.lowercloud)/600)
var index1 = 1+floor((x+spacing*(sign(bosspos)*(abs(bosspos/spacing)-floor(abs(bosspos/spacing))))) / spacing);
var index2 = 1+ceil((x+spacing*(sign(bosspos)*(abs(bosspos/spacing)-floor(abs(bosspos/spacing))))) / spacing);
var fract = frac((x+spacing*(sign(bosspos)*(abs(bosspos/spacing)-floor(abs(bosspos/spacing))))) / spacing);
if (index1 >= 0 && index2 < array_length(terrain)) {
    var height1 = terrain[index1] * terrainheight;
    var height2 = terrain[index2] * terrainheight;
	if flying=0 {
    boss_height_fromground = (y-spacing*.9+lerp(height1, height2, fract) - (y))*clop;
	} else {
		//boss_height_fromground=0
	}
	boss_angle_onground=point_direction(0,height1,spacing,height2)

}

ground_yvalue_belowboss=boss_height_fromground+y-_vspeed*(global.room_speed_set/1000000*delta_time)
if ground_yvalue_belowboss<=0 {
	y=yprevious
	_vspeed=0
}


	var tarang=boss_angle_onground
	var tarang2=point_direction(0,0,_hspeed*10,_vspeed*10)+90*abs(facing-1)
if rotatebody!=(tarang * (1/(1+(boss_height_fromground+bossaltitude)/200))+ tarang2 * (1-1/(1+(boss_height_fromground+bossaltitude)/200))) {
var _diff = angle_difference(tarang, rotatebody);
var _diff2 = angle_difference(tarang2, rotatebody);

rotatebody += (_diff * 0.5 * (1/(1+(boss_height_fromground+bossaltitude)/200))+_diff2 * 0.1 * (1-1/(1+(boss_height_fromground+bossaltitude)/200)))*(1/(1+(boss_height_fromground+bossaltitude)/20000))
} else {
	rotatebody=(tarang * (1/(1+(boss_height_fromground+bossaltitude)/200))+ tarang2 * (1-1/(1+(boss_height_fromground+bossaltitude)/200)))
}
	//}

} else {
	bossaltitude=40000
	if facing=1 {
		rotatebody=(rotatebody*59)/60
	} else {
		rotatebody=(rotatebody*59)/60
	}
	if rising=0 and bossaltitude>0 {
	y+=(global.room_speed_set/1000000*delta_time)*_vspeed
	}
}
	
	if ((boss_height_fromground)-tallness+bossaltitude - _vspeed)<=0 {
		if master.mainmenu=0 and flying=0 {
		onground=1
		canjump=1
		jumpcount=jumptotal
		_vspeed=0;
		bossaltitude=0
		y=ground_yvalue_belowboss-tallness
		}
	} else {
		if boss_height_fromground-tallness+bossaltitude-_vspeed>3 {
			//jumping=1
		onground=0
		} else {
	jumping=0
		}
		if rising=0 {
		y+=(global.room_speed_set/1000000*delta_time)*_vspeed
			if bossaltitude>0 {
			bossaltitude-=(global.room_speed_set/1000000*delta_time)*_vspeed
			} else {
				bossaltitude=0
			}
		} else {
			//	if bossaltitude>=0 {
			//bossaltitude-=(global.room_speed_set/1000000*delta_time)*_vspeed
			//} else {
			//	bossaltitude=0
			//}

		}
	}
if jumptrigger=1 {
	if rising=-1 {	
if canjump=1 {
		_vspeed+=clamp(-((abs(clamp(power(abs(_hspeed),.5),-100,100))+15)*jumpheight),-75-(bossaltitude/4000),0)
		if _vspeed>0 {
			_vspeed=clamp(-((abs(clamp(power(abs(_hspeed),.5),-100,100))+15)*jumpheight),-75-(bossaltitude/4000),0)/(1+abs(_vspeed/25))
		}
		y+=(global.room_speed_set/1000000*delta_time)*_vspeed/2
		rising=0
		jumptrigger=0
	}
	}
	if flying=0 {

if canjump=1 {
	_vspeed+=clamp(-((abs(clamp(power(abs(_hspeed),.5),-100,100))+15)*jumpheight),-75-(bossaltitude/4000),0)
		if _vspeed>0 {
			_vspeed=clamp(-((abs(clamp(power(abs(_hspeed),.5),-100,100))+15)*jumpheight),-75-(bossaltitude/4000),0)/(1+abs(_vspeed/25))
		}
	if !rising=1 and bossaltitude<0 {
	y+=(global.room_speed_set/1000000*delta_time)*_vspeed/2
	} else {
			if bossaltitude>0 {
			
				rising=0
			bossaltitude-=(global.room_speed_set/1000000*delta_time)*_vspeed
			} else {
				bossaltitude=0
			}
		}
	jumping=1
	jumpcount-=1
	if jumpcount<=0 {
		canjump=0
		jumpcount=0
	}
	}
}
}
if movingg=0 {
	//moving in game
	if positionplace!=0 {
x+=(global.room_speed_set/1000000*delta_time)*_hspeed
	} else {
		//if positionplace=0 {
			if master.mainmenu=1 {
		x+=(global.room_speed_set/1000000*delta_time)*_hspeed/2
			} else {
				x+=(global.room_speed_set/1000000*delta_time)*_hspeed
			}
		//}
	}
} else {
	bosspos+=(global.room_speed_set/1000000*delta_time)*master.horz*abs(_hspeed);
}

}



//DEAD
} else {
	
	//unlock
	if master.characters[lookid,0]=0 {
		master.characters[lookid,0]=1
		//spawn notification
					var noti= instance_create_layer(room_width/2,10,"uii",obj_notification)
						//type is task
						noti.typee=0
						noti.desc2=master.characters[lookid,1]
						//noti.reward=tasks[i,6]
						noti.namee="Boss Defeated!"
						noti.namee2=master.characters[lookid,1]
						noti.desc=master.characters[lookid,1]+" Unlocked"
						noti.image=master.characters[lookid,10]
						noti.durationset=10
						noti.duration=10*(1000000)
						noti.imageind=lookid
						noti.clickable=1
						noti.relativeid=lookid
				for (var tc=0; tc<array_length(master.tasks); tc++) {
				if master.tasks[tc,6]=0 {
					if master.tasks[tc,7]=lookid {
						master.tasks[tc,5]=1
						master.tasks[tc,3]=1
						master.tasks[tc,2]=1
					}
					
				}
				}
						
						
	}
	if alphafade<1 {
		alphafade=(alphafade*49+1.01)/50
	} else {
		alphafade=1
	}
	direction=point_direction(room_width/2,room_height/2,x,y)
	speed+=.04
	bodyangle+=clamp(2-speed,0,2)
	c_cat=merge_color(c_white,c_black,alphafade)
	scale*=1.01
	if alphafade>=1 {
		
		if !audio_is_playing(speak) {
			master.spaceboss[bossid,8]=0
			instance_destroy()
		}
	}
}
var _bpm= global.target_bpm*(1-alphafade)*(1-master.lower/1000)*global.room_speed_set/60
if audio_emitter_exists(music_emitter) {
audio_emitter_position(music_emitter,x,y,0);
audio_sound_gain(music,(1-alphafade)*(fadeinmusic/100)*master.musicvol*master.mastervol*.7,0)
//audio_sound_pitch(music,(1-alphafade)*(1+(master.speedd-10)/300)*(1-master.lower/1000)*global.room_speed_set/60)
audio_sound_pitch(music, _bpm * master.bossp);  // Adjust boss music pitch
}
//if healthh<=0 {
//	master.spaceboss[bossid,8]=0;
//	dead=1
//	instance_destroy();
//}
if instance_exists(restar) {
x+=sign(x-(room_width/2))*2
y+=sign(y-(room_height/2))*2
}

File: Destroy_0.gml
Code:
/// @description Insert description here
// You can write your code in this editor




audio_emitter_free(music_emitter);

File: obj_boss.yy
Code:
{
  "$GMObject":"",
  "%Name":"obj_boss",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":{"name":"bullet","path":"objects/bullet/bullet.yy",},"eventNum":0,"eventType":4,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":{"name":"yeancat","path":"objects/yeancat/yeancat.yy",},"eventNum":0,"eventType":4,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":1,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"obj_boss",
  "overriddenProperties":[],
  "parent":{
    "name":"boss",
    "path":"folders/Objects/boss.yy",
  },
  "parentObjectId":null,
  "persistent":false,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":{
    "name":"spr_boss1",
    "path":"sprites/spr_boss1/spr_boss1.yy",
  },
  "spriteMaskId":null,
  "visible":true,
}

File: Draw_0.gml
Code:
/// @description Insert description here
// You can write your code in this editor
//draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,bodyangle,col,1)
draw_sprite_ext(spr_shadow,0,x-6*facing,y,.58*facing,.72,rotatebody,c_white,.85);
draw_set_alpha(1)
for (i=0 ; i<round(((abs(facing-1)*room_width/2)+(facing*x))/110); i+=1) {
	if redcount[clamp(i,0,999999999)]=1 {
		if (oxy)>0 {
		draw_sprite_ext(master.characters[lookid,12],round(anicount)+1,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_maroon,(0.7 * sin(2 * pi * (time) / (40/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
	draw_sprite_ext(master.characters[lookid,12],round(anicount)+2,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_black,(0.7 * sin(2 * pi * (time) / (39/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
	draw_sprite_ext(master.characters[lookid,12],round(anicount)+3,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.7 * sin(2 * pi * (time) / (38/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
	draw_sprite_ext(master.characters[lookid,12],round(anicount)+4,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_dkgrey,(0.7 * sin(2 * pi * (time) / (37/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
		}
		draw_sprite_ext(master.characters[lookid,12],round(anicount),x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y,6*scale*facing,6*scale,rotatebody,c_red,(1-(i/42)-clamp(master.revani/clamp(i,1,99),0,99))*trailalph*(1-alphafade))
		if (oxy)>0 {
		draw_sprite_ext(master.characters[lookid,12],round(anicount)+4,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_maroon,(0.4 * sin(2 * pi * (time) / (37/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
	draw_sprite_ext(master.characters[lookid,12],round(anicount)+3,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_black,(0.4 * sin(2 * pi * (time) / (38/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
	draw_sprite_ext(master.characters[lookid,12],round(anicount)+2,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.4 * sin(2 * pi * (time) / (39/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
	draw_sprite_ext(master.characters[lookid,12],round(anicount)+1,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_dkgrey,(0.4 * sin(2 * pi * (time) / (40/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
		}
		
	
	} else {
		if (oxy)>0 {
		draw_sprite_ext(master.characters[lookid,12],round(anicount)+1,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.7 * sin(2 * pi * (time) / (40/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
	draw_sprite_ext(master.characters[lookid,12],round(anicount)+2,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_green,(0.7 * sin(2 * pi * (time) / (39/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
	draw_sprite_ext(master.characters[lookid,12],round(anicount)+3,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_yellow,(0.7 * sin(2 * pi * (time) / (38/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
	draw_sprite_ext(master.characters[lookid,12],round(anicount)+4,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_blue,(0.7 * sin(2 * pi * (time) / (37/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
		}
	draw_sprite_ext(master.characters[lookid,12],round(anicount),x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y,6*scale*facing,6*scale,rotatebody,c_cat,(1-(i/42)-clamp(master.revani/clamp(i,1,99),0,99))*trailalph*(1-alphafade))
	if (oxy)>0 {
		draw_sprite_ext(master.characters[lookid,12],round(anicount)+4,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.4 * sin(2 * pi * (time) / (37/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
	draw_sprite_ext(master.characters[lookid,12],round(anicount)+3,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_green,(0.4 * sin(2 * pi * (time) / (38/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
	draw_sprite_ext(master.characters[lookid,12],round(anicount)+2,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_yellow,(0.4 * sin(2 * pi * (time) / (39/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
	draw_sprite_ext(master.characters[lookid,12],round(anicount)+1,x+(lengthdir_x(18*(i)*6*scale,rotatebody+180))*facing,-facing*lengthdir_y(18*(i)*6*scale,rotatebody+180)+y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7*((i+27)/25),6*scale*facing,5.9*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_blue,(0.4 * sin(2 * pi * (time) / (40/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,(1-alphafade)))*trailalph);
		}
	}
}
if redcount[0]=1{
	if (oxy)>0 {
	draw_sprite_ext(master.characters[lookid,11],round(anicount)+4,x+(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (57 /(oxy*2+1))) + 0.9)*((9+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_maroon,(0.7 * sin(2 * pi * (time) / (40/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
draw_sprite_ext(master.characters[lookid,11],round(anicount)+3,x+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (58/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_black,(0.7 * sin(2 * pi * (time) / (39/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
draw_sprite_ext(master.characters[lookid,11],round(anicount)+2,x-(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (59/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.7 * sin(2 * pi * (time) / (38/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
draw_sprite_ext(master.characters[lookid,11],round(anicount)+1,x-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (60/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_ltgray,(0.7 * sin(2 * pi * (time) / (37/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
	}
	draw_sprite_ext(master.characters[lookid,11],round(anicount),x,y,6*scale*facing,6*scale,rotatebody,c_red,1-alphafade)
	if (oxy)>0 {
	draw_sprite_ext(master.characters[lookid,11],round(anicount)+4,x+(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (60 /(oxy+1))) + 0.9)*((9+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_maroon,(0.4 * sin(2 * pi * (time) / (37/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
draw_sprite_ext(master.characters[lookid,11],round(anicount)+3,x+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_black,(0.4 * sin(2 * pi * (time) / (38/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
draw_sprite_ext(master.characters[lookid,11],round(anicount)+2,x-(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.4 * sin(2 * pi * (time) / (39/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
draw_sprite_ext(master.characters[lookid,11],round(anicount)+1,x-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_ltgray,(0.4 * sin(2 * pi * (time) / (40/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
	}
} else {
	if (oxy)>0 {
	draw_sprite_ext(master.characters[lookid,11],round(anicount)+1,x+(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (57 /(oxy*2+1))) + 0.9)*((9+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.7 * sin(2 * pi * (time) / (40/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
draw_sprite_ext(master.characters[lookid,11],round(anicount)+2,x+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (58/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_green,(0.7 * sin(2 * pi * (time) / (39/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
draw_sprite_ext(master.characters[lookid,11],round(anicount)+3,x-(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (59/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_yellow,(0.7 * sin(2 * pi * (time) / (38/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
draw_sprite_ext(master.characters[lookid,11],round(anicount)+4,x-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (60/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_blue,(0.7 * sin(2 * pi * (time) / (37/(oxy*2+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
	}
	draw_sprite_ext(master.characters[lookid,11],round(anicount),x,y,6*scale*facing,6*scale,rotatebody,c_cat,1-alphafade)
	if (oxy)>0 {
	draw_sprite_ext(master.characters[lookid,11],round(anicount)+4,x+(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (60 /(oxy+1))) + 0.9)*((9+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.4 * sin(2 * pi * (time) / (37/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
draw_sprite_ext(master.characters[lookid,11],round(anicount)+3,x+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_green,(0.4 * sin(2 * pi * (time) / (38/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
draw_sprite_ext(master.characters[lookid,11],round(anicount)+2,x-(0.5 * sin(2 * pi * (time) / 45) + 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 30) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_yellow,(0.4 * sin(2 * pi * (time) / (39/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
draw_sprite_ext(master.characters[lookid,11],round(anicount)+1,x-(0.5 * sin(2 * pi * (time) / 60) + 0.5)*13*((oxy+7))/7,y-(0.5 * sin(2 * pi * (time) / 15) + 0.5)*13*((oxy+7))/7,6*scale*facing*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),6*scale*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_blue,(0.4 * sin(2 * pi * (time) / (40/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
	}
	
}

if redcount[0]=1{
	
	draw_sprite_ext(master.characters[lookid,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing,y+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*20*scale,4*scale*50*facing/sprite_get_height(master.characters[lookid,10]),3*scale*50/sprite_get_height(master.characters[lookid,10]),rotatebody,c_red,1-alphafade)
} else {
	if (oxy)>0 {
		draw_sprite_ext(master.characters[lookid,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 60) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 15) - 0.5)*13*((oxy+7))/7,3*scale*facing*(0.2 * sin(2 * pi * (time) / (57/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[lookid,10])*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.7 * sin(2 * pi * (time) / (40/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
	draw_sprite_ext(master.characters[lookid,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 45) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 30) - 0.5)*13*((oxy+7))/7,3*scale*facing*(0.2 * sin(2 * pi * (time) / (58/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[lookid,10])*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_green,(0.7 * sin(2 * pi * (time) / (39/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
	draw_sprite_ext(master.characters[lookid,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 30) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 45) - 0.5)*13*((oxy+7))/7,3*scale*facing*(0.2 * sin(2 * pi * (time) / (59/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[lookid,10])*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_yellow,(0.7 * sin(2 * pi * (time) / (38/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
	draw_sprite_ext(master.characters[lookid,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 15) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 60) - 0.5)*13*((oxy+7))/7,3*scale*facing*(0.2 * sin(2 * pi * (time) / (60/(oxy*2+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[lookid,10])*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_blue,(0.7 * sin(2 * pi * (time) / (37/(oxy+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
		}
	draw_sprite_ext(master.characters[lookid,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing,y+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*20*scale,4*scale*50*facing/sprite_get_height(master.characters[lookid,10]),3*scale*50/sprite_get_height(master.characters[lookid,10]),rotatebody,c_cat,1-alphafade)
	if (oxy)>0 {
		draw_sprite_ext(master.characters[lookid,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 15) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 60) - 0.5)*13*((oxy+7))/7,3*scale*facing*50/sprite_get_height(master.characters[lookid,10])*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[lookid,10])*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_red,(0.4 * sin(2 * pi * (time) / (37/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
	draw_sprite_ext(master.characters[lookid,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 30) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 45) - 0.5)*13*((oxy+7))/7,3*scale*facing*50/sprite_get_height(master.characters[lookid,10])*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[lookid,10])*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_green,(0.4 * sin(2 * pi * (time) / (38/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
	draw_sprite_ext(master.characters[lookid,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 45) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 30) - 0.5)*13*((oxy+7))/7,3*scale*facing*50/sprite_get_height(master.characters[lookid,10])*(0.2 * sin(2 * pi * (time) / (58/(oxy+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[lookid,10])*(0.2 * sin(2 * pi * (time) / (59/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_yellow,(0.4 * sin(2 * pi * (time) / (39/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
	draw_sprite_ext(master.characters[lookid,10],0,x+(8*scale+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5*scale)*facing+(0.5 * sin(2 * pi * (time) / 60) - 0.5)*13*((oxy+7))/7,y+(0.5 * sin(2 * pi * (time) / 15) - 0.5)*13*((oxy+7))/7,3*scale*facing*50/sprite_get_height(master.characters[lookid,10])*(0.2 * sin(2 * pi * (time) / (57/(oxy+1))) + 0.9)*((8+(oxy+1))/9),3*scale*50/sprite_get_height(master.characters[lookid,10])*(0.2 * sin(2 * pi * (time) / (60/(oxy+1))) + 0.9)*((8+(oxy+1))/9),rotatebody,c_blue,(0.4 * sin(2 * pi * (time) / (40/(oxy*+1))) + 0.0)*(clamp(power(oxy/5,.3),0,1-alphafade)));
		}
	}







if dead=0 {
	var e = 2.71828; // Base of the natural logarithm
    var k = 10000;
    var a = -100 / (logn(e, k + 1000) - logn(e, k + 1000000))
    var b = 100 * logn(e, k + 1000) / (logn(e, k + 1000) - logn(e, k + 1000000))
	var barw = (a * logn(e, y + k) + b)*2
draw_healthbar(x-150-barw,y-280-barw/10,x+150+barw,y-220+barw/10,100*healthh/maxhealth,c_black,c_red,c_lime,0,1,1)
draw_set_halign(fa_center)
draw_set_valign(fa_middle)
draw_set_font(Font1)
draw_set_alpha(1)
draw_set_color(c_black)
draw_text(x+2,y-250+2,string(ceil(healthh))+"/"+string(maxhealth))
draw_text(x-2,y-250+2,string(ceil(healthh))+"/"+string(maxhealth))
draw_text(x+2,y-250-2,string(ceil(healthh))+"/"+string(maxhealth))
draw_text(x-2,y-250-2,string(ceil(healthh))+"/"+string(maxhealth))
draw_set_color(c_white)
draw_text(x,y-250,string(ceil(healthh))+"/"+string(maxhealth))
}
//draw_set_alpha(1);
//draw_set_color(c_white);
//draw_text(x,y-100,string(movetype));

File: Other_0.gml
Code:
/// @description Insert description here
// You can write your code in this editor




if x<-3000 or x>room_width+3000 or y<-3000 or y>room_height+3000 {
	instance_destroy();
}

if instance_exists(restar) {
	instance_destroy();
}

File: Collision_yeancat.gml
Code:
/// @description Insert description here
// You can write your code in this editor
//damage while touching
if global.pause=1 {
	exit
}
if attacktype=1  {
	
	if instance_exists(yeancat) and dead=0 {
if other.invincible=0 {

if missed=0 {
	if grabbed=0 and frozen = 0 {
if random(1000)>(master.champion*1000) {
var ddd = (clamp(master.dondasblessing,1,1+999*round(1-(clamp(yeancat.healthh/yeancat.maxhealth,0,1)))))*damage*(1*(1-master.resistance))*(1-yeancat.oxyresistance)*(1-yeancat.stemresistance)
other.healthh-=ddd

if master.heartbreak>0 {
	var split=0
	if instance_exists(yeancat) {
	for (var _i=0; _i<instance_number(enemy);_i++) {
				 var _inst = instance_find(enemy, _i);
				 if point_distance(_inst.x,_inst.y,yeancat.x,yeancat.y)<(100*master.range*(1+(.05*master.passives[10,3])*master.einstein+master.lheartbreak)) {
				split+=1
				}
			}
	if split>0 {
	with (enemy) {
		
		if point_distance(x,y,yeancat.x,yeancat.y)<(100*master.range*(1+(.05*master.passives[10,3])*master.einstein+master.lheartbreak)) {
	
		healthh-=ddd*master.heartbreak*yeancat.oxydamage*yeancat.stemdamage/split*(1*(1-resistance))
		if master.faith > 0 {
			yeancat.healthh+=(master.faith*ddd*master.heartbreak*yeancat.oxydamage*yeancat.stemdamage/split)*(1*(1-resistance))
		}
		}
	}
	
	yeancat.breakheart=1
	}
	}
}
other.redcount[0]=1
var hur1 = master.charsounds[master.charselect,0]
var hur2 = master.charsounds[master.charselect,1]
var hur3 = master.charsounds[master.charselect,2]

with (other) {
var hit = round(random(2))
var hurt = round(random(2))
if hit = 0 {
	hurtsnd2=audio_play_sound_on(s_emit,hurt1,0,0);
}
if hit = 1 {
	hurtsnd2=audio_play_sound_on(s_emit,hurt2,0,0);
}
if hit = 2 {
	hurtsnd2=audio_play_sound_on(s_emit,hurt3,0,0);
}
if hurt = 0{
	hurtsnd=audio_play_sound_on(s_emit,hur1,0,0);
}
if hurt = 1 {
	hurtsnd=audio_play_sound_on(s_emit,hur2,0,0);
}
if hurt = 2 {
	hurtsnd=audio_play_sound_on(s_emit,hur3,0,0);
}

audio_sound_gain(hurtsnd,1*master.dialougevol*master.mastervol,0);
audio_sound_gain(hurtsnd2,1*master.sfxvol*master.mastervol,0);
}
} else {
	if grabbed=0 and frozen = 0{
	yeancat.dodge=1;
	missed=1
	}
}
} 
}
}
}
		
}

File: Create_0.gml
Code:
/// @description Insert description here
// You can write your code in this 
music=audio_play_sound(nothingsound,0,0);
moose=0
music_emitter = audio_emitter_create();
fadeinmusic=0

dead=0
bossid=0
grav=0
position= 0
movespeed=10
orbitdir=0
orbitgrow=1
orbitr=400
orbitlength=orbitr
orbitosc=100
orbitspeed=1
intensity=1
namee = ""
healthh = 500
resistance = 0
damage = 1
attackspeed =1
setlection=0

//move type 
movetype =0
//0=stand still
//1=turn and charge at player every 'attackspeed' seconds
//2=teleport to a random quadrant
//3=orbit player
//4=mirror player
//5=jump towards player
//6=burrow underground
//7=move to random position
//8=back away from player
//9=vanish
//10=slowly move toward player
//11=spin in place
//12=gravitate player
//13=chaos
//
moveset=[4,1,8,3,7,2,10,8,3,3]
timebetweenset=[2,3,4,3,2,1,2,3,4,3]
enemyset=[-1,-1,-1,50,-1,-1,-1,-1,0,-1]
enemycountset=[0,0,0,3,0,0,0,0,5,0]
laserset=[-1,-1,-1,0,-1,-1,0,-1,-1,0]
areaset=[-1,-1,-1,-1,-1,-1,0,-1,-1,-1]
damageset=[2,1,1,2,3,1,4,2,1,3]
attackspeedset=[4,2,6,3,4,4,2,8,4,3]

projectileset=[0,-1,1,-1,-1,2,-1,3,-1,-1]
attackset=[2,1,2,5,3,2,6,2,3,5]

//attack type 
//0= none
//1=  damage while touching
//2= fire a projectile every 'attackspeed' seconds
//3= spawn an enemy every 'attackspeed' seconds
//4= area
//5= fire a lazer every 'attackspeed' seconds with a warning indicator
//6=area with warning indicator
attacktimer=1000000
enemycount=enemycountset[0]
enemyobj=enemyset[0]
laserobj=laserset[0]
areaobj=areaset[0]
damage=damageset[0]
projectile_obj=projectileset[0]
attacktype =attackset[0]
timerset=1000000*timebetweenset[0]
timercount=1000000*timebetweenset[0]
dirmov=0
oxy=0
rotatebody=0
anicount=0
time=0
flying=0
positionplace=0
tallness=0
jumptrigger=0
movingg=0
boss_height_fromground=0
bosspos=0
boss_angle_onground=0
bossaltitude=0
rising=0
facing=1
trailalph=1
//bosstype 0=character 1=boss
bosstype=0
lookid=0




bodyangle=0
enemyid=1
sizee=1
frozen=0
resistance=0
crit=0
missed=0
spd=1
xp=1
dollar=0
grabbed=-1
image_speed=0
frame=0
rateset=4
rate=rateset
anicount=0
alphafade=0
scale=.65+(1-abs(obj_terrain.systemposition-180)/180)/2
image_xscale=scale
image_yscale=scale
healthh=500
maxhealth=500
healthlast=healthh
dam=noone
col=c_white
damtime=5

dead=0
alph=1
s_emit= audio_emitter_create();
audio_max_distance_to_be_heard = 2000;
audio_starts_to_drop_at = 0;

audio_falloff_set_model(audio_falloff_linear_distance);
audio_emitter_position(s_emit,x,y,0);
audio_emitter_falloff(s_emit,audio_starts_to_drop_at,audio_max_distance_to_be_heard, 1);
sndmanid=30
suchit=0
//spawn
//random
//closetodeath
//proximity
//successfulhit
//death
snd=[
[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound],
[nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound,nothingsound]
]
speak=audio_play_sound(nothingsound,0,0);
draw=true
hurtsnd=audio_play_sound(nothingsound,0,0);

hurtsnd2=audio_play_sound(nothingsound,0,0);
xx=x
yy=y
oblivious=0;
strafemax=(random(3)-1.5)
if strafemax>-.1 and strafemax<.1 {
	strafemax*=7.5
}
yrand=(random(3)-1.5)
strafemult=(random(5)+5)/75
strafetime=1
strafeosc=random(2)-1
time=0+360*strafeosc
randomtime=(.075+random(14)/200)
strafe=strafemax*(0.5 * sin(2 * pi * strafetime / 5))*strafemult

varispeed=.8+random(.4)
_vspeed=0
_hspeed=0
damaged=0
redcount[0]=0
redcount[1]=0
redcount[2]=0
redcount[3]=0
redcount[4]=0
redcount[5]=0
redcount[6]=0
redcount[7]=0
redcount[8]=0
redcount[9]=0
redcount[10]=0
redcount[11]=0
redcount[12]=0
redcount[13]=0
redcount[14]=0
redcount[15]=0
redcount[16]=0
redcount[17]=0
redcount[18]=0
redcount[19]=0
redcount[20]=0
redcount[21]=0
redcount[22]=0
redcount[23]=0
redcount[24]=0
redcount[25]=0
redcount[26]=0
redcount[27]=0
redcount[28]=0
redcount[29]=0
redcount[30]=0
redcount[31]=0
redcount[32]=0
redcount[33]=0
redcount[34]=0
redcount[35]=0
redcount[36]=0
redcount[37]=0
redcount[38]=0
redcount[39]=0
redcount[40]=0
redcount[41]=0
redcount[42]=0
redcount[43]=0
redcount[44]=0
redcount[45]=0
redcount[46]=0
redcount[47]=0
redcount[48]=0
redcount[49]=0
redcount[50]=0
redcount[51]=0

c_cat=c_white

File: Collision_bullet.gml
Code:

/// @description Insert description here
// You can write your code in this editor


if dead=0 {
if instance_exists(yeancat) {
	if random(100)<master.criticalchance*100 {
healthh-=master.lyricism*(clamp(master.dondasblessing,1,1+999*round(1-(clamp(yeancat.healthh/yeancat.maxhealth,0,1)))))*(1*(1-resistance)*yeancat.def+ceil(1*(1-resistance))*(master.criticalamount))*master.damage*yeancat.oxydamage*yeancat.stemdamage;
	if yeancat.healthh<yeancat.maxhealth-1 {
	yeancat.healthh+=master.lyricism*(clamp(master.dondasblessing,1,1+999*round(1-(clamp(yeancat.healthh/yeancat.maxhealth,0,1)))))*clamp(master.faith*(1*(1-resistance)*yeancat.def+ceil(1*(1-resistance))*(master.criticalamount))*master.damage*yeancat.oxydamage*yeancat.stemdamage,0,999999999);
	}
	crit=1
	} else {
		healthh-=master.lyricism*(clamp(master.dondasblessing,1,1+999*round(1-(clamp(yeancat.healthh/yeancat.maxhealth,0,1)))))*1*((1-resistance)*yeancat.def+ceil(1*(1-resistance)))*yeancat.oxydamage*yeancat.stemdamage
	if yeancat.healthh<yeancat.maxhealth-1 {
	yeancat.healthh+=master.lyricism*(clamp(master.dondasblessing,1,1+999*round(1-(clamp(yeancat.healthh/yeancat.maxhealth,0,1)))))*clamp(master.faith*(1*(1-resistance)*yeancat.def+ceil(1*(1-resistance)))*yeancat.oxydamage*yeancat.stemdamage,0,99999999)
	}
	}
}
if resistance<1 {
col=c_red
with (other) {
instance_destroy()
}
} else {
col=c_silver
other.move_bounce_all(0);
}
}


Object: obj_controlhs

File: Step_0.gml
Code:
// STEP Event of obj_controlhs
if master.spawnthings=1 and !instance_exists(restar) {
	exit
}

//makes characters oscillate on the leaderboard (draw event stuff)
blw = .8+.4*(0.5 * sin(pi*3/2+ 2 * pi * (time/15) / 15) + 0.5)
time+=.5
// Animation logic
if rate > 0 {
    rate -= 0.5 + 0.5 * abs(20) / 20;
} else {
    rate = rateset;
    anicount += 1;
}

if anicount == 5 {
    anicount = 0;
}

// Fade in logic
if instance_exists(obj_achievments) {
    if obj_achievments.onscreen != 0 {
        if fadein < 100 {
            fadein += 1;
        } else {
            fadein = 100;
        }
    } else {
        if fadein > 0 {
            fadein -= 1;
        } else {
            fadein = 0;
        }
    }
} else {
    if fadein > 0 {
        fadein -= 1;
    } else {
        fadein = 0;
    }
}


// Keyboard input for leaderboard navigation
if instance_exists(obj_achievments) {
if (input_check_pressed("right")) {
    selected = (selected < array_length(global.data) - 1) ? selected + 1 : 0;
}

if (input_check_pressed("left")) {
    selected = (selected > 0) ? selected - 1 : array_length(global.data) - 1;
}

if (input_check("right")) {
	scroll_speed-=4*global.room_speed_set/1000000*delta_time
	if scroll_speed<=0 {
		if scroll_counter<4 {
		scroll_speed=256
		} else {
			if scroll_counter<12 {
				scroll_speed=128
			} else {
				if scroll_counter<28 {
					scroll_speed=64
				} else {
					scroll_speed=32
				}
			}
		}
		selected = (selected < array_length(global.data) - 1) ? selected + 1 : 0;
		scroll_counter+=1
	}
} else {
	if input_check_released("right") {
		scroll_speed=256 //(1 beat)
		 scroll_counter=0
	}
}

if (input_check("left")) {
	scroll_speed-=4*global.room_speed_set/1000000*delta_time
	if scroll_speed<=0 {
		if scroll_counter<4 {
		scroll_speed=256
		} else {
			if scroll_counter<12 {
				scroll_speed=128
			} else {
				if scroll_counter<28 {
					scroll_speed=64
				} else {
					scroll_speed=32
				}
			}
		}
		scroll_counter+=1
		selected = (selected > 0) ? selected - 1 : array_length(global.data) - 1;
	}
} else {
	if input_check_released("left") {
		scroll_speed=256 //(1 beat)
		scroll_counter=0
	}
}
}



// Calculating player's strongest character and combined level
var hcl = 0;
var hc = 0;
var cl = 0;
for (var dd = 0; dd < array_length(master.characters); dd++) {
    if master.characters[dd, 0] = 1 {
        if master.characters[dd, 2] > hcl {
            hcl = master.characters[dd, 2];
            hc = dd;
        }
        cl += master.characters[dd, 2];
    }
}
	var mess_am=0;
		var _from=["",""];
		var _message=["",""];
		var _read=[-1,-1];
		var _date=[0,0];
		var fr_name_ = [""]
		var fr_id_ = [-1]
		var fr_date_ = [0]
		var fr_best_ = [0]
			for (var po=0;po<array_length(master.messages);po++) {
				if master.messages[po,2] !=-1 {
				mess_am+=1
				}
			}
			for (var poo=0;poo<mess_am;poo++) {
				_from[poo]=master.messages[poo,0]
				_message[poo]=master.messages[poo,1]
				_read[poo]=master.messages[poo,2]
				_date[poo]=master.messages[poo,3]
			}
			for (var fr=0;fr<array_length(master.friends_list);fr++) {
				fr_name_[fr] = master.friends_list[fr,0]
				fr_id_[fr] = master.friends_list[fr,1]
				fr_date_[fr] = master.friends_list[fr,2]
				fr_best_[fr] = master.friends_list[fr,3]
			}
			
// Player data update/addition logic

var onboard = 0;
if os_is_network_connected(){

	//check to update
if master.playername != "" and master.playerid > 0 and synked = 0 {
	//needs update
	
	
   show_debug_message("Checking for player update or addition");
   var docb = global.data;
     // Reset onboard status each step
    for (var ij = 0; ij < array_length(docb); ij++) {
		if !(global.data == -1) {
        var _doc =docb[ij];
		if _doc.playerid == master.playerid {
			
			show_debug_message("Updating existing player data for ID: " + string(master.playerid));
			var idf = _doc.id

			var _doc_ = {
            named: master.playername,
            kills: master.overallkills,
            highestlevel: master.recordlevel,
            combinedlevel: cl, 
            playtime: master.playtime,
            strongestcharacter: hc,
            strongestlevel: hcl,
            longestgame: master.recordtime,
            mostkills: master.recordkill,
            playerid: master.playerid,
			playernumber: master.playernumber,
            email: master.email,
			lversion: master.legacyversion,
			tw_dollars: {
				da_have: master.dollar_array[0],
				db_spent: master.dollar_array[1],
				dc_earned: master.dollar_array[2]
			},//[have,spent,earned]
			u_password: master.password,
			u_invisible: master.invisible,
			u_disconnected: master.disconnected,//opt out of online play
			u_banned: master.banned,//0=no -1=permaban, 1-inf =how many days.
			u_datebanned: master.datebanned,
			u_timesbanned: master.timesbanned,
			u_last_time_online: master.last_time_online,
			u_last_version_played: master.last_version_played,
			u_messages: {
					a_from: _from,
					b_message: _message,
					c_read: _read,
					d_date: _date
			},//[Player From,Message,Read? (-1=N/A 0=not read, 1=read
			u_friend_count: master.friend_count,//
			u_friends_list: {
				f_name: fr_name_,
				f_id: fr_id_,
				f_date: fr_date_,
				f_best: fr_best_
			}, //[name,id,date became friends,best friends?]
			u_game_progress: master.game_progress,
			u_planet_log: {
				_earth: master.planet_log[0],
				_goldmines: master.planet_log[1],
				_university: master.planet_log[2],
				_icyheart: master.planet_log[3],
				_fantasia: master.planet_log[4],
				_kingdom: master.planet_log[5],
				_lucy: master.planet_log[6],
				_yetopia: master.planet_log[7],
				_pablo: master.planet_log[8],
				_divine: master.planet_log[9],
				_ghost: master.planet_log[10],
				_stormy: master.planet_log[11],
				_vulture: master.planet_log[12],
				_endonda: master.planet_log[13]
			},//[0,0,0,0,0,0,0,0,0,0,0,0,0,0] 1=visited 2=completed
			u_planet_on: master.selectedstage,//
			u_tasks_completed: master.tasks_completed,
			u_collectibles_unlocked: master.collectibles_unlocked,
			u_enemy_killcount: master.enemy_killcount,
			u_boss_killcount: master.boss_killcount,
			u_ind_boss_kills: {
				_taylorswan: master.ind_boss_kills[0],
				_futurtle: master.ind_boss_kills[1],
				_kimk: master.ind_boss_kills[2],
				_traviss: master.ind_boss_kills[3],
				_beeyonce: master.ind_boss_kills[4],
				_tekashi: master.ind_boss_kills[5],
				_lilhump: master.ind_boss_kills[6],
				_rehino: master.ind_boss_kills[7],
				_emunem: master.ind_boss_kills[8],
				_twentyone: master.ind_boss_kills[9],
				_lilsheep: master.ind_boss_kills[10],
				_squidcudi: master.ind_boss_kills[11],
				_kidboo: master.ind_boss_kills[12],
				_dracoon: master.ind_boss_kills[13],
				_bianca: master.ind_boss_kills[14],
				_fourbats: master.ind_boss_kills[15],
				_pumat: master.ind_boss_kills[16],
				_toastmalone: master.ind_boss_kills[17],
				_tydolla: master.ind_boss_kills[18],
				_finalboss: master.ind_boss_kills[19]
			}, //[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
			u_levelender_killcount: master.levelender_killcount,
			u_character_levels: {
				_taylorswan_: master.character_levels[0],
				_futurtle_: master.character_levels[1],
				_kimk_: master.character_levels[2],
				_traviss_: master.character_levels[3],
				_beeyonce_: master.character_levels[4],
				_tekashi_: master.character_levels[5],
				_lilhump_: master.character_levels[6],
				_rehino_: master.character_levels[7],
				_emunem_: master.character_levels[8],
				_twentyone_: master.character_levels[9],
				_lilsheep_: master.character_levels[10],
				_squidcudi_: master.character_levels[11],
				_kidboo_: master.character_levels[12],
				_dracoon_: master.character_levels[13],
				_bianca_: master.character_levels[14],
				_fourbats_: master.character_levels[15],
				_pumat_: master.character_levels[16],
				_toastmalone_: master.character_levels[17],
				_tydolla_: master.character_levels[18],
				_custom_char_: master.character_levels[19]
			}, //[0-50,0-50,..14 times]
			u_name_text: {
				n_font: master.name_text[0],
				n_col_one: master.name_text[1],
				n_col_out: master.name_text[2]
			}, //[font,color,outline color]
			u_character_id: master.character_id,//0-19, 20=custom)
			u_custom_look: {
				cus_head: master.custom_look[0],
				cus_head_type: master.custom_look[1],
				cus_body: master.custom_look[2],
				cus_body_type: master.custom_look[3],
				cus_trail: master.custom_look[4],
				cus_trail_type: master.custom_look[5],
				cus_hat: master.custom_look[6],
				cus_hat_type: master.custom_look[7]
			},//[Head, Variant, Body, Variant, Trail, Variant]
			u_theme_song: {
				cus_theme: master.theme_song[0],
				cus_bass: master.theme_song[1],
				cus_drums: master.theme_song[2],
				cus_keys: master.theme_song[3],
				cus_vocals: master.theme_song[4],
				cus_remix: master.theme_song[5]
			},//(Theme (if not custom), bass, drums, keys, vocals, remix)
			u_login_message: master.login_message,//displays at login then clears
			u_clan_info: {
				clan_id: master.clan_info[0],
				clan_name: master.clan_info[1],
				clan_rank: master.clan_info[2],
				clan_rank_in: master.clan_info[3],
				clan_date: master.clan_info[4],
				clan_donated: master.clan_info[5],
				clan_tasks: master.clan_info[6],
				clan_mr: master.clan_info[7],
				clan_position: master.clan_info[8],
				clan_rb: master.clan_info[9]
			},// master.clan_info,//[Clan ID, Clan Name, Clan Rank, Rank in Clan, Date Joined, Dollars Donated, Tasks Completed, Members Recruited, Position in Clan, recruited by]
			u_donda_3_unlocked: master.dondaunlocked,
			v_permissions: master.permissions//
        }
		_doc_.id=idf
		global.data[ij]=_doc_
		_doc=_doc_
		var _doc_s=json_stringify(_doc_)

			
			
			var updateResponse = idf
			root="highscores"+"/"+string(_doc_.id)
			listenerId=FirebaseFirestore(root).Update(_doc_s);  // Update Firebase
			show_debug_message("Update Response: " + string(updateResponse));
            onboard = 1;
            synked = 1;
			//brrk = 1
			exit;
   
			
		}
		}
		
		if ij >= array_length(docb) {
			onboard=2
			show_debug_message("Player ID: " + string(master.playerid) + ", Synked: " + string(synked) + ", Onboard: " + string(onboard));
			
		}
		if onboard=2 {
			break
			}
		show_debug_message("Player ID: " + string(master.playerid) + ", Synked: " + string(synked) + ", Onboard: " + string(onboard));
	if onboard=2 {
		break
	}
	}
		//break;
	//}


    if (onboard = 2) {
			
        var dt=real(string(date_current_datetime()))*100
		show_debug_message("Adding new player data for ID: " + string(dt));
		var idd = array_length(global.data)+1
			master.playernumber=idd
			master.playerid=dt
        var _doc = {
            named: master.playername,
            kills: master.overallkills,
            highestlevel: master.recordlevel,
            combinedlevel: cl,
            playtime: master.playtime,
            strongestcharacter: hc,
            strongestlevel: hcl,
            longestgame: master.recordtime,
            mostkills: master.recordkill,
            playerid: dt,
			playernumber: master.playernumber,
            email: master.email,
			lversion: master.legacyversion,
			tw_dollars: {
				da_have: master.dollar_array[0],
				db_spent: master.dollar_array[1],
				dc_earned: master.dollar_array[2]
			},//[have,spent,earned]
			u_password: master.password,
			u_invisible: master.invisible,
			u_disconnected: master.disconnected,//opt out of online play
			u_banned: master.banned,//0=no -1=permaban, 1-inf =how many days.
			u_datebanned: master.datebanned,
			u_timesbanned: master.timesbanned,
			u_last_time_online: master.last_time_online,
			u_last_version_played: master.last_version_played,
			u_messages: {
					a_from: _from,
					b_message: _message,
					c_read: _read,
					d_date: _date
			},//[Player From,Message,Read? (-1=N/A 0=not read, 1=read
			u_friend_count: master.friend_count,//
			u_friends_list: {
				f_name: fr_name_,
				f_id: fr_id_,
				f_date: fr_date_,
				f_best: fr_best_
			}, //[name,id,date became friends,best friends?]
			u_game_progress: master.game_progress,
			u_planet_log: {
				_earth: master.planet_log[0],
				_goldmines: master.planet_log[1],
				_university: master.planet_log[2],
				_icyheart: master.planet_log[3],
				_fantasia: master.planet_log[4],
				_kingdom: master.planet_log[5],
				_lucy: master.planet_log[6],
				_yetopia: master.planet_log[7],
				_pablo: master.planet_log[8],
				_divine: master.planet_log[9],
				_ghost: master.planet_log[10],
				_stormy: master.planet_log[11],
				_vulture: master.planet_log[12],
				_endonda: master.planet_log[13]
			},//[0,0,0,0,0,0,0,0,0,0,0,0,0,0] 1=visited 2=completed
			u_planet_on: master.selectedstage,//
			u_tasks_completed: master.tasks_completed,
			u_collectibles_unlocked: master.collectibles_unlocked,
			u_enemy_killcount: master.enemy_killcount,
			u_boss_killcount: master.boss_killcount,
			u_ind_boss_kills: {
				_taylorswan: master.ind_boss_kills[0],
				_futurtle: master.ind_boss_kills[1],
				_kimk: master.ind_boss_kills[2],
				_traviss: master.ind_boss_kills[3],
				_beeyonce: master.ind_boss_kills[4],
				_tekashi: master.ind_boss_kills[5],
				_lilhump: master.ind_boss_kills[6],
				_rehino: master.ind_boss_kills[7],
				_emunem: master.ind_boss_kills[8],
				_twentyone: master.ind_boss_kills[9],
				_lilsheep: master.ind_boss_kills[10],
				_squidcudi: master.ind_boss_kills[11],
				_kidboo: master.ind_boss_kills[12],
				_dracoon: master.ind_boss_kills[13],
				_bianca: master.ind_boss_kills[14],
				_fourbats: master.ind_boss_kills[15],
				_pumat: master.ind_boss_kills[16],
				_toastmalone: master.ind_boss_kills[17],
				_tydolla: master.ind_boss_kills[18],
				_finalboss: master.ind_boss_kills[19]
			}, //[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
			u_levelender_killcount: master.levelender_killcount,
			u_character_levels: {
				_taylorswan_: master.character_levels[0],
				_futurtle_: master.character_levels[1],
				_kimk_: master.character_levels[2],
				_traviss_: master.character_levels[3],
				_beeyonce_: master.character_levels[4],
				_tekashi_: master.character_levels[5],
				_lilhump_: master.character_levels[6],
				_rehino_: master.character_levels[7],
				_emunem_: master.character_levels[8],
				_twentyone_: master.character_levels[9],
				_lilsheep_: master.character_levels[10],
				_squidcudi_: master.character_levels[11],
				_kidboo_: master.character_levels[12],
				_dracoon_: master.character_levels[13],
				_bianca_: master.character_levels[14],
				_fourbats_: master.character_levels[15],
				_pumat_: master.character_levels[16],
				_toastmalone_: master.character_levels[17],
				_tydolla_: master.character_levels[18],
				_custom_char_: master.character_levels[19]
			}, //[0-50,0-50,..14 times]
			u_name_text: {
				n_font: master.name_text[0],
				n_col_one: master.name_text[1],
				n_col_out: master.name_text[2]
			}, //[font,color,outline color]
			u_character_id: master.character_id,//0-19, 20=custom)
			u_custom_look: {
				cus_head: master.custom_look[0],
				cus_head_type: master.custom_look[1],
				cus_body: master.custom_look[2],
				cus_body_type: master.custom_look[3],
				cus_trail: master.custom_look[4],
				cus_trail_type: master.custom_look[5],
				cus_hat: master.custom_look[6],
				cus_hat_type: master.custom_look[7]
			},//[Head, Variant, Body, Variant, Trail, Variant]
			u_theme_song: {
				cus_theme: master.theme_song[0],
				cus_bass: master.theme_song[1],
				cus_drums: master.theme_song[2],
				cus_keys: master.theme_song[3],
				cus_vocals: master.theme_song[4],
				cus_remix: master.theme_song[5]
			},//(Theme (if not custom), bass, drums, keys, vocals, remix)
			u_login_message: master.login_message,//displays at login then clears
			u_clan_info: {
				clan_id: master.clan_info[0],
				clan_name: master.clan_info[1],
				clan_rank: master.clan_info[2],
				clan_rank_in: master.clan_info[3],
				clan_date: master.clan_info[4],
				clan_donated: master.clan_info[5],
				clan_tasks: master.clan_info[6],
				clan_mr: master.clan_info[7],
				clan_position: master.clan_info[8],
				clan_rb: master.clan_info[9]
			},// master.clan_info,//[Clan ID, Clan Name, Clan Rank, Rank in Clan, Date Joined, Dollars Donated, Tasks Completed, Members Recruited, Position in Clan, recruited by]
			u_donda_3_unlocked: master.dondaunlocked,
			v_permissions: master.permissions//
        };
        //FirebaseFirestore(root).Set(json_stringify(_doc));  // Add to Firebase
		root="highscores"
		listenerId = FirebaseFirestore(root).Set(json_stringify(_doc));
		var setResponse = string(listenerId)
		//show_debug_message("Set Response: " + setResponse);
		
	
        
			with (master) {
scr_save_game();
}
synked = 1;
onboard=-1;
exit;
	}
}


}     







File: KeyPress_38.gml
Code:
/// @description Insert description here
// You can write your code in this editor


if master.devmode=1 
{
	if keyboard_check(ord("P")) {
	pwr+=.1
	}
	if keyboard_check(ord("S")) {
	slw+=.1
	}
	if keyboard_check(ord("B")) {
	blw+=.1
	}
}



File: Draw_0.gml
Code:
/// @description Insert description here
//draw event obj_controlhs

if master.spawnthings=1 and !instance_exists(restar) {
	exit
}

var hsxx=room_width
var hsyy=room_height/2
if instance_exists(obj_achievments) {
	hsxx=obj_achievments.x
	hsyy=obj_achievments.y-350
}
draw_set_halign(fa_center)
draw_set_valign(fa_middle)

var docb = global.data;
if docb != -1 {
//array_sort(docb, sort_score);
}
if docb == -1
{
	draw_text_bold("Loading...",hsxx,hsyy,5,Font6,c_black,c_white)
}
else
{

		//draw_text_bold("Highscores:",hsxx,hsyy,5,Font6,c_black,c_white)
		if instance_exists(obj_achievments) {
		hsxx=obj_achievments.x-600
		var hsyy=obj_achievments.y
		} else {
			var hsxx=room_width
var hsyy=room_height/2
		}
		
			array_sort(global.data, sort_score);
					
		for (var i=selected; i< array_length(global.data); i+=1;) {
				
			var _doc_ = docb[i];
			var badgee= ""
			if !is_undefined(docb[i]) {
				badgee = $"{_doc_.lversion}"
			var _txt = $"\nCombined Level: {_doc_.combinedlevel}\nHighest Level: {_doc_.highestlevel}\nKills: {_doc_.kills}\nPlay Time: {_doc_.playtime}"
				if _doc_ != -1 {
				if i-selected=0 {
					_txt = $"\nCombined Level: {_doc_.combinedlevel}\nHighest Level: {_doc_.highestlevel}\nKills: {_doc_.kills}\nPlay Time: {_doc_.playtime}"
					
					facing=1
					
				} else {
					_txt = $"Level\n{_doc_.combinedlevel}"
			
					facing=-1
					if i<selected {
						facing=1
					}
				}
				var place=clamp(i+1,1,9999999)
				var offs= (1 * sin(2 * pi * (time/slw+(power(1/clamp(abs(i-selected)*1.5+1,1,100),pwr)*700*(i-selected)/blw)) / 800))*(sqrt(1/clamp(abs(i-selected)/blw+1,1,100))*200*(i-selected)/blw)
				//BADGE// assign badge text to show how early they played the game.
				var bnum=0
				var btext=""
				if badgee= "0.5.0" or badgee = "0.6.0" or badgee = "Alpha 1.0.0" {
					bnum=0
					if badgee= "0.5.0" {
						btext="Alpha 0.5.0"
					}
					if badgee= "0.6.0" {
						btext="Alpha 0.6.0"
					}
					if badgee= "Alpha 1.0.0" {
						btext="Alpha 1.0.0"
					}
				} else {
				if badgee= "Beta 1.0.0" {
					if badgee= "Beta 1.0.0" {
						btext="Beta 1.0.0"
					}
					bnum=1
				} else {
				if badgee= "Beta 1.5.0" {
					if badgee= "Beta 1.5.0" {
						btext="Beta 1.5.0"
					}
					bnum=1
				}
				}
				}
				if i-selected=0 {
				draw_sprite_ext(spr_badges,bnum,hsxx+sqrt(1/clamp(abs(i-selected)/blw+1,1,100))*700*(i-selected)/blw,hsyy-325+offs,.33,.33,0,c_white,.9)
				draw_text_bold_ext(btext,hsxx+sqrt(1/clamp(abs(i-selected)/blw+1,1,100))*700*(i-selected)/blw,hsyy-350+offs,5,Font1,c_black,c_white,1*(fadein/100)-clamp(abs(i-selected)-1,0,5)/5);
				}
				//draw characters/players
				for (var ii=0 ; ii<round(((abs(facing-1)*room_width/2)+(1*hsxx))/110); ii+=1) {
					draw_sprite_ext(master.characters[clamp(_doc_.strongestcharacter,0,14),12],round(anicount),hsxx+sqrt(1/clamp(abs(i-selected)/blw+1,1,100))*700*(i-selected)/blw+(lengthdir_x(18*(ii)*6*scale,0+180))*facing,hsyy+offs,6*scale*facing,6*scale,0,c_white,(1-(ii/10))*(fadein/100))
				}
				draw_sprite_ext(master.characters[clamp(_doc_.strongestcharacter,0,14),11],round(anicount),hsxx+sqrt(1/clamp(abs(i-selected)/blw+1,1,100))*700*(i-selected)/blw,hsyy+offs,facing*6,6,0,c_white,1*(fadein/100))
				draw_sprite_ext(master.characters[clamp(_doc_.strongestcharacter,0,14),10],0,hsxx+sqrt(1/clamp(abs(i-selected)/blw+1,1,100))*700*(i-selected)/blw+(8+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*5),hsyy+offs+(0.5 * sin(2 * pi * round(anicount) / 5) + 0.5)*20,facing*4*50/sprite_get_height(master.characters[clamp(_doc_.strongestcharacter,0,14),10]),3*50/sprite_get_height(master.characters[clamp(_doc_.strongestcharacter,0,14),10]),0,c_white,1*(fadein/100))

				draw_set_halign(fa_center)
				draw_set_valign(fa_middle)
			
				draw_text_bold_ext(_txt,hsxx+sqrt(1/clamp(abs(i-selected)/blw+1,1,100))*700*(i-selected)/blw,hsyy+170+offs,5,Font1,c_black,c_white,1*(fadein/100)-clamp(abs(i-selected)-1,0,5)/5);
				_txt = $"{_doc_.named}"
			
				
				var sca=sqrt(1/clamp(abs(i-selected)/blw+1,1,100))*(1.5-clamp(string_length(_doc_.named)-7,0,18)/18)
				if (i-selected)=0 {
				draw_text_bold_ext2(_txt,hsxx+sqrt(1/clamp(abs(i-selected)/blw+1,1,100))*700*(i-selected)/blw,hsyy-200+offs,5,Font5,c_black,c_white,1*(fadein/100),sca);
				} else {
				draw_text_bold_ext2(_txt,hsxx+sqrt(1/clamp(abs(i-selected)/blw+1,1,100))*700*(i-selected)/blw,hsyy-150+offs,5,Font5,c_black,c_white,1*(fadein/100),sca);
				}
				//this section changes the color of the ranking number based on the position.
				var placecol=c_black
				var placecol2=c_white
				if place=1 {
					placecol=make_colour_hsv(36, 255, 255);
					placecol2=make_colour_hsv(42, 255, 114);
				}
				if place=2 {
					placecol=c_ltgray
					placecol2=c_dkgrey
				}
				if place=3 {
					placecol=make_colour_hsv(23, 151, 200);
					placecol2=make_colour_hsv(25, 255, 82);
				}
				if place=4 {
					placecol=c_red
					placecol2=c_black
				}
				if place=5 {
					placecol=c_orange
					placecol2=c_black
				}
				if place=6 {
					placecol=c_yellow
					placecol2=c_black
				}
				if place=7 {
					placecol=c_green
					placecol2=c_black
				}
				if place=8 {
					placecol=c_blue
					placecol2=c_black
				}
				if place=9 {
					placecol=c_aqua
					placecol2=c_black
				}
				if place=10 {
					placecol=c_purple
					placecol2=c_black
				}
				if place>10 {
					placecol=c_black
					placecol2=c_white
				}
				draw_text_bold_ext2(string(place),hsxx+sqrt(1/clamp(abs(i-selected)/blw+1,1,100))*700*(i-selected)/blw,hsyy-90+offs,10,Font5,placecol2,placecol,1*(fadein/100),(2-clamp(place/20,0,.75))*sca/2);
				
				//if keyboard_check(vk_space) and master.devmode=1 { //for showing tweaking values during development
				//		if keyboard_check(ord("P")) {
				//			draw_text_bold(string(pwr),room_width/2,room_height/2,10,Font5,c_white,c_black);			
				//		}
				//		if keyboard_check(ord("S")) {
				//			draw_text_bold(string(slw),room_width/2,room_height/2,10,Font5,c_white,c_black);			
				//		}
				//		if keyboard_check(ord("B")) {
				//			draw_text_bold(string(blw),room_width/2,room_height/2,10,Font5,c_white,c_black);			
				//		}
				//}
				}
				}
		}
}






File: Other_5.gml
Code:
/// @description Insert description here
// You can write your code in this editor

instance_destroy()




File: Create_0.gml
Code:

// CREATE EVENT of obj_controlhs
// Create Event of obj_controlhs or similar persistent object
if !variable_instance_exists(global, "data") {
    global.data = [];
}
scroll_speed=256 //(1 beat)
scroll_counter=0

pwr=.4//variable for tweaking player drawing
time=0
slw=.7//variable for tweaking player drawing
blw=1//variable for tweaking player drawing
global.isListening=false
//onboard=0
brrk=0
scale=1 //scale of the characters drawn on the leaderboard
facing=1 //direction character faces on the leaderboard
root= "highscores"; //the name of the collection in firebase
selected=0 // currently selected player id to dispplay on leaderboard
playeridd=master.playerid//locally store the player id from the master object
listener = FirebaseFirestore(root).Listener();
selectplayer=0
anicount=0 //animation variable for drawing characters on leaderboard
rateset=5 //framerate of animation
rate=rateset //animation counting variable
global.data= -1 //will become an array if theres data in the firebase
synked=0; //whether or not the player has been added or updated to the leaderboard this game.
fadein=0 //variable for fading in the alpha of things in draw event




File: obj_controlhs.yy
Code:
{
  "$GMObject":"",
  "%Name":"obj_controlhs",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":70,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":5,"eventType":7,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":38,"eventType":9,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":40,"eventType":9,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"obj_controlhs",
  "overriddenProperties":[],
  "parent":{
    "name":"ui",
    "path":"folders/Objects/ui.yy",
  },
  "parentObjectId":null,
  "persistent":false,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":null,
  "spriteMaskId":null,
  "visible":true,
}

File: KeyPress_40.gml
Code:
/// @description Insert description here
// You can write your code in this editor


if master.devmode=1 
{
	if keyboard_check(ord("P")) {
	pwr-=.1
	}
	if keyboard_check(ord("S")) {
	slw-=.1
	}
	if keyboard_check(ord("B")) {
	blw-=.1
	}
}



File: Other_70.gml
Code:
// Async Social event of obj_controlhs
if master.spawnthings == 1 and !instance_exists(restar) {
    exit;
}

if (ds_exists(async_load, ds_type_map) && async_load[? "status"] == 200) {
    switch (async_load[? "type"]) {
        case "FirebaseFirestore_Collection_Query":
            if (ds_map_exists(async_load, "value")) {
                var _doc = async_load[? "value"];
                var _data = json_parse(_doc);
                var _names = variable_struct_get_names(_data);
               
                for (var iii = 0; iii < array_length(_names); iii++) {
                    var name = _names[iii];
                    var temp_doc = variable_struct_get(_data, name);
                    temp_doc.id = name;

                    // Ensure global.data is always an array before attempting to use it
                    if (typeof(global.data) != "array") {
                        global.data = [];
                    }

                    // Check if this entry already exists in global.data
                    var exists = false;
                    for (var j = 0; j < array_length(global.data); j++) {
                        if (global.data[j].playerid == temp_doc.playerid) {
                            exists = true;
                            break;
                        }
                    }

                    // If it doesn't exist, add it
                    if (!exists) {
                        array_push(global.data, temp_doc);
                    }
                }
            }
            break;
      
        case "FirebaseFirestore_Document_Update":
            // Handle document update (if necessary for your game logic)
            break;

        case "FirebaseFirestore_Collection_Listener":
            // Re-query the Firestore collection to refresh data
            if (global.refreshData) {
                FirebaseFirestore(root).Query();
                global.refreshData = false;  // Reset after query
            }
            break;
    }
}


//// Async Social event of obj_controlhs

//if master.spawnthings=1 and !instance_exists(restar) {
//    exit;
//}

//if (async_load[? "status"] == 200) {
//    switch (async_load[? "type"]) {
//        case "FirebaseFirestore_Collection_Query":
//            var data = [];
//            if global.data == -1 {
//                global.data = data;
//            }
//            global._doc = async_load[? "value"];
//            var _data = json_parse(global._doc);
//            var _names = variable_struct_get_names(_data);
           
//            for (var iii = 0; iii < array_length(_names); iii++) {
//                var temp_doc = variable_struct_get(_data, _names[iii]);
//                temp_doc.id = _names[iii];

//                // Check if this entry already exists in global.data
//                var exists = false;
//                for (var j = 0; j < array_length(global.data); j++) {
//                    if (global.data[j].playerid == temp_doc.playerid) {
//                        exists = true;
//                        break;
//                    }
//                }

//                // If it doesn't exist, add it
//                if (!exists) {
//                    array_push(global.data, temp_doc);
//                }
//            }
//            break;
      
//        case "FirebaseFirestore_Document_Update":
//            // Handle document update (if necessary for your game logic)
//            break;

//        case "FirebaseFirestore_Collection_Listener":
//            // Re-query the Firestore collection to refresh data
//            FirebaseFirestore(root).Query();
//            break;
//    }
//}




Object: obj_backg

File: Step_0.gml
Code:
///step of obj_backg
//
x=room_width/2
y=room_height/2
backgroundcolor=obj_terrain.backgroundcolor
pht=clamp(obj_terrain.playeraltitude/40000,0,1)
if global.pause=0 {
if instance_exists(yeancat) {
if abs(travelspeed)<yeancat.hspeedmax {
	if master.horz=1 {
		if travelspeed<0 {
			travelspeed*=.95
		}
	} else {
		if master.horz=-1 {
			if travelspeed>0 {
			travelspeed*=.95
		}
		}
	}
travelspeed+=(master.horz*pht*power(abs(yeancat._hspeed),.8))/200
//where speed is set
if abs(travelspeed) > abs(obj_terrain.d2plan/7.5)*yeancat.hspeedmax {
if master.joystick=0 {
if !(input_check("left")) and !(input_check("right")) {
	travelspeed*=.97
}
} else {
		//joystick
		if master.joystickon=0 {
			travelspeed*=.97
		}
	}
}
obj_terrain.travelspeed=travelspeed
} else {
	if travelspeed>0 {
		travelspeed=yeancat.hspeedmax-.5
	} else {
		travelspeed=-(yeancat.hspeedmax-.5)
	}
	if abs(travelspeed) > abs(obj_terrain.d2plan/7.5)*yeancat.hspeedmax {
if master.joystick=0 {
if !(input_check("left")) and !(input_check("right")) {
	travelspeed*=.97
}
} else {
		//joystick
		if master.joystickon=0 {
			travelspeed*=.97
		}
	}
}
}
}
}
if master.mainmenu=0 {
	if slideplanet>0 {
		slideplanet=slideplanet*.9985-1.55
		if slideplanet<0 {
			slideplanet=0
		}
	} else {
		master.grav=planets[planet,2]
		slideplanet=0
	}
	planrot=calculateAngle(planrot,slideplanet,800)
} else {
	planrot+=.03
	
}
if planrot>=360 {
	planrot=0
}
if is_undefined(planrot) {
	planrot=0
}
if master.mainmenu=0 {
	if boost<3 {
		boost+=.05
	} else {
		boost=3
	}
} else {
	if boost>0 {
		boost-=.05
	} else {
		boost=0
	}
}

if instance_exists(obj_terrain) {
	playeraltitude=obj_terrain.playeraltitude
	playerpos=obj_terrain.playerpos
	systemposition=obj_terrain.systemposition
	d2plan=obj_terrain.d2plan
player_height_fromground=obj_terrain.player_height_fromground
}

alph=0+1*(1-1/(1+clamp((obj_terrain.player_height_fromground+obj_terrain.playeraltitude-15000)/15000,0,1000)))+fadein
lalph=0+1*(1-1/(1+clamp((obj_terrain.player_height_fromground+obj_terrain.playeraltitude-15000)/30000,0,1000)))+fadein
if is_nan(lalph) {
	lalph=0
}
if is_nan(alph) {
	alph=0
}
if global.pause=1 and !instance_exists(restar) {
	exit
}
time+=.005+(.025*(1-1/(1+master.ti/6000)))
var waviness = .6
osc=((0+master.ti/1007)*(global.room_speed_set/1000000*delta_time)*((clamp(master.speedd,0,200)+50)/50))
var jtj=0
if instance_exists(yeancat) {
jtj = (clamp(abs(yeancat.y-room_height/2)/500,0,1)*sin(pi/4+ 2 * pi * (time) / 15))
shift=sign(room_height/2-yeancat.y)*sign(jtj)*abs(osc)*((1) * (clamp(abs(yeancat.y-room_height/2)/500,0,1)*sin(pi/4+ 2 * pi * (time) / 15)))*(-1)

}
rainbowv+=shift*waviness
waviness=1
rainbowv2+=shift*waviness
back1scale=4-1.5*(1-1/(1+clamp(master.speedd-10,0,1000)/10))*(1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/10000))
back2scale=2-1.25*(1-1/(1+clamp(master.speedd-10,0,1000)/5))*(1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/20000))
var wayy=1
if instance_exists(yeancat) {
wayy=yeancat.facing
//rainbowh+=(6/back1scale)*(1-(1/(1+clamp(master.speedd-10,0,1000)))*(global.room_speed_set/1000000*delta_time)*(.2*(clamp(master.speedd,0,200)+15)/6+.05*master.horz*(clamp(master.speedd,0,200)+10)/10)*(1+boost)/2)*master.camscale*(1-1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/10000))*wayy+master.mainmenu*3/2
//rainbowv+=(back1scale/6)*((1/(1+clamp(master.speedd-10,0,1000)/2))*(global.room_speed_set/1000000*delta_time)*(.15*master.vert*(clamp(master.speedd,0,200)+15)/10)*(1+boost))*master.camscale*(1-1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/10000))
//rainbowh2+=(4/back2scale)*(1-(1/(1+clamp(master.speedd-10,0,1000)))*(global.room_speed_set/1000000*delta_time)*(.2*(clamp(master.speedd,0,200)+15)/6+.05*master.horz*(clamp(master.speedd,0,200)+10)/10)*(1+boost)/2)*master.camscale*(1-1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/15000))*wayy+master.mainmenu*3/2
//rainbowv2+=(back2scale/4)*((1/(1+clamp(master.speedd-10,0,1000)/2))*(global.room_speed_set/1000000*delta_time)*(.15*master.vert*(clamp(master.speedd,0,200)+15)/10)*(1+boost))*master.camscale*(1-1/(1+(obj_terrain.player_height_fromground+obj_terrain.playeraltitude)/15000))
rainbowh+=(back1scale/500)*(global.room_speed_set/1000000*delta_time)*master.camscale*travelspeed+master.mainmenu*3/2
rainbowv+=(back1scale/150)*(global.room_speed_set/1000000*delta_time)*master.vert*master.camscale*pht*power(abs(yeancat._vspeed),.5)+master.mainmenu*3/2
rainbowh2+=(back2scale/150)*(global.room_speed_set/1000000*delta_time)*master.camscale*travelspeed*(1+abs(travelspeed/500))+master.mainmenu*3/2
rainbowv2+=(back2scale/70)*(global.room_speed_set/1000000*delta_time)*master.vert*master.camscale*pht*power(abs(yeancat._vspeed),.5)+master.mainmenu*3/2
}
if rainbowh>=sprite_get_width(back)*master.camscale*back1scale {
	rainbowh-=sprite_get_width(back)*master.camscale*back1scale
}
if rainbowv>=sprite_get_height(back)*master.camscale*back1scale {
	rainbowv-=sprite_get_height(back)*master.camscale*back1scale
}
if rainbowv<-sprite_get_height(back)*master.camscale*back1scale {
	rainbowv+=sprite_get_height(back)*master.camscale*back1scale
}


if rainbowh2>=sprite_get_width(back2)*master.camscale*back2scale {
	rainbowh2-=sprite_get_width(back2)*master.camscale*back2scale
}
if rainbowv2<-sprite_get_height(back2)*master.camscale*back2scale {
	rainbowv2+=sprite_get_height(back2)*master.camscale*back2scale
}
if rainbowv2>=sprite_get_height(back2)*master.camscale*back2scale {
	rainbowv2-=sprite_get_height(back2)*master.camscale*back2scale
}



File: Draw_0.gml
Code:
//DRAW of obj_backg
if master.devmode=1 {
	if keyboard_check(vk_space) {
		draw_set_color(c_green)
draw_rectangle(0,0,room_width,room_height,0)
		exit
	}
} else {
	draw_set_color(backgroundcolor)
draw_rectangle(0,0,room_width,room_height,0)
}

if !is_nan(lalph) and !is_nan(alph) {
draw_sprite_ext(spr_skygrade,0,room_width/2,5*room_height/8+(room_height/8)*master.camscale+playeraltitude/50,4*master.camscale,4*planets[planet,11],0,planets[planet,10],planets[planet,12]*(1-playeraltitude/40000));
 draw_sprite_tiled_ext(back, 1, _sw/2-rainbowh, _sh/2-rainbowv,master.camscale*back1scale,master.camscale*back1scale,c_white,sqrt(lalph))
 draw_sprite_tiled_ext(back2, 1, _sw2/2-rainbowh2, _sh2/2-rainbowv2,master.camscale*back2scale,master.camscale*back2scale,c_white,sqr(lalph))
draw_sprite_tiled_ext(back2, 0, _sw2/2-rainbowh2, _sh2/2-rainbowv2,master.camscale*back2scale,master.camscale*back2scale,c_white,alph)
 draw_sprite_tiled_ext(back, 0, _sw/2-rainbowh, _sh/2-rainbowv,master.camscale*back1scale,master.camscale*back1scale,c_white,sqrt(alph))
}

//planets 0location, 1size, 2gravity, 3background, 4clouds, 5skycolor1, 6skycolor2, 7tileid,8distance,9planetimage

if is_undefined(planrot) {
	planrot=0
}
	var planxx=room_width/2+master.camscale*(room_width/3)*d2plan/7
	var planyy=room_height*3/4-150-sqr((playeraltitude+8000)/12000)*28+clamp((1 - abs(playeraltitude - 18500) / 24500),0,.9)*500-clamp((playeraltitude-40000)/3500,0,10000)
	//var ranx= ()*(abs(lengthdir_x(1,planrot))) + ()*(abs(lengthdir_y(1,planrot)))
	//var rany= ()*(abs(lengthdir_y(1,planrot))) + ()*(abs(lengthdir_x(1,planrot)))
	var ranx=(planets[planet,1]/10)*clamp(1*(1*((8.2/((1.5*sqr(slideplanet/800)+.5)*power(1+clamp(((playeraltitude*.7))/40000,0,1)*((((playeraltitude*.7)+1000)/10000)/(((playeraltitude*.7)+1000)/10000+.01)),3))-(4.1-4/(sqr(1+(playeraltitude*.7)/10000))))*(abs(lengthdir_x(1,planrot))))+((4.1-(4-4/(sqr(1+(playeraltitude*.7)/10000))))*(abs(lengthdir_y(1,clamp(planrot,0,360)))))*(clamp(1-1/(sqr(1+(playeraltitude*.7)/10000))+slideplanet/800,0,1))*1),(8/(sqr(1+(playeraltitude*.7)/40000)))*clamp((playeraltitude*.7)/20000,0,1),99)
	var rany=(planets[planet,1]/10)*clamp(1*(1*((8.2/((1.5*sqr(slideplanet/800)+.5)*power(1+clamp(((playeraltitude*.7))/40000,0,1)*((((playeraltitude*.7)+1000)/10000)/(((playeraltitude*.7)+1000)/10000+.01)),3))-(4.1-4/(sqr(1+(playeraltitude*.7)/10000))))*(abs(lengthdir_y(1,planrot))))+((4.1-(4-4/(sqr(1+(playeraltitude*.7)/10000))))*(abs(lengthdir_x(1,clamp(planrot,0,360)))))*(clamp(1-1/(sqr(1+(playeraltitude*.7)/10000))+slideplanet/800,0,1))*1),(8/(sqr(1+(playeraltitude*.7)/40000)))*clamp((playeraltitude*.7)/20000,0,1),99)
	draw_sprite_ext(planets[planet,9],0,planxx,planyy*1-slideplanet*.55,ranx*.4*(7.5-abs(d2plan))/7.5,rany*.4*(7.5-abs(d2plan))/7.5,planrot,c_white,clamp(slideplanet/200+(1-1/(1+clamp(playeraltitude-500,0,9999999)/10000)),0,1));

//draw_sprite_ext(back,1,x,y,2*master.camscale,2*master.camscale,0,c_white,lalph)
//draw_sprite_ext(back,0,x,y,2*master.camscale,2*master.camscale,0,c_white,alph)

File: obj_backg.yy
Code:
{
  "$GMObject":"",
  "%Name":"obj_backg",
  "eventList":[
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":3,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":0,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
    {"$GMEvent":"v1","%Name":"","collisionObjectId":null,"eventNum":0,"eventType":8,"isDnD":false,"name":"","resourceType":"GMEvent","resourceVersion":"2.0",},
  ],
  "managed":true,
  "name":"obj_backg",
  "overriddenProperties":[],
  "parent":{
    "name":"Objects",
    "path":"folders/Objects.yy",
  },
  "parentObjectId":null,
  "persistent":false,
  "physicsAngularDamping":0.1,
  "physicsDensity":0.5,
  "physicsFriction":0.2,
  "physicsGroup":1,
  "physicsKinematic":false,
  "physicsLinearDamping":0.1,
  "physicsObject":false,
  "physicsRestitution":0.1,
  "physicsSensor":false,
  "physicsShape":1,
  "physicsShapePoints":[],
  "physicsStartAwake":true,
  "properties":[],
  "resourceType":"GMObject",
  "resourceVersion":"2.0",
  "solid":false,
  "spriteId":{
    "name":"spr_starfieldbase",
    "path":"sprites/spr_starfieldbase/spr_starfieldbase.yy",
  },
  "spriteMaskId":null,
  "visible":true,
}

File: Create_0.gml
Code:
/// create obj_backg
//
pht=0
travelspeed=0

planet=0
d2plan=0
planrot=0
slideplanet=800
c_skyblue=make_color_hsv(134, 208, 255)
c_spaceblack=make_color_hsv(171, 198, 116)
backgroundcolor=c_spaceblack
systemposition=0
planets=[
[0,10,5,spr_hills,spr_clouds,c_skyblue,c_spaceblack,0,0,spr_earth,c_blue,.5,.75,0,.1,1,.66,.15,.07,.3,.36,.66,.25,.1,1,spr_clouds,spr_starfieldbase,100],
[15,11,6,spr_campus,spr_gradcloud,c_skyblue,c_black,0,15,spr_graduationstation,c_skyblue,.75,1,0,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100],
[40,13,7,spr_fantasiaback,spr_fantasiacloud,c_maroon,c_purple,0,40,spr_fantasia,c_purple,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_fantasiacloud,spr_starfieldbase,100],
[60,12,8,spr_landoflucyback,spr_clouds,c_skyblue,c_aqua,0,60,spr_landoflucy,c_aqua,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100],
[80,14,10,spr_placeofpabloback,spr_goldcloud,c_aqua,c_black,0,80,spr_placeofpablo,c_yellow,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100],
[100,16,12,spr_ghosttownback,spr_ghostcloud,c_purple,c_green,0,100,spr_ghosttown,c_green,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_ghostcloud,spr_starfieldbase,100],
[145,15,15,spr_vulturevalleyback,spr_goldcloud,c_gray,c_black,0,145,spr_vulturevalley,c_orange,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100],
[180,20,30,spr_theendondaback,spr_endondacloud,c_purple,c_white,0,180,spr_theendonda,c_red,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_endondacloud,spr_starfieldbase,100],
[245,17,20,spr_stormysandsback,spr_stormysandcloud,c_orange,c_black,0,115,spr_stormysands,c_black,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_stormysandcloud,spr_starfieldbase,100],
[270,14,15,spr_divinedomainback,spr_goldcloud,c_aqua,c_black,0,90,spr_divinedomain,c_white,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100],
[290,13,12,spr_yetopiaback,spr_goldcloud,c_black,c_dkgrey,0,70,spr_yetopia,c_red,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100],
[310,12,10,spr_kingdomback,spr_goldcloud,c_teal,c_skyblue,0,50,spr_kingdom,c_skyblue,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100],
[330,8,3,spr_icyback,spr_throwaway,c_black,c_skyblue,0,30,spr_icyheart,c_teal,.75,1,3,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_icycloud,spr_starfieldbase,100],
[345,11,9,spr_goldbg,spr_goldcloud,c_yellow,c_black,0,15,spr_goldmines,c_orange,.75,1,1,19,41,7,.5,3,.6,1.6,.3,.1,.5,1,spr_clouds,spr_starfieldbase,100]
]
playeraltitude=0
playerpos=0
player_height_fromground=0
fadein=1
alph=1
lalph=0
rainbowh=0
rainbowv=0
rainbowh2=0
rainbowv2=0
osc=0
time=0
shift=0
back1scale=4
back2scale=50
back=spr_starfieldbase
back2=spr_starfieldbase2
_sw = sprite_get_width(spr_starfieldbase);
_sh = sprite_get_height(spr_starfieldbase);
_sw2 = sprite_get_width(spr_starfieldbase2);
_sh2 = sprite_get_height(spr_starfieldbase2);
boost=0

== Related Scripts ==

Script: scr_add_action
File: scr_add_action.yy
Code:
{
  "$GMScript":"v1",
  "%Name":"scr_add_action",
  "isCompatibility":false,
  "isDnD":false,
  "name":"scr_add_action",
  "parent":{
    "name":"Scripts",
    "path":"folders/Scripts.yy",
  },
  "resourceType":"GMScript",
  "resourceVersion":"2.0",
}

Script: scr_add_action
File: scr_add_action.gml
Code:
function scr_add_action(argument0, argument1, argument2) {
    var name = string(argument0);
    var commandName = string(argument1);
    var parameters = argument2;
    
    handleDebugMessage("Adding action: " + name + ", Command: " + commandName + ", Parameters: " + string(parameters), true);

    if (ds_map_exists(global.actionDetails, name)) {
        handleDebugMessage("Action '" + name + "' already exists.", true);
        return;
    }
    
    var commandDetailName = commandName + "(";
    handleDebugMessage("Checking for command: " + commandDetailName, true);
    if (!ds_map_exists(global.commandDetails, commandDetailName)) {
        handleDebugMessage("Command '" + commandName + "' does not exist.", true);
        return;
    }
    
    if (!is_array(parameters)) {
        parameters = [parameters];
    } else if (array_length(parameters) == 1 && is_string(parameters[0])) {
        var paramString = string_replace_all(parameters[0], "[", "");
        paramString = string_replace_all(paramString, "]", "");
        parameters = string_split(paramString, ",");
    }
    
    // Special handling for chat_bubble command
    if (commandName == "chat_bubble" && array_length(parameters) >= 3) {
        var choices = [];
        for (var i = 2; i < array_length(parameters); i += 2) {
            array_push(choices, [parameters[i], parameters[i+1]]);
        }
        parameters = [parameters[0], parameters[1], choices];
    }
    
    handleDebugMessage("Parameters after processing: " + string(parameters), true);
    
    var actionEntry = ds_map_create();
    ds_map_add(actionEntry, "command", commandName);
    ds_map_add(actionEntry, "parameters", parameters);
    
    ds_map_add(global.actionDetails, name, actionEntry);
    
    handleDebugMessage("Action '" + name + "' added successfully.", true);
    
    save_actions();
}

//function scr_add_action(argument0, argument1, argument2) {
//    var name = string(argument0);
//    var commandName = string(argument1);
//    var parameters = argument2; // This should be an array
    
//    handleDebugMessage("Adding action: " + name + ", Command: " + commandName + ", Parameters: " + string(parameters), true);

//    // Ensure the action doesn't already exist
//    if (ds_map_exists(global.actionDetails, name)) {
//        handleDebugMessage("Action '" + name + "' already exists.", true);
//        return;
//    }
    
//    // Ensure the command is valid and exists
//    var commandDetailName = commandName + "(";
//    handleDebugMessage("Checking for command: " + commandDetailName, true);
//    if (!ds_map_exists(global.commandDetails, commandDetailName)) {
//        handleDebugMessage("Command '" + commandName + "' does not exist.", true);
//        return;
//    }
    
//    // Ensure parameters is an array
//    if (!is_array(parameters)) {
//        parameters = [parameters];
//    } else if (array_length(parameters) == 1 && is_string(parameters[0])) {
//        // If it's a single string that looks like an array, split it
//        var paramString = string_replace_all(parameters[0], "[", "");
//        paramString = string_replace_all(paramString, "]", "");
//        parameters = string_split(paramString, ",");
//    }
    
//    // Process each parameter
//    for (var i = 0; i < array_length(parameters); i++) {
//        var param = parameters[i];
//        // Remove quotes if present
//        if (is_string(param)) {
//            param = string_replace_all(param, "\"", "");
//            param = string_trim(param);
//            // Convert to number if it's a valid number
//            if (string_digits(param) == param) {
//                param = real(param);
//            }
//        }
//        parameters[i] = param;
//    }
    
//    handleDebugMessage("Parameters after processing: " + string(parameters), true);
    
//    // Create the action entry
//    var actionEntry = ds_map_create();
//    ds_map_add(actionEntry, "command", commandName);
//    ds_map_add(actionEntry, "parameters", parameters);
    
//    // Add the action entry to the global action details
//    ds_map_add(global.actionDetails, name, actionEntry);
    
//    handleDebugMessage("Action '" + name + "' added successfully.", true);
    
//    // Save the action to the file
//    save_actions();
//}


Script: save_actions
File: save_actions.gml
Code:
function save_actions() {
    if (ds_map_size(global.actionDetails) == 0) {
        handleDebugMessage("No actions to save.", true);
        return;
    }
    
    var file = file_text_open_write("Actions.txt");
    var actionKey = ds_map_find_first(global.actionDetails);
    
    while (!is_undefined(actionKey)) {
        var actionData = ds_map_find_value(global.actionDetails, actionKey);
        var command = actionData[? "command"];
        var parameters = actionData[? "parameters"];
        
        var paramString = "";
        for (var i = 0; i < array_length(parameters); i++) {
            var param = parameters[i];
            if (is_string(param)) {
                paramString += "\"" + string_replace_all(param, "\"", "\\\"") + "\"";
            } else {
                paramString += string(param);
            }
            if (i < array_length(parameters) - 1) {
                paramString += ",";
            }
        }
        
        file_text_write_string(file, actionKey + "," + command + "," + paramString);
        file_text_writeln(file);
        actionKey = ds_map_find_next(global.actionDetails, actionKey);
    }
    
    file_text_close(file);
    handleDebugMessage("Actions saved successfully to Actions.txt.", true);
}

//old code

///// @function save_actions()
///// @description Saves the global.actionDetails to Actions.txt
//function save_actions() {
//    if (ds_map_size(global.actionDetails) == 0) {
//        handleDebugMessage("No actions to save.", true);
//        return;
//    }

//    var file = file_text_open_write("Actions.txt");
//    var actionKey = ds_map_find_first(global.actionDetails);

//    // Iterate over each action entry and save it in the desired format
//    while (actionKey != undefined) {
//        var actionData = ds_map_find_value(global.actionDetails, actionKey);
//        var command = actionData[? "command"];
//        var parameters = actionData[? "parameters"];

//        // Format the parameters correctly
//        var paramsString = "[ ";
//        for (var i = 0; i < array_length(parameters); i++) {
//            var param = parameters[i];

//            // Convert param to the appropriate data type string
//            if (is_real(param) || string_is_real(param)) {
//                paramsString += string(real(param));
//            } else if (is_string(param)) {
//                paramsString += "\"" + string_trim(param) + "\"";
//            }

//            if (i < array_length(parameters) - 1) {
//                paramsString += ", ";
//            }
//        }
//        paramsString += " ]";

//        file_text_write_string(file, actionKey + "," + command + "," + paramsString);
//        file_text_writeln(file);

//        actionKey = ds_map_find_next(global.actionDetails, actionKey);
//    }

//    file_text_close(file);
//    handleDebugMessage("Actions saved successfully to Actions.txt.", true);
//}







Script: save_actions
File: save_actions.yy
Code:
{
  "$GMScript":"v1",
  "%Name":"save_actions",
  "isCompatibility":false,
  "isDnD":false,
  "name":"save_actions",
  "parent":{
    "name":"Scripts",
    "path":"folders/Scripts.yy",
  },
  "resourceType":"GMScript",
  "resourceVersion":"2.0",
}

Script: scr_execute_action
File: scr_execute_action.gml
Code:
function scr_execute_action() {
    if (argument_count == 0) {
        handleDebugMessage("Error: No action name provided for execute_action", true);
        return;
    }

    var actionName = argument[0];
    if (ds_map_exists(global.actionDetails, actionName)) {
        var actionData = ds_map_find_value(global.actionDetails, actionName);
        if (!ds_map_exists(actionData, "command") || !ds_map_exists(actionData, "parameters")) {
            handleDebugMessage("Error: Invalid action format for '" + actionName + "'.", true);
            return;
        }
        
        var command = ds_map_find_value(actionData, "command");
        var params = ds_map_find_value(actionData, "parameters");
        
        // Construct the command string and execute it
        var commandString = command + "(";
        for (var i = 0; i < array_length(params); i++) {
            if (is_string(params[i])) {
                commandString += "\"" + string_replace_all(params[i], "\"", "\\\"") + "\"";
            } else {
                commandString += string(params[i]);
            }
            if (i < array_length(params) - 1) {
                commandString += ", ";
            }
        }
        commandString += ")";
        
        handleDebugMessage("Executing action: " + commandString, true);
        execute_command(commandString);
    } else {
        handleDebugMessage("Action '" + actionName + "' not found.", true);
    }
}













Script: scr_execute_action
File: scr_execute_action.yy
Code:
{
  "$GMScript":"v1",
  "%Name":"scr_execute_action",
  "isCompatibility":false,
  "isDnD":false,
  "name":"scr_execute_action",
  "parent":{
    "name":"Scripts",
    "path":"folders/Scripts.yy",
  },
  "resourceType":"GMScript",
  "resourceVersion":"2.0",
}

Script: handleDebugMessage
File: handleDebugMessage.gml
Code:
/// @function handleDebugMessage(msg, isDebug)
/// @description Logs messages to the debug console and files, and manages chat display
/// @param {string} msg - The message to log
/// @param {bool} isDebug - True if this is a debug message, false for essential messages
function handleDebugMessage(msg, isDebug) {
    var safeMsg = is_string(msg) ? msg : "Undefined message content";
    var currentDate = date_current_datetime();
    var formattedDate = date_date_string(currentDate);
    var formattedTime = date_time_string(currentDate);
    var logMsg = formattedDate + " " + formattedTime + ": " + safeMsg + "\n";

    show_debug_message("Date: " + formattedDate + " Time: " + formattedTime + " Msg: " + safeMsg);

    // Function to handle file logging
    function logToFile(filePath, message) {
        var file;
        if (file_exists(filePath)) {
            file = file_text_open_append(filePath);
        } else {
            file = file_text_open_write(filePath);
        }
        file_text_write_string(file, message);
        file_text_close(file);
    }

    logToFile(working_directory + global.sessionLogFileName, logMsg);
    logToFile(working_directory + global.masterLogFileName, logMsg);

    // Update the chat system and possibly calculate WPM
    if (isDebug && global.showDebugMessages) {
        if (ds_list_size(global.debugMessages) >= global.maximumMessages) {
            ds_list_delete(global.debugMessages, 0); // Keep the latest messages
        }
        ds_list_add(global.debugMessages, safeMsg);

        // Before drawing chat messages, ensure messages is a valid ds_list
        if (!ds_exists(global.debugMessages, ds_type_list)) {
            show_debug_message("Error: debugMessages is not a valid ds_list.");
            return;
        }

        var totalLines = drawChatMessages(global.debugMessages, 990, 0, global.max_visible_lines, .5, false, global.c_chat2, global.c_chat1);
        if (totalLines - obj_Client.scrollIndex > global.max_visible_lines) {
            var totalLines_inRecentMessage = is_string(msg) ? countLinesInString(msg) : 1;
            obj_Client.scrollIndex = totalLines; // Scroll to bottom when new message
            obj_Client.scrollIndex -= (clamp(totalLines_inRecentMessage - 1, 0, 999999)); // Scroll back up number of lines in newest message (-1)
        }
        if (obj_Client.scrollIndex > totalLines) {
            // Clamp scroll
            obj_Client.scrollIndex = clamp(totalLines, 0, 99999);
        }
        draw_set_font(obj_Client.fnt_chat);
        global.longestmessage = updateLongestMessage(global.debugMessages);
    }

    // Create a chat bubble when no command is entered
    if (isDebug = 1) and !(string_char_at(safeMsg,0) = "/") {
        global.bubble_send_to_log = 0; // Don't send message to chat log
        var cleanMsg = string_remove_between(safeMsg, "[", "]");
        cleanMsg = string_replace_all(cleanMsg, "\n", " ");  // Remove existing line breaks
		if global.message_is_bubble=1 {
        scr_chat_bubble(cleanMsg, "yeancat");
		}
        global.bubble_send_to_log = 1; // Reset the variable
    }

    // WPM Calculation Logic Integration
    if (isDebug) {  // Assuming non-debug messages are chat messages
        var wordCount = string_word_count(safeMsg);
        var messageDetails = [currentDate, wordCount];
        ds_list_add(global.chatLogs, messageDetails);
        updateWPM();  // This would be a new function to handle WPM updates based on chatLogs
    }
}






///// @function handleDebugMessage(msg, isDebug)
///// @param {string} msg - The message to log
///// @param {bool} isDebug - True if this is a debug message, false for essential messages
//function handleDebugMessage(msg, isDebug) {
//    var safeMsg = is_string(msg) ? msg : "Undefined message content";
//    var currentDate = date_current_datetime();
//    var formattedDate = date_date_string(currentDate);
//    var formattedTime = date_time_string(currentDate);
//    var logMsg = formattedDate + " " + formattedTime + ": " + safeMsg + "\n";

//    show_debug_message("Date: " + formattedDate + " Time: " + formattedTime + " Msg: " + safeMsg);

//    // Function to handle file logging
//    function logToFile(filePath, message) {
//        var file;
//        if (file_exists(filePath)) {
//            file = file_text_open_append(filePath);
//        } else {
//            file = file_text_open_write(filePath);
//        }
//        file_text_write_string(file, message);
//        file_text_close(file);
//    }

//    logToFile(working_directory + global.sessionLogFileName, logMsg);
//    logToFile(working_directory + global.masterLogFileName, logMsg);

//    if (isDebug && global.showDebugMessages) {
//        if (ds_list_size(obj_Client.debugMessages) >= global.maximumMessages) {
//            ds_list_delete(obj_Client.debugMessages, 0); // Keep the latest messages
//        }
//        ds_list_add(debugMessages, safeMsg);
//		if show_chatbox and ds_exists(debugMessages, ds_type_list) {
//			// Before calling drawChatMessages, ensure messages is a ds_list
//if (!ds_exists(debugMessages, ds_type_list)) {
//    show_debug_message("Error: debugMessages is not a valid ds_list.");
//    return;
//}

//var totalLines = drawChatMessages(debugMessages, 990, 0, global.max_visible_lines, .5, false,global.c_chat2,global.c_chat1);
//		if (totalLines-obj_Client.scrollIndex>global.max_visible_lines) {
//			var totalLines_inRecentMessage = 1
//			if is_string(msg) {
//			totalLines_inRecentMessage = countLinesInString(msg)
//			}
//			obj_Client.scrollIndex = totalLines //scroll to bottom when new message
//            obj_Client.scrollIndex -= (clamp(totalLines_inRecentMessage-1,0,999999)); //scroll back up number of lines in newest message (-1)
//        }
//        if (obj_Client.scrollIndex>totalLines ) {
//			//clamp scroll
//            obj_Client.scrollIndex = clamp(totalLines,0,99999);
//        }
//        draw_set_font(obj_Client.fnt_chat);
//        global.longestmessage = updateLongestMessage(debugMessages);	
//		}
//    }
//}



Script: handleDebugMessage
File: handleDebugMessage.yy
Code:
{
  "$GMScript":"v1",
  "%Name":"handleDebugMessage",
  "isCompatibility":false,
  "isDnD":false,
  "name":"handleDebugMessage",
  "parent":{
    "name":"Scripts",
    "path":"folders/Scripts.yy",
  },
  "resourceType":"GMScript",
  "resourceVersion":"2.0",
}

Script: execute_command
File: execute_command.gml
Code:
function execute_command(command) {
    handleDebugMessage("Executing command: " + command, true);

    command = string_trim(command);
    if (command == "") {
        handleDebugMessage("Error: Empty command", true);
        return;
    }

    if (string_char_at(command, 1) == "/") {
        command = string_delete(command, 1, 1);
    }
    handleDebugMessage("Processed command: " + command, true);

    var commandName = "";
    var parameters = [];

    if (string_pos("add_action(", command) == 1) {
        var startParen = string_pos("(", command);
        var endParen = string_last_pos(")", command);
        if (startParen > 0 && endParen > startParen) {
            var argsString = string_copy(command, startParen + 1, endParen - startParen - 1);
            var args = string_split(argsString, ",");
            if (array_length(args) >= 3) {
                var actionName = string_trim(args[0]);
                var actionCommand = string_trim(args[1]);
                var actionParams = string_join_ext(",", args, 2);
                actionParams = string_replace_all(actionParams, "[", "");
                actionParams = string_replace_all(actionParams, "]", "");
                var paramArray = string_split(actionParams, ",");
                for (var i = 0; i < array_length(paramArray); i++) {
                    paramArray[i] = string_trim(paramArray[i]);
                }
                scr_add_action(actionName, actionCommand, paramArray);
                return;
            }
        }
    } else if (string_pos("execute_action(", command) == 1) {
        var actionName = string_replace(command, "execute_action(", "");
        actionName = string_replace(actionName, ")", "");
        actionName = string_trim(actionName);
        
        if (ds_map_exists(global.actionDetails, actionName)) {
            var actionEntry = ds_map_find_value(global.actionDetails, actionName);
            commandName = ds_map_find_value(actionEntry, "command");
            parameters = ds_map_find_value(actionEntry, "parameters");
        } else {
            handleDebugMessage("Action '" + actionName + "' not found.", true);
            return;
        }
    } else {
        var startParenthesis = string_pos("(", command);
        var endParenthesis = string_pos(")", command);
        
        if (startParenthesis > 0 && endParenthesis > startParenthesis) {
            commandName = string_trim(string_copy(command, 1, startParenthesis - 1));
            var paramString = string_copy(command, startParenthesis + 1, endParenthesis - startParenthesis - 1);
            parameters = string_split(paramString, ",");
            
            for (var i = 0; i < array_length(parameters); i++) {
                var param = string_trim(parameters[i]);
                if (string_char_at(param, 1) == "\"" && string_char_at(param, string_length(param)) == "\"") {
                    param = string_copy(param, 2, string_length(param) - 2);
                } else if (string_digits(param) == param) {
                    param = real(param);
                }
                parameters[i] = param;
            }

            if (commandName == "chat_bubble") {
                var text = parameters[0];
                var owner = parameters[1];
                var choices = [];
                
                if (array_length(parameters) > 2 && is_array(parameters[2])) {
                    var choicesArray = parameters[2];
                    for (var i = 0; i < array_length(choicesArray); i++) {
                        if (is_array(choicesArray[i]) && array_length(choicesArray[i]) == 2) {
                            array_push(choices, choicesArray[i]);
                        }
                    }
                }
                
                scr_chat_bubble(text, owner, choices);
                return;
            }
        } else {
            commandName = command;
        }
    }

    var scriptName = "scr_" + commandName;
    
    if (script_exists(asset_get_index(scriptName))) {
        script_execute_ext(asset_get_index(scriptName), parameters);
    } else {
        handleDebugMessage("Script not found for command: " + commandName, true);
    }
}

Script: execute_command
File: execute_command.yy
Code:
{
  "$GMScript":"v1",
  "%Name":"execute_command",
  "isCompatibility":false,
  "isDnD":false,
  "name":"execute_command",
  "parent":{
    "name":"Scripts",
    "path":"folders/Scripts.yy",
  },
  "resourceType":"GMScript",
  "resourceVersion":"2.0",
}

Script: update_chat_input_visuals
File: update_chat_input_visuals.gml
Code:
function update_chat_input_visuals() {
    var inputText = string_trim(global.commandBuffer);
    var firstChar = string_char_at(inputText, 1);
    
    if (inputText == "") {
        global.textColor = global.defaultTextColor;
        return;
    }
    
    if (firstChar != "/") {
        global.textColor = global.defaultTextColor;
        return;
    }
    
    if (string_length(inputText) == 1) {
        global.textColor = c_white;
        return;
    }
    
    var command = string_delete(inputText, 1, 1);
    var hasPermission = check_permission_command(command);
    var isZeroArgCommand = ds_map_exists(global.commandDetails, command) && !ds_map_exists(global.commandDetails, command + "(");
    
    if (isZeroArgCommand) {
        global.textColor = hasPermission ? c_lime : c_red;
    } else if (ds_map_exists(global.commandDetails, command + "(")) {
        var openParenPos = string_pos("(", inputText);
        if (openParenPos == 0) {
            global.textColor = c_aqua;
        } else {
            var closeParenPos = string_pos(")", inputText);
            if (closeParenPos > openParenPos) {
                global.textColor = hasPermission ? c_lime : c_red;
            } else {
                global.textColor = c_aqua;
            }
        }
    } else {
        global.textColor = c_pink;
    }
}
//// Function to update the color of the chatbox text based on command input
//function update_chat_input_visuals() {
//    var inputText = string_trim(global.commandBuffer);
//    var firstChar = string_char_at(inputText, 1);

//    if (inputText == "") {
//        global.textColor = global.defaultTextColor;
//    } else if (firstChar == "/") {
//        if (string_length(inputText) == 1) {
//            global.textColor = c_white; // Initial '/' is white
//        } else {
//            var commandEnd = string_pos(" ", inputText);
//            if (commandEnd == 0) commandEnd = string_length(inputText);
//            var argsStart = string_pos("(", inputText);
//            var argsEnd = string_pos(")", inputText);

//            // Adjust the commandEnd if "(" is part of the command
//            if (argsStart > 0 && argsStart < commandEnd) {
//                commandEnd = argsStart;
//            }
//            var command = string_copy(inputText, 2, commandEnd - 1);
//            var hasPermission = check_permission_command(command);

//            // Ensure the command is valid before changing the color based on arguments
//            if (ds_map_exists(global.commandDetails, command)) {
//                // Call handleCommandWithArgs to manage the text color based on command validation
//                global.textColor = handleCommandWithArgs(argsStart, argsEnd, command, hasPermission);
//            } else {
//                // If the command is not valid, do not turn it aqua just for typing '('
//                global.textColor = c_pink;  // Set to pink as the command is not recognized
//            }
//        }
//    } else {
//        global.textColor = global.defaultTextColor;
//    }
//}



//// Function to update the color of the chatbox text based on command input
//function update_chat_input_visuals() {
//    var inputText = string_trim(global.commandBuffer);
//    var firstChar = string_char_at(inputText, 1);

//    if (inputText == "") {
//        global.textColor = global.defaultTextColor;
//    } else if (firstChar == "/") {
//        if (string_length(inputText) == 1) {
//            global.textColor = c_white; // Initial '/' is white
//        } else {
//            var commandEnd = string_pos(" ", inputText);
//            if (commandEnd == 0) commandEnd = string_length(inputText);
//            var argsStart = string_pos("(", inputText);
//            var argsEnd = string_pos(")", inputText);

//            // Adjust the commandEnd if "(" is part of the command
//            if (argsStart > 0 && argsStart < commandEnd) {
//                commandEnd = argsStart;
//            }
//            var command = string_copy(inputText, 2, commandEnd - 1);
//            var hasPermission = check_permission_command(command);

//            // Ensure the command is valid before changing the color based on arguments
//            if (ds_map_exists(global.commandDetails, command)) {
//                // Extract and validate array arguments
//                var argsString = string_copy(inputText, argsStart + 1, argsEnd - argsStart - 1);
//                var isValidArray = true;

//                if (string_pos("[", argsString) > 0 && string_pos("]", argsString) > 0) {
//                    var arrayStart = string_pos("[", argsString);
//                    var arrayEnd = string_pos("]", argsString);
//                    var arrayString = string_copy(argsString, arrayStart + 1, arrayEnd - arrayStart - 1);
//                    var arrayParams = string_split(arrayString, ",");

//                    // Check if each element is a valid parameter
//                    for (var i = 0; i < array_length(arrayParams); i++) {
//                        if (string_trim(arrayParams[i]) == "") {
//                            isValidArray = false;
//                            break;
//                        }
//                    }
//                }

//                // Check if command parameters are valid
//                if (isValidArray) {
//                    global.textColor = handleCommandWithArgs(argsStart, argsEnd, command, hasPermission);
//                } else {
//                    global.textColor = c_pink; // Set to pink if the array is invalid
//                }
//            } else {
//                global.textColor = c_pink;  // Set to pink if the command is not recognized
//            }
//        }
//    } else {
//        global.textColor = global.defaultTextColor;
//    }
//}



//// Function to update the color of the chatbox text based on command input
//function update_chat_input_visuals() {
//    var inputText = string_trim(global.commandBuffer);
//    var firstChar = string_char_at(inputText, 1);

//    if (inputText == "") {
//        global.textColor = global.defaultTextColor;
//    } else if (firstChar == "/") {
//        if (string_length(inputText) == 1) {
//            global.textColor = c_white; // Initial '/' is white
//        } else {
//            var commandEnd = string_pos(" ", inputText);
//            if (commandEnd == 0) commandEnd = string_length(inputText);
//            var argsStart = string_pos("(", inputText);
//            var argsEnd = string_pos(")", inputText);

//            // Adjust the commandEnd if "(" is part of the command
//            if (argsStart > 0 && argsStart < commandEnd) {
//                commandEnd = argsStart;
//            }
//            var command = string_copy(inputText, 2, commandEnd - 1);
//            var hasPermission = check_permission_command(command);

//            // Ensure the command is valid before changing the color based on arguments
//            if (ds_map_exists(global.commandDetails, command)) {
//                // Extract and validate array arguments
//                var argsString = string_copy(inputText, argsStart + 1, argsEnd - argsStart - 1);
//                var isValidArray = true;

//                if (string_pos("[", argsString) > 0 && string_pos("]", argsString) > 0) {
//                    var arrayStart = string_pos("[", argsString);
//                    var arrayEnd = string_pos("]", argsString);
//                    var arrayString = string_copy(argsString, arrayStart + 1, arrayEnd - arrayStart - 1);
//                    var arrayParams = string_split(arrayString, ",");

//                    // Check if each element is a valid parameter
//                    for (var i = 0; i < array_length(arrayParams); i++) {
//                        if (string_trim(arrayParams[i]) == "") {
//                            isValidArray = false;
//                            break;
//                        }
//                    }
//                }

//                // Call `handleCommandWithArgs` to manage the text color based on command validation
//                if (isValidArray) {
//                    global.textColor = handleCommandWithArgs(argsStart, argsEnd, command, hasPermission);
//                } else {
//                    global.textColor = c_pink; // Set to pink if the array is invalid
//                }
//            } else {
//                // If the command is not valid, do not turn it aqua just for typing '('
//                global.textColor = c_pink;  // Set to pink as the command is not recognized
//            }
//        }
//    } else {
//        global.textColor = global.defaultTextColor;
//    }
//}










Script: update_chat_input_visuals
File: update_chat_input_visuals.yy
Code:
{
  "$GMScript":"v1",
  "%Name":"update_chat_input_visuals",
  "isCompatibility":false,
  "isDnD":false,
  "name":"update_chat_input_visuals",
  "parent":{
    "name":"Scripts",
    "path":"folders/Scripts.yy",
  },
  "resourceType":"GMScript",
  "resourceVersion":"2.0",
}

Script: parse_data_types
File: parse_data_types.yy
Code:
{
  "$GMScript":"v1",
  "%Name":"parse_data_types",
  "isCompatibility":false,
  "isDnD":false,
  "name":"parse_data_types",
  "parent":{
    "name":"Scripts",
    "path":"folders/Scripts.yy",
  },
  "resourceType":"GMScript",
  "resourceVersion":"2.0",
}

Script: parse_data_types
File: parse_data_types.gml
Code:
/// @function parse_data_types(argumentsArray)
/// @description Converts strings in an array to appropriate data types
function parse_data_types(argumentsArray) {
    var parsedArray = [];
    for (var i = 0; i < array_length(argumentsArray); i++) {
        var arg = string_trim(argumentsArray[i]);

        // Parse as array
        if (string_char_at(arg, 1) == "[" && string_char_at(arg, string_length(arg)) == "]") {
            parsedArray[i] = parse_data_types(parse_arguments(string_copy(arg, 2, string_length(arg) - 2)));
        }
        // Parse as real
        else if (string_is_real(arg)) {
            parsedArray[i] = real(arg);
        }
        // Treat as a string
        else {
            parsedArray[i] = arg;
        }
    }
    return parsedArray;
}

//old code
//// Function to convert string arguments into their appropriate data types
//function parse_data_types(arguments) {
//    var parsedArguments = [];
//    var currentArg;

//    for (var i = 0; i < array_length(arguments); i++) {
//        currentArg = string_trim(arguments[i]);

//        // Detect if the argument is an array
//        if (string_char_at(currentArg, 1) == "[" && string_char_at(currentArg, string_length(currentArg)) == "]") {
//            // Remove brackets and split the inner array by commas
//            currentArg = string_copy(currentArg, 2, string_length(currentArg) - 2);
//            var innerArray = parse_arguments(currentArg);
//            parsedArguments[array_length(parsedArguments)] = parse_data_types(innerArray);
//        }
//        // Detect if the argument is a real number
//        else if (is_real(currentArg) || string_is_real(currentArg)) {
//            parsedArguments[array_length(parsedArguments)] = real(currentArg);
//        }
//        // Otherwise, it's a string
//        else {
//            parsedArguments[array_length(parsedArguments)] = currentArg;
//        }
//    }

//    return parsedArguments;
//}


Script: parse_arguments
File: parse_arguments.yy
Code:
{
  "$GMScript":"v1",
  "%Name":"parse_arguments",
  "isCompatibility":false,
  "isDnD":false,
  "name":"parse_arguments",
  "parent":{
    "name":"Scripts",
    "path":"folders/Scripts.yy",
  },
  "resourceType":"GMScript",
  "resourceVersion":"2.0",
}

Script: parse_arguments
File: parse_arguments.gml
Code:
/// @function parse_arguments(argsString)
/// @description Parses a string containing command arguments into an array
function parse_arguments(argsString) {
    var params = [];
    var inString = false;
    var inArray = false;
    var currentParam = "";
    var currentChar;

    for (var i = 1; i <= string_length(argsString); i++) {
        currentChar = string_char_at(argsString, i);

        if (currentChar == "\"" && !inArray) {
            inString = !inString; // Toggle string mode
            currentParam += currentChar;
        } else if (currentChar == "[" && !inString) {
            inArray = true;
            currentParam += currentChar;
        } else if (currentChar == "]" && !inString) {
            inArray = false;
            currentParam += currentChar;
        } else if (currentChar == "," && !inString && !inArray) {
            params[array_length(params)] = string_trim(currentParam);
            currentParam = "";
        } else {
            currentParam += currentChar;
        }
    }

    if (string_length(currentParam) > 0) {
        // Remove surrounding quotes if the entire parameter is a quoted string
        if (string_length(currentParam) >= 2 && string_char_at(currentParam, 1) == "\"" && string_char_at(currentParam, string_length(currentParam)) == "\"") {
            currentParam = string_delete(currentParam, string_length(currentParam), 1);
            currentParam = string_delete(currentParam, 1, 1);
        }

        params[array_length(params)] = string_trim(currentParam);
    }

    return params;
}

Script: scr_save_game
File: scr_save_game.yy
Code:
{
  "$GMScript":"v1",
  "%Name":"scr_save_game",
  "isCompatibility":false,
  "isDnD":false,
  "name":"scr_save_game",
  "parent":{
    "name":"Scripts",
    "path":"folders/Scripts.yy",
  },
  "resourceType":"GMScript",
  "resourceVersion":"2.0",
}

Script: scr_save_game
File: scr_save_game.gml
Code:
// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function scr_save_game() {
	//save the game
	//make sure player exists

	// create save data structure
	var save_data = ds_map_create();
	save_data[? "password"] = master.password
	save_data[? "dondadollars"] = master.dondadollars
	save_data[? "dondaunlocked"] = master.dondaunlocked
	save_data[? "upgradetot"] = master.upgradetot
	save_data[? "damagenumbers"] = master.damagenumbers
	save_data[? "moneynumbers"] = master.moneynumbers
	save_data[? "muteall"] = master.muteall
	save_data[? "specialfx"] = master.specialfx
	save_data[? "playtime"] = master.playtime
	save_data[? "overallkills"] = master.overallkills
	save_data[? "maxweapons"] = master.maxweapons
	//options
save_data[? "playername"] = master.playername
save_data[? "mastervol"]=master.mastervol
save_data[? "mastervolset"]=master.mastervolset
save_data[? "uiscale"]=master.uiscale
save_data[? "musicvol"]=master.musicvol
save_data[? "sfxvol"]=master.sfxvol
save_data[? "dialougevol"]=master.dialougevol
save_data[? "uivol"]=master.uivol

save_data[? "version"]=master.version
	
	for (i=0; i<array_length(master.weapons); i ++) {
		save_data[? "wepd"+string(i)] =  master.weapons[i,3]
		save_data[? "wepu"+string(i)] =  master.weapons[i,13]
		save_data[? "wepsp"+string(i)] =  master.weapons[i,15]
	}
	
	for (i=0; i<array_length(master.passives); i ++) {
		save_data[? "pasd"+string(i)] =  master.passives[i,2]
		save_data[? "pasu"+string(i)] =  master.passives[i,7]
		save_data[? "passp"+string(i)] =  master.passives[i,9]
	}
	
	for (i=0; i<array_length(master.notice); i ++) {
		save_data[? "noticea"+string(i)] =  master.notice[i,0]
		save_data[? "noticeb"+string(i)] =  master.notice[i,1]
		save_data[? "noticec"+string(i)] =  master.notice[i,2]
		save_data[? "noticed"+string(i)] =  master.notice[i,3]
	}
	for (i=0; i<array_length(master.visitedplanets); i ++) {
		save_data[? "vplan"+string(i)] =  master.visitedplanets[i]
	}
	for (i=0; i<array_length(master.allkills); i++) {
		save_data[? "allkills"+string(i)] =  master.allkills[i]
	}
	save_data[? "recordkill"] =  master.recordkill
	save_data[? "recordtime"] =  master.recordtime
	save_data[? "recordlevel"] =  master.recordlevel
	
	for (i=0; i<array_length(master.charrecordkill); i++) {
		save_data[? "charrecordkill"+string(i)] =  master.charrecordkill[i]
	}
	for (i=0; i<array_length(master.charrecordtime); i++) {
		save_data[? "charrecordtime"+string(i)] =  master.charrecordtime[i]
	}
	for (i=0; i<array_length(master.charrecordlevel); i++) {
		save_data[? "charrecordlevel"+string(i)] =  master.charrecordlevel[i]
	}
	for (i=0; i<array_length(master.chartotalkill); i++) {
		save_data[? "chartotalkill"+string(i)] =  master.chartotalkill[i]
	}
	save_data[? "shownmessage"] =  master.shownmessage
	save_data[? "email"] =  master.email
	
//	//character level record
//if master.charrecordlevel[master.charselect]<master.level {
//	master.charrecordlevel[master.charselect]=master.level
//}
////character kill record
//if master.charrecordkill[master.charselect]<master.killcount {
//	master.charrecordkill[master.charselect]=master.killcount
//}
////character time record
//if master.charrecordtime[master.charselect]<master.ti {
//	master.charrecordtime[master.charselect]=master.ti
//}

	for (i=0; i<array_length(master.weapons); i++) {
	save_data[? "diswep"+string(i)] = master.weapons[i,3]
	save_data[? "lockwep"+string(i)] = master.weapons[i,13]
	}
	for (i=0; i<array_length(master.items); i++) {
	save_data[? "disite"+string(i)] = master.items[i,3]
	}
	for (i=0; i<array_length(master.passives); i++) {
	save_data[? "dispas"+string(i)] = master.dispas[i]
	save_data[? "lockpas"+string(i)] = master.lockpas[i]
	}
	save_data[? "legacyversion"] = master.legacyversion
	if master.playerid>0 {
	save_data[? "playerid"] = master.playerid
	save_data[? "playernumber"] =master.playernumber
	} else {
	save_data[? "playerid"] = -1
	save_data[? "playernumber"] = -1
	}
	//unlocked //name, //level,//xp,//xpto,//Lyricism (Damage), //Rhythm (AT rate), //Flow (Movement), //Swag (Money Value), variation (evolution?,
for (i=0; i<array_length(master.characters); i ++) {
	save_data[? "charunlocked"+string(i)] =  master.characters[i,0]
	save_data[? "charname"+string(i)] =  master.characters[i,1]
	save_data[? "charlevel"+string(i)] =  master.characters[i,2]
	save_data[? "charxp"+string(i)] =  master.characters[i,3]
	save_data[? "charxpto"+string(i)] =  master.characters[i,4]
	save_data[? "charlyricism"+string(i)] =  master.characters[i,5]
	save_data[? "charrhythm"+string(i)] =  master.characters[i,6]
	save_data[? "charflow"+string(i)] =  master.characters[i,7]
	save_data[? "charswag"+string(i)] =  master.characters[i,8]
	save_data[? "charvariation"+string(i)] =  master.characters[i,9]
}
	
	if master.characters[master.charselect,0]>0 {
	save_data[? "charselect"] = master.charselect
	} else {
		save_data[? "charselect"] = 0
	}
	{
		for (i=0; i<array_length(master.itemsload); i ++) {
		save_data[? "itemsload"+string(i)]=master.itemsload[i,1]
		}
		save_data[? "hidecompletedunlocks"]=master.hidecompletedunlocks
		save_data[? "hidelockedcol"]=master.hidelockedcol
//tasks
//what it unlocks, 1requirement,2progress,3completed?,4image,5visible?,6rewardtype, 7collectionid (if item), 8 seen, cumulative?
		for (i=0; i<array_length(master.tasks); i ++) {
		save_data[? "tasksprogress"+string(i)]=master.tasks[i,2]
		save_data[? "taskscompleted"+string(i)]=master.tasks[i,3]
		save_data[? "tasksvisible"+string(i)]=master.tasks[i,5]
		save_data[? "tasksseen"+string(i)]=master.tasks[i,8]
		}
		

//achievements
//name, 1requirement, 2achieved?, 3visible?, 4rarity, 5image, 6seen, 7 progress
		for (i=0; i<array_length(master.achievements); i ++) {
		save_data[? "achievementsachieved"+string(i)]=master.achievements[i,2]
		save_data[? "achievementsvisible"+string(i)]=master.achievements[i,3]
		save_data[? "achievementsseen"+string(i)]=master.achievements[i,6]
		save_data[? "achievementsprogress"+string(i)]=master.achievements[i,7]
		}
		

//collectibles
//name,1state, 2amount collected, 3amount til next,4enabled,5upgradeprice,6level,7seen,i8mage, 9can disable, 10item id
//state: 0 =locked, 1=unlocked, 2=obtained.
		for (i=0; i<array_length(master.collection); i ++) {
		save_data[? "collectionstate"+string(i)]=master.collection[i,1]
		save_data[? "collectionamount"+string(i)]=master.collection[i,2]
		save_data[? "collectionenabled"+string(i)]=master.collection[i,4]
		save_data[? "collectionlevel"+string(i)]=master.collection[i,6]
		save_data[? "collectionseen"+string(i)]=master.collection[i,7]
		save_data[? "collectioninshop"+string(i)]=master.collection[i,19]
		}
		


//shop
//name, 1type, 2bought?, 3price, 4collectionid, 5seen, 6image,id
		for (i=0; i<array_length(master.shop); i ++) {
		save_data[? "shopbought"+string(i)]=master.shop[i,2]
		save_data[? "shopseen"+string(i)]=master.shop[i,5]
		}
		
		if master.tutorial>2 {
		save_data[? "tutorial"]=master.tutorial
		} else {
			save_data[? "tutorial"]=0
		}
save_data[? "invisible"]=master.invisible
save_data[? "disconnected"]=master.disconnected//opt out of online play
save_data[? "banned_"]=master.banned//0=no, -1=permaban, 1-inf =how many days.
save_data[? "date_banned"]=master.datebanned
save_data[? "times_banned"]=master.timesbanned
save_data[? "last_online"]=master.last_time_online
save_data[? "last_version_played"]=master.last_version_played
for (var i=0; i<array_length(master.messages); i ++) {
	save_data[? "message_from_"+string(i)]=master.messages[i,0]
	save_data[? "message_"+string(i)]=master.messages[i,1]
	save_data[? "message_read"+string(i)]=master.messages[i,2]
	save_data[? "message_date"+string(i)]=master.messages[i,3]
//[Player From,Message,Read? (-1=N/A 0=not read, 1=notified, 2=read
}
save_data[? "friend_count"]=master.friend_count
for (var i=0; i<array_length(master.friends_list); i ++) {
	save_data[? "friends_list_name_"+string(i)]=master.friends_list[i,0]
	save_data[? "friends_list_id"+string(i)]=master.friends_list[i,1]
	save_data[? "friends_list_date"+string(i)]=master.friends_list[i,2]
	save_data[? "friends_list_best"+string(i)]=master.friends_list[i,3]
//[name, id, date became friends, best friends?]
}

save_data[? "game_progress"]=master.game_progress
for (var i=0; i<array_length(master.planet_log); i ++) {
	save_data[? "planet_log"+string(i)]=master.planet_log[i]
} //0=not visited 1=visited 2=completed
save_data[? "selected_planet"]=master.selectedstage
save_data[? "tasks_complete"]=master.tasks_completed
save_data[? "collect_unlocked"]=master.collectibles_unlocked
save_data[? "dollar_array_have"]=master.dollar_array[0]
save_data[? "dollar_array_spent"]=master.dollar_array[1]
save_data[? "dollar_array_earned"]=master.dollar_array[2]
//[have, spent, earned]
save_data[? "enemy_kc"]=master.enemy_killcount
save_data[? "boss_kc"]=master.boss_killcount
save_data[? "level_end_kc"]=master.levelender_killcount
for (var i=0; i<array_length(master.ind_boss_kills); i ++) {
save_data[? "ind_boss_kills"+string(i)]=master.ind_boss_kills[i]
}
for (var i=0; i<array_length(master.character_levels); i ++) {
	save_data[? "character_levels"+string(i)]=master.character_levels[i]
} //[0-50, 0-50, ..14 times]
save_data[? "name_text_font"]=master.name_text[0]
save_data[? "name_text_color"]=master.name_text[1]
save_data[? "name_text_ocolor"]=master.name_text[2]

//FONTS //0name, 1asset name, 2unlocked?
for (var i=0; i<array_length(master.font_array); i ++) {
save_data[? "font_array"+string(i)]=master.font_array[i,2]
}

save_data[? "permissions"] = master.permissions

//[font = 0;color = 0;outline color]
save_data[? "character_id"]=master.character_id
for (var i=0; i<array_length(master.custom_look); i ++) {
	save_data[? "custom_look"+string(i)]=master.custom_look[i]
}//[Head, Variant, Body, Variant, Trail, Variant, Hat, Variant]
for (var i=0; i<array_length(master.theme_song); i ++) {
	save_data[? "theme_song"+string(i)]=master.theme_song[i]
} //(Theme 19 = custom, bass, drum, keys, vocals,remix?)
save_data[? "login_message"]=master.login_message
for (var i=0; i<array_length(master.clan_info); i ++) {
	save_data[? "clan_info_id"]=master.clan_info[0]
	save_data[? "clan_info_name"]=master.clan_info[1]
	save_data[? "clan_info_rank"]=master.clan_info[2]
	save_data[? "clan_info_rankin"]=master.clan_info[3]
	save_data[? "clan_info_date_joined"]=master.clan_info[4]
	save_data[? "clan_info_dollars"]=master.clan_info[5]
	save_data[? "clan_info_tasks"]=master.clan_info[6]
	save_data[? "clan_info_recruited"]=master.clan_info[7]
	save_data[? "clan_info_position"]=master.clan_info[8]
	save_data[? "clan_info_recruitedby"]=master.clan_info[9]
}
//[Clan ID, 1Clan Name, 2Clan Rank, 3Rank in Clan, 4Date Joined, 
//5Dollars Donated, 6Tasks Completed, 7Members Recruited, 8Position in Clan, 9recruited by]





	}

handleDebugMessage("Saved Game", true);

var save_string = json_encode(save_data);
	ds_map_destroy(save_data);
	save_string = base64_encode(save_string);

	var file = file_text_open_write(working_directory + "yeancatsave.txt");
	file_text_write_string(file, save_string);
	file_text_close(file);
}




Script: scr_load_game
File: scr_load_game.gml
Code:
// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function scr_load_game() {
	//check for crystal quest sav
	if file_exists("/Library/Application Support/com.yoyogames.macyoyorunner/"+"CrystalQuestSave.txt") {
		//game_end()
	}
	
	//scr_load_game
	if file_exists(working_directory+"yeancatsave.txt") {
	var file = file_text_open_read(working_directory+"yeancatsave.txt");
	var save_string = file_text_read_string(file);
	file_text_close(file);
	save_string = base64_decode(save_string);
	var save_data = json_decode(save_string);
	
	if instance_exists(master) {
	with (master) {
	dondadollars = save_data[? "dondadollars"];
	dondadollarsprevious= save_data[? "dondadollars"];
	upgradetot = save_data[? "upgradetot"]
	dondaunlocked = save_data[? "dondaunlocked"]
	damagenumbers = save_data[? "damagenumbers"]; 
	moneynumbers = save_data[? "moneynumbers"];
	muteall = save_data[? "muteall"];
	specialfx = save_data[? "specialfx"];
		//options
	playtime=save_data[? "playtime"];
	overallkills=save_data[? "overallkills"]


mastervol=save_data[? "mastervol"]
mastervolset=save_data[? "mastervolset"]
uiscale=save_data[? "uiscale"]
musicvol=save_data[? "musicvol"]
sfxvol=save_data[? "sfxvol"]
dialougevol=save_data[? "dialougevol"]
uivol=save_data[? "uivol"]

	for (i=0; i<array_length(master.weapons); i ++) {
		weapons[i,3] = save_data[? "wepd"+string(i)]
		weapons[i,13] = save_data[? "wepu"+string(i)]
		weapons[i,15] = save_data[? "wepsp"+string(i)]
	}
				for (i=0; i<array_length(master.weapons); i++) {
	master.weapons[i,3] = save_data[? "diswep"+string(i)]
	master.weapons[i,13] = save_data[? "lockwep"+string(i)]
	master.diswep[i] = save_data[? "diswep"+string(i)]
	master.lockwep[i] = save_data[? "lockwep"+string(i)]
	
	}

version=save_data[? "version"]

with (master) {
if version="0.5.0" or version = "0.6.0" or version = "Alpha 1.0.0" {
	maxweapons=2
	maxweapset=2
	//add new weapons
	weapons[4,13]=1 //choir
	weapons[21,13]=1 //shield
	weapons[25,13]=1 //gemini
	//weapons[4,4]=1 //choir
	//weapons[21,4]=1 //shield
	//weapons[25,4]=1 //gemini
	//weapons[4,3]=1 //choir
	//weapons[21,3]=1 //shield
	//weapons[25,3]=1 //gemini
}
}

if version = "0.5.0" {
	master.maxweapons=2
	master.maxweapset=2
legacyversion="0.5.0"
tutorial=0
shownmessage=0
email=""
playername=""
playerid=-1
password=""
playernumber=1
version=master.newest_version
} else {
	if version = "0.6.0" {
		master.maxweapons=2
		master.maxweapset=2
	legacyversion=save_data[? "legacyversion"]
	playername= save_data[? "playername"]
	playernumber= save_data[? "playernumber"]
	playerid=save_data[? "playerid"]
	tutorial=save_data[? "tutorial"]
	password=""
	email=save_data[? "email"]
	if tutorial>3 {
		if playername != "" {
		shownmessage=1
		}
	}
	version=master.newest_version
	} else {
		if version = "Alpha 1.0.0" {
			master.maxweapons=2
			master.maxweapset=2
		legacyversion=save_data[? "legacyversion"]
	playername= save_data[? "playername"]
	playernumber= save_data[? "playernumber"]
	playerid=save_data[? "playerid"]
	tutorial=save_data[? "tutorial"]
	password=save_data[? "password"]
	email=save_data[? "email"]
	if tutorial>3 {
		if playername != "" {
		shownmessage=1
		}
	}	
	version=master.newest_version
		} else {
			if version = "Beta 1.0.0" {
				master.maxweapons=save_data[? "maxweapons"]
			master.maxweapset=save_data[? "maxweapons"]
	legacyversion=save_data[? "legacyversion"]
	playername= save_data[? "playername"]
	playernumber= save_data[? "playernumber"]
	playerid=save_data[? "playerid"]
	tutorial=save_data[? "tutorial"]
	password=save_data[? "password"]
	email=save_data[? "email"]
	if tutorial>3 {
		if playername != "" {
		shownmessage=1
		}
	}
			} else {
					master.maxweapons=save_data[? "maxweapons"]
			master.maxweapset=save_data[? "maxweapons"]
	legacyversion=save_data[? "legacyversion"]
	playername= save_data[? "playername"]
	playernumber= save_data[? "playernumber"]
	playerid=save_data[? "playerid"]
	tutorial=save_data[? "tutorial"]
	password=save_data[? "password"]
	email=save_data[? "email"]
	if tutorial>3 {
		if playername != "" {
		shownmessage=1
		}
	}
	
				if version = master.newest_version {
					//newest networking save files
master.invisible=save_data[? "invisible"]
master.disconnected=save_data[? "disconnected"]//opt out of online play
master.banned=save_data[? "banned_"]//0=no, -1=permaban, 1-inf =how many days.
master.datebanned=save_data[? "date_banned"]
master.timesbanned=save_data[? "times_banned"]
master.last_time_online=save_data[? "last_online"]
master.last_version_played=save_data[? "last_version_played"]
for (var i=0; i<array_length(master.messages); i ++) {
	master.messages[i,0]=save_data[? "message_from_"+string(i)]
	master.messages[i,1]=save_data[? "message_"+string(i)]
	master.messages[i,2]=save_data[? "message_read"+string(i)]
	master.messages[i,3]=save_data[? "message_date"+string(i)]
//[Player From,Message,Read? (-1=N/A 0=not read, 1=notified, 2=read
}
master.friend_count=save_data[? "friend_count"]
for (var i=0; i<array_length(master.friends_list); i ++) {
	master.friends_list[i,0]=save_data[? "friends_list_name_"+string(i)]
	master.friends_list[i,1]=save_data[? "friends_list_id"+string(i)]
	master.friends_list[i,2]=save_data[? "friends_list_date"+string(i)]
	master.friends_list[i,3]=save_data[? "friends_list_best"+string(i)]
//[name, id, date became friends, best friends?]
}

master.game_progress=save_data[? "game_progress"]
for (var i=0; i<array_length(master.planet_log); i ++) {
master.planet_log[i]=save_data[? "planet_log"+string(i)]
} //0=not visited 1=visited 2=completed
master.selectedstage=save_data[? "selected_planet"]
master.tasks_completed=save_data[? "tasks_complete"]
master.collectibles_unlocked=save_data[? "collect_unlocked"]
master.dollar_array[0]=save_data[? "dollar_array_have"]
master.dollar_array[1]=save_data[? "dollar_array_spent"]
master.dollar_array[2]=save_data[? "dollar_array_earned"]
//[have, spent, earned]
master.enemy_killcount=save_data[? "enemy_kc"]
master.boss_killcount=save_data[? "boss_kc"]
master.levelender_killcount=save_data[? "level_end_kc"]
for (var i=0; i<array_length(master.ind_boss_kills); i ++) {
master.ind_boss_kills[i]=save_data[? "ind_boss_kills"+string(i)]
}
for (var i=0; i<array_length(master.character_levels); i ++) {
master.character_levels[i]=save_data[? "character_levels"+string(i)]
} //[0-50, 0-50, ..14 times]
master.name_text[0]=save_data[? "name_text_font"]
master.name_text[1]=save_data[? "name_text_color"]
master.name_text[2]=save_data[? "name_text_ocolor"]
//FONTS //0name, 1asset name, 2unlocked?
for (var i=0; i<array_length(master.font_array); i ++) {
master.font_array[i,2]=save_data[? "font_array"+string(i)]
}
master.permissions=save_data[? "permissions"]
//[font = 0;color = 0;outline color]
master.character_id=save_data[? "character_id"]
for (var i=0; i<array_length(master.customlook); i ++) {
	master.custom_look[i]=save_data[? "custom_look"+string(i)]
}//[Head, Variant, Body, Variant, Trail, Variant, Hat, Variant]
for (var i=0; i<array_length(master.theme_song); i ++) {
	master.theme_song[i]=save_data[? "theme_song"+string(i)]
} //(Theme 19 = custom, bass, drum, keys, vocals,remix?)
master.login_message=save_data[? "login_message"]
for (var i=0; i<array_length(master.clan_info); i ++) {
	master.clan_info[0]=save_data[? "clan_info_id"]
	master.clan_info[1]=save_data[? "clan_info_name"]
	master.clan_info[2]=save_data[? "clan_info_rank"]
	master.clan_info[3]=save_data[? "clan_info_rankin"]
	master.clan_info[4]=save_data[? "clan_info_date_joined"]
	master.clan_info[5]=save_data[? "clan_info_dollars"]
	master.clan_info[6]=save_data[? "clan_info_tasks"]
	master.clan_info[7]=save_data[? "clan_info_recruited"]
	master.clan_info[8]=save_data[? "clan_info_position"]
	master.clan_info[9]=save_data[? "clan_info_recruitedby"]
}
//[Clan ID, 1Clan Name, 2Clan Rank, 3Rank in Clan, 4Date Joined, 
//5Dollars Donated, 6Tasks Completed, 7Members Recruited, 8Position in Clan, 9recruited by]

					
				}
			
		}
	}
	}
}
if legacyversion="0.5.0" {
	//for (var gg=0; gg<array_length(splash);gg++) {
	splash[0]="Playing since Alpha 0.5.0"
	//}
}
if legacyversion="0.6.0" {
	//for (var gg=0; gg<array_length(splash);gg++) {
	splash[0]="Playing since Alpha 0.6.0"
	//}
}
if legacyversion="Alpha 1.0.0" {
	//for (var gg=0; gg<array_length(splash);gg++) {
	splash[0]="Playing since Alpha 1.0.0"
	//}
}
if legacyversion="Beta 1.0.0" {
	//for (var gg=0; gg<array_length(splash);gg++) {
	splash[0]="Playing since Beta 1.0.0"
	//}
}
if legacyversion="Beta 1.5.0" {
	//for (var gg=0; gg<array_length(splash);gg++) {
	splash[0]="Playing since Beta 1.5.0"
	//}
}
//optionarray=[
//[mastervolset,"MASTER VOLUME"],
//[musicvol,"MUSIC VOLUME"],
//[sfxvol,"SFX VOLUME"],
//[dialougevol,"DIALOUGE VOLUME"],
//[uivol,"UI VOLUME"],
//[uiscale,"UI SCALE"]
//]
scaleg=uiscale
scalegg=uiscale
		

		for (i=0; i<array_length(itemsload); i ++) {
		itemsload[i,1]=save_data[? "itemsload"+string(i)]
		}
		hidecompletedunlocks=save_data[? "hidecompletedunlocks"]
		hidelockedcol=save_data[? "hidelockedcol"]
//tasks
//what it unlocks, 1requirement,2progress,3completed?,4image,5visible?,6rewardtype, 7collectionid (if item), 8 seen, cumulative?
		for (i=0; i<array_length(tasks); i ++) {
		tasks[i,2]=save_data[? "tasksprogress"+string(i)]
		tasks[i,3]=save_data[? "taskscompleted"+string(i)]
		tasks[i,5]=save_data[? "tasksvisible"+string(i)]
		tasks[i,8]=save_data[? "tasksseen"+string(i)]
		}
		for (i=0; i<array_length(master.visitedplanets); i ++) {
		visitedplanets[i]=save_data[? "vplan"+string(i)] 
		}
		

//achievements
//name, 1requirement, 2achieved?, 3visible?, 4rarity, 5image, 6seen, 7 progress
		for (i=0; i<array_length(achievements); i ++) {
		collection[i,7]=save_data[? "achievementsachieved"+string(i)]
		achievements[i,3]=save_data[? "achievementsvisible"+string(i)]
		achievements[i,6]=save_data[? "achievementsseen"+string(i)]
		achievements[i,7]=save_data[? "achievementsprogress"+string(i)]
		}
		

//collectibles
//name,1state, 2amount collected, 3amount til next,4enabled,5upgradeprice,6level,7seen,i8mage, 9can disable, 10item id
//state: 0 =locked, 1=unlocked, 2=obtained.
		for (i=0; i<array_length(collection); i ++) {
		collection[i,1]=save_data[? "collectionstate"+string(i)]
		collection[i,2]=save_data[? "collectionamount"+string(i)]
		collection[i,4]=save_data[? "collectionenabled"+string(i)]
		collection[i,6]=save_data[? "collectionlevel"+string(i)]
		collection[i,7]=save_data[? "collectionseen"+string(i)]
		collection[i,19]=save_data[? "collectioninshop"+string(i)]
		}
		


//shop
//name, 1type, 2bought?, 3price, 4collectionid, 5seen, 6image,id
		for (i=0; i<array_length(shop); i ++) {
		shop[i,2] =save_data[? "shopbought"+string(i)]
		shop[i,5] =save_data[? "shopseen"+string(i)]
		}
		





	
	//for (i=0; i<array_length(master.weapons); i ++) {
	//	weapons[i,3] = save_data[? "wepd"+string(i)]
	//	weapons[i,13] = save_data[? "wepu"+string(i)]
	//}
	
	for (i=0; i<array_length(master.passives); i ++) {
		passives[i,2] = save_data[? "pasd"+string(i)]
		passives[i,7] = save_data[? "noticeb"+string(i)]
		passives[i,9] = save_data[? "passp"+string(i)]
	}

	
	//for (i=0; i<array_length(master.passives); i ++) {
	//	passives[i,2] = 1
	//	passives[i,7] = 1
	//}
	
	for (i=0; i<array_length(master.notice); i ++) {
		master.notice[i,0] = save_data[? "noticea"+string(i)]
		master.notice[i,1] = save_data[? "noticeb"+string(i)]
		master.notice[i,2] = save_data[? "noticec"+string(i)]
		master.notice[i,3] = save_data[? "noticed"+string(i)]
	}
	//for (i=0; i<array_length(master.notice); i ++) {
	//	master.notice[i,0] = 1
	//	master.notice[i,1] = 1
	//	master.notice[i,2] = save_data[? "noticec"+string(i)]
	//	master.notice[i,3] = save_data[? "noticed"+string(i)]
	//}

	for (i=0; i<array_length(master.items); i++) {
		master.items[i,3] = save_data[? "disite"+string(i)]
		master.disite[i] = save_data[? "disite"+string(i)]
	}
	for (i=0; i<array_length(master.passives); i++) {
	//master.passives[i,2] = save_data[? "dispas"+string(i)]
	master.passives[i,7] = save_data[? "lockpas"+string(i)]
	master.dispas[i] = save_data[? "dispas"+string(i)]
	master.lockpas[i] = save_data[? "lockpas"+string(i)]
	}
	
	for (i=0; i<array_length(master.characters); i ++) {
	master.characters[i,0] = save_data[? "charunlocked"+string(i)] 
	master.characters[i,1] = save_data[? "charname"+string(i)]
	master.characters[i,2] = save_data[? "charlevel"+string(i)]
	master.characters[i,3] = save_data[? "charxp"+string(i)]
	master.characters[i,4] = save_data[? "charxpto"+string(i)]
	master.characters[i,5] = save_data[? "charlyricism"+string(i)]
	master.characters[i,6] = save_data[? "charrhythm"+string(i)]
	master.characters[i,7] = save_data[? "charflow"+string(i)]
	master.characters[i,8] = save_data[? "charswag"+string(i)]
	master.characters[i,9] = save_data[? "charvariation"+string(i)]
	}
	master.charselect = save_data[? "charselect"]
		for (i=0; i<array_length(master.allkills); i++) {
		master.allkills[i] = save_data[? "allkills"+string(i)]
	}
	master.recordkill= save_data[? "recordkill"]
	master.recordtime=save_data[? "recordtime"]
	master.recordlevel=save_data[? "recordlevel"]
	
	for (i=0; i<array_length(master.charrecordkill); i++) {
		master.charrecordkill[i]=save_data[? "charrecordkill"+string(i)]
	}
	for (i=0; i<array_length(master.charrecordtime); i++) {
		master.charrecordtime[i]=save_data[? "charrecordtime"+string(i)]
	}
	for (i=0; i<array_length(master.charrecordlevel); i++) {
		master.charrecordlevel[i]=save_data[? "charrecordlevel"+string(i)]
	}
	for (i=0; i<array_length(master.chartotalkill); i++) {
		master.chartotalkill[i]=save_data[? "chartotalkill"+string(i)]
	}

if master.shownmessage!=-1 {
	master.shownmessage=save_data[? "shownmessage"]
} else {
	master.shownmessage=0
}

if playername = "" {
		shownmessage=0
		}
	
	startmusic=0
		}
	}


		ds_map_destroy(save_data);
	}
}



Script: scr_load_game
File: scr_load_game.yy
Code:
{
  "$GMScript":"v1",
  "%Name":"scr_load_game",
  "isCompatibility":false,
  "isDnD":false,
  "name":"scr_load_game",
  "parent":{
    "name":"Scripts",
    "path":"folders/Scripts.yy",
  },
  "resourceType":"GMScript",
  "resourceVersion":"2.0",
}

== Related Logs ==
